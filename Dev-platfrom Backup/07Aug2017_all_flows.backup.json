[
    {
        "id": "5aaca332.83ed4c",
        "type": "tab",
        "label": "Login API "
    },
    {
        "id": "1bc13036.e3b82",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "5e22f743.a6a0b8",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "dc67abfa.d0b008",
        "type": "tab",
        "label": "Twilio_SMS"
    },
    {
        "id": "a35e95d3.4f79f8",
        "type": "tab",
        "label": "Test"
    },
    {
        "id": "d4fc71c6.eee2",
        "type": "tab",
        "label": "working demo's"
    },
    {
        "id": "33a82338.96373c",
        "type": "tab",
        "label": "workaround"
    },
    {
        "id": "bd3a143c.e87078",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "ba4d189b.79c998"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "ba4d189b.79c998",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "e079261f.947b38",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "94340f78.707da",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2ff3abf2.78fcf4",
        "type": "twilio-api",
        "z": "5aaca332.83ed4c",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DoMeNowApp Twilio Service"
    },
    {
        "id": "7bfcbfb0.b23e8",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": ""
    },
    {
        "id": "b1c40594.ea3728",
        "type": "twilio-api",
        "z": "dc67abfa.d0b008",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DriList Sms Service for chatbot"
    },
    {
        "id": "515a1f24.d62ec",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "ba4d189b.79c998",
        "type": "function",
        "z": "bd3a143c.e87078",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6627c2e.5b9263c",
        "type": "function",
        "z": "e079261f.947b38",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "22848c23.6f9ff4",
        "type": "function",
        "z": "94340f78.707da",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "e355d2e6.ae2c5",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "phone",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "cec4c6e5.f78928"
            ]
        ]
    },
    {
        "id": "64c8860.929b27c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Going to save user if not found in db",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 287,
        "wires": []
    },
    {
        "id": "b5b302a.6e2f",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\n\nmsg.verification_code = rand();\nmsg.access_token = token();\n\n\nif(isEmpty(db_data)) {\n    payload = {\n        table       : \"users\",\n        access_token:  msg.access_token,\n        phone       :  parseInt(user_data.phone),\n        virtual_phone: parseInt(user_data.phone),\n        security_level: 0,\n        firstname         : parseInt(user_data.phone) || \"\",\n        lastname          : \"\",\n        code:         msg.verification_code,\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: msg.user_data.device_id || \"\",\n        push_accepted: msg.push_accepted || 1\n    };\n}\nelse {\n    payload ={\n      _id               : db_data[0]._id,\n      _rev              : db_data[0]._rev,\n      table             : \"users\",\n      long_url          : db_data[0].long_url || \"\",\n      access_token      : msg.access_token,\n      security_level    : db_data[0].security_level ,\n      phone             : db_data[0].phone || parseInt(user_data.phone) ,\n      virtual_phone     : db_data[0].virtual_phone || parseInt(user_data.phone),\n      email             : db_data[0].email || \"\",\n      converstation_id  : db_data[0].converstation_id || \"\",\n      firstname         : db_data[0].firstname || \"\",\n      lastname          : db_data[0].lastname || \"\",\n      code              : msg.verification_code,\n      password          : db_data[0].password || \"\",\n      image             : db_data[0].image || \"\",\n      type              : db_data[0].type ,\n      device_id         : msg.user_data.device_id || db_data[0].device_id,\n      push_accepted     : msg.push_accepted || db_data[0].push_accepted\n    };\n}\n\nmsg.security_level = payload.security_level ;\nmsg.payload = payload;\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "64c8860.929b27c",
                "236b0354.22847c",
                "822b5d66.8ac45"
            ]
        ]
    },
    {
        "id": "9b820297.38aa",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/login",
        "method": "post",
        "swaggerDoc": "",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e30cf75b.3c38b8",
                "9f3abd51.1122b"
            ]
        ]
    },
    {
        "id": "e30cf75b.3c38b8",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "e355d2e6.ae2c5"
            ]
        ]
    },
    {
        "id": "cec4c6e5.f78928",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by phone",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "13e799d.77bd166"
            ]
        ]
    },
    {
        "id": "13e799d.77bd166",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "b5b302a.6e2f"
            ]
        ]
    },
    {
        "id": "822b5d66.8ac45",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "save user to db",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "82bc720b.688b",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 102,
        "y": 763,
        "wires": [
            [
                "d934be59.31d7e",
                "2bb50a4e.e465a6"
            ]
        ]
    },
    {
        "id": "d934be59.31d7e",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 327,
        "y": 764,
        "wires": [
            [
                "53591a00.2eb7c8"
            ]
        ]
    },
    {
        "id": "53591a00.2eb7c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. access_token",
        "func": "if(isEmpty(msg.request_data.access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.code)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`code` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.device_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`device_id` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.push_accepted)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`push_accepted` is required to fullfil request\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.access_token = msg.request_data.access_token; \n    msg.payload = {\n        query: \"table: users AND access_token:\"+ msg.request_data.access_token\n    };    \n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 527,
        "y": 764,
        "wires": [
            [
                "6e9ce6fa.adc298"
            ]
        ]
    },
    {
        "id": "236b0354.22847c",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "security_level",
        "property": "security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "93b10df0.8c22c"
            ],
            [
                "682abb6d.98ae74"
            ]
        ]
    },
    {
        "id": "682abb6d.98ae74",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. return menu page",
        "func": "//node.warn(\"comes in this case.....\");\nvar response = {\n    \"page_id\":      2,\n    \"access_token\": msg.access_token\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 673,
        "y": 442,
        "wires": [
            [
                "e7e8f1c1.5fdeb",
                "c9076904.e68eb8"
            ]
        ]
    },
    {
        "id": "c9076904.e68eb8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 933,
        "y": 480,
        "wires": []
    },
    {
        "id": "3d8a6f38.8353d",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by token",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 908.9999694824219,
        "y": 802.0000305175781,
        "wires": [
            [
                "cd6b4c5.0a66ab"
            ]
        ]
    },
    {
        "id": "cd6b4c5.0a66ab",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 209,
        "y": 844,
        "wires": [
            [
                "589646ee.f417c8"
            ]
        ]
    },
    {
        "id": "589646ee.f417c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].virtual_phone).length == 4){\n        if(request_data.code == 1234){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].virtual_phone).length > 7 &&  String(db_data[0].virtual_phone).length <= 12){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 844,
        "wires": [
            [
                "95e69443.affee8"
            ]
        ]
    },
    {
        "id": "d2d9371d.8c8668",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 989,
        "y": 1004,
        "wires": []
    },
    {
        "id": "95e69443.affee8",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 249,
        "y": 924,
        "wires": [
            [
                "6844749e.b18e1c"
            ],
            [
                "4be9133b.06943c"
            ]
        ]
    },
    {
        "id": "9ad2cef2.8181e",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  2,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 759,
        "y": 944,
        "wires": [
            [
                "d2d9371d.8c8668",
                "2e62384d.25baa8"
            ]
        ]
    },
    {
        "id": "b83750a7.3dda8",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "update security level",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 779,
        "y": 884,
        "wires": []
    },
    {
        "id": "6844749e.b18e1c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0] ,\n    body    = msg.request_data ;\n\ndb_data.security_level = 1 ;\ndb_data.device_id = body.device_id ;\ndb_data.push_accepted = parseInt(body.push_accepted) || 1 ;\n\nmsg.payload = db_data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 924,
        "wires": [
            [
                "9ad2cef2.8181e",
                "b83750a7.3dda8"
            ]
        ]
    },
    {
        "id": "4be9133b.06943c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 1004,
        "wires": [
            [
                "d2d9371d.8c8668",
                "42ea84ba.4a481c"
            ]
        ]
    },
    {
        "id": "9f3abd51.1122b",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 269,
        "y": 142.99999237060547,
        "wires": []
    },
    {
        "id": "2bb50a4e.e465a6",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326,
        "y": 703,
        "wires": []
    },
    {
        "id": "e7e8f1c1.5fdeb",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "menu page",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 934,
        "y": 429,
        "wires": []
    },
    {
        "id": "93b10df0.8c22c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "11. return verify page & ac",
        "func": "var req_body = msg.user_data ;\nif(msg.user_data.phone){\n  \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"access_token\": msg.access_token,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "9b48d0d1.3a54"
            ]
        ]
    },
    {
        "id": "9b48d0d1.3a54",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "8c93eeec.15939"
            ],
            [
                "8e617e0a.63d52"
            ]
        ]
    },
    {
        "id": "8c93eeec.15939",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = \"Your verification code for the DoMeNow app is : \" + code;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "316ae0bc.6e9f3",
                "e2bc87de.c17e78",
                "130f89b6.e85346"
            ]
        ]
    },
    {
        "id": "e2bc87de.c17e78",
        "type": "twilio out",
        "z": "5aaca332.83ed4c",
        "service": "_ext_",
        "twilio": "2ff3abf2.78fcf4",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "316ae0bc.6e9f3",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "5e5d801a.231d",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "130f89b6.e85346",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "5e5d801a.231d"
            ]
        ]
    },
    {
        "id": "8e617e0a.63d52",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "d3dc7932.f1f3a8",
                "3495d52.1d45a2a"
            ]
        ]
    },
    {
        "id": "d3dc7932.f1f3a8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "3495d52.1d45a2a",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "7c9bd36a.800dfc",
        "type": "http in",
        "z": "1bc13036.e3b82",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 219,
        "y": 291,
        "wires": [
            [
                "6ee54ff6.df69e"
            ]
        ]
    },
    {
        "id": "6ee54ff6.df69e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Handler",
        "func": "var req = msg.payload;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    // if(!(\"api\" in req)){\n    //     msg.api_response = \"API_ERROR\";\n    //     msg.payload = {status: 400, error: true, msg: \"Body must must be wrapped with `api` key.\", data: null};\n    // }else{\n    //     msg.req_body = req.api;\n    // }\n    msg.req_body = populate_content(req.app) ;\n}\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    return obj.api;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 411,
        "y": 291,
        "wires": [
            [
                "7d44e24.4d6b11c"
            ]
        ]
    },
    {
        "id": "7d44e24.4d6b11c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 574,
        "y": 291,
        "wires": [
            [
                "25d70d09.b4fa42"
            ],
            [
                "863d36a6.9affc8"
            ]
        ]
    },
    {
        "id": "25d70d09.b4fa42",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 716,
        "y": 253,
        "wires": []
    },
    {
        "id": "863d36a6.9affc8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate body",
        "func": "var body = msg.req_body;\n\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n    msg.access_token  = body.access_token ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 735,
        "y": 309,
        "wires": [
            [
                "2da8026d.28dc2e"
            ]
        ]
    },
    {
        "id": "2da8026d.28dc2e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 908,
        "y": 309,
        "wires": [
            [
                "a2ccf1f4.33b25"
            ],
            [
                "d6ab12c2.6dc92"
            ]
        ]
    },
    {
        "id": "a2ccf1f4.33b25",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1056,
        "y": 265,
        "wires": []
    },
    {
        "id": "d6ab12c2.6dc92",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "template",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "task_table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "location",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail_to_task",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 12,
        "x": 1069,
        "y": 566,
        "wires": [
            [
                "404d640c.c576dc"
            ],
            [
                "26ec6576.4cdf4a"
            ],
            [
                "bc40e3a9.7b9f1"
            ],
            [
                "d09cc088.14246"
            ],
            [
                "4a80fb90.223604"
            ],
            [
                "5a40e3c0.6a7c7c"
            ],
            [
                "7a1fa12a.ae0fc"
            ],
            [
                "af77daa4.7a3808"
            ],
            [
                "1ea39368.4d2cbd"
            ],
            [
                "910f835e.b1997"
            ],
            [
                "8047b1c2.00b14"
            ],
            [
                "9e907e9.bafc48"
            ]
        ]
    },
    {
        "id": "404d640c.c576dc",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "User Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table               : body.table,\n    long_url            : null,\n    access_token        : access_token(),\n    security_level      : body.security_level || 0,\n    virtual_phone       : body.phone,\n    email               : body.email,\n    converstation_id    : null,\n    firstname           : body.firstname,\n    lastname            : body.firstname,\n    code                : 1234,\n    password            : body.password,\n    image               : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction rand() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n}\n\nfunction time() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n}\n\nfunction access_token() {\n    return time()+'.'+rand(); // to make it longer\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1294,
        "y": 20,
        "wires": [
            [
                "648036c5.96d398",
                "19f03c04.6b4f04"
            ]
        ]
    },
    {
        "id": "26ec6576.4cdf4a",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Template Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    _id         : body.table_data._id,\n    table       : body.table,\n    name        : body.table_data.name || \"\",\n    html        : body.table_data.html || \"\",\n    js          : body.table_data.js   || \"\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1303,
        "y": 103,
        "wires": [
            [
                "19f03c04.6b4f04",
                "648036c5.96d398"
            ]
        ]
    },
    {
        "id": "bc40e3a9.7b9f1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Task Table",
        "func": "var body        = msg.req_body.table_data,\n    table_name  = msg.req_body.table,\n    page_id     = generate_page_id();\n\nmsg.payload = {\n    _id                     : body._id,\n    table                   : table_name, \n    task_name               : body.name || \"\", \n    page_id                 : page_id, \n    from_page_id            : page_id,\n    parent_id               : page_id, \n    user_id                 : body.user_id || \"\",\n    header_template_id      : body.header_template_id || \"\",\n    detail_template_id      : body.details_template_id || \"\",\n    footer_template_id      : body.footer_template_id || \"\",\n    timeout_id              : body.timeout_id || \"\",\n    location_id             : body.location_id || \"\",\n    child_default_task_id   : body.child_default_task_id || \"\",\n    child_default_task_name : body.child_default_task_name || \"\",\n    date_created            : body.date_created || new Date().toJSON(),\n    status                  : body.status || 0,\n    category                : body.category || \"\",\n    additional_data_fn      : body.additional_data_fn || \"\",\n    optional_data           : body.optional_data || {},\n    required_data           : body.required_data || {},\n    offline_expiration_time : body.offline_expiration_time || 0,\n    display_if_empty        : body.display_if_empty || 1 ,\n    type                    : {\n        public              : body.type  || \"public\"\n    },\n    image                   : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n    count_status\t: {\n\t   active       : 1,\n\t   unread       : 0,\n\t},\n\tcount\t\t\t: {\n\t    active      : 1,\n\t    unread      : 0,\n\t},\n\tcount_if\t\t: {\n\t    active      : 1,\n\t    unread      : 0\n\t},\n    defaults                : {\n        parent              : null,\n        next_child          : null,\n        all_children        : null,\n        user                : body.user_id\n    }\n    \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction generate_page_id() {\n    return new Date().getTime();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1295,
        "y": 190,
        "wires": [
            [
                "648036c5.96d398",
                "19f03c04.6b4f04"
            ]
        ]
    },
    {
        "id": "d09cc088.14246",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Timeout Table",
        "func": "var body        = msg.req_body ,\n    table_name  = msg.req_body.table;\nmsg.payload = {\n    table: table_name,\n    name: msg.timeout_data.name || \"\",\n    timeout_list: create_delivery_obj(body) \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction create_delivery_obj(body){\n    var obj = {};\n    var user_id = body.delivery_user_ids ? body.delivery_user_ids.split(',') : \"\";\n    \n    for(var i=0; i < body.delivery_count; i++){\n        obj[i] = {\n            delivery_count      : i , \n            delivery_status     :   body.delivery_status || 0, \n            delivery_due        :   body.delivery_due || new Date.toJSON(),\n            delivery_user_ids   :   user_id[i] ? user_id[i] : body.delivery_user_ids,\n            delivery_via        :   body.delivery_via || \"\",\n            delivery_task_id    :   body.delivery_task_id || \"\",\n            delivery_task_name  :   body.delivery_task_name || \"\", \n            message_id          :   body.message_id || \"\",\n            from_user_id        :   body.from_user_id || \"\"\n        };\n    }\n    return obj ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308,
        "y": 279,
        "wires": [
            [
                "648036c5.96d398",
                "19f03c04.6b4f04"
            ]
        ]
    },
    {
        "id": "4a80fb90.223604",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Location Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table         : body.table,\n    location_name : body.name,\n    location_type : body.type,\n    location_data : {\n        lat : body.lat ? Number(body.lat) : 0,\n        lon : body.lon ? Number(body.lon) : 0,\n        dist: body.dist ? Number(body.dist) : 0,\n        web: body.web || \"\"\n    }\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1307,
        "y": 379,
        "wires": [
            [
                "648036c5.96d398",
                "19f03c04.6b4f04"
            ]
        ]
    },
    {
        "id": "5a40e3c0.6a7c7c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1298,
        "y": 545,
        "wires": [
            [
                "8340ddf2.852ea"
            ]
        ]
    },
    {
        "id": "9e907e9.bafc48",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1309.0000762939453,
        "y": 1266.0000648498535,
        "wires": [
            [
                "4925e8a7.371308"
            ]
        ]
    },
    {
        "id": "4925e8a7.371308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1497.0000762939453,
        "y": 1279.0000648498535,
        "wires": []
    },
    {
        "id": "648036c5.96d398",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Master Table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1541,
        "y": 146.99999523162842,
        "wires": []
    },
    {
        "id": "8d2408fe.0d0618",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1723,
        "y": 207,
        "wires": []
    },
    {
        "id": "19f03c04.6b4f04",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1564,
        "y": 206,
        "wires": [
            [
                "8d2408fe.0d0618"
            ]
        ]
    },
    {
        "id": "fc1044e8.8cfd28",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = msg.child_task ? msg.child_task[0] : null,\n    timeout             = msg.timeout ? msg.timeout[0] : null ,\n    location            = msg.location ? msg.location[0] : null,\n    user                = msg.user_obj ? msg.user_obj[0] : null ,\n    task                = msg.task_obj ? msg.task_obj[0] : null,\n    user_arr            = msg.user_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n     \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id ? [task._id] : null ;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = task.child_default_task_id ? return_page_id(form_data.page_id) : 0;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\"private\": \"private\"};\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\ndetail.watson_incoming                  = {\n                                            message :   \"Watson response to : \" + form_data.note,\n                                            response : {},\n                                            \n                                        } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\">>>>>>>>>>>>>>>>>>>>>>> set_from_user\");\n        // node.warn(item);\n        return item[0] ;\n    }else{\n        // node.warn(\"set_from_user else case\");\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\"check_need_to_create_second_detail >>>>\");\n        // node.warn(item);\n        return true ;\n    }else{\n        // node.warn(\"else case >>>>\");\n        return false ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2323.03125,
        "y": 404.046875,
        "wires": [
            [
                "27237117.a1f3ce",
                "72b3a1c3.d8c1",
                "3a83b028.174ce",
                "d4893bd6.73baf8"
            ]
        ]
    },
    {
        "id": "da2d3d3.052fac",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"There isn't any Location for task obj\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2964.03125,
        "y": 303.046875,
        "wires": [
            [
                "fc1044e8.8cfd28"
            ]
        ]
    },
    {
        "id": "6825d36e.e902ec",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "location",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3378.03125,
        "y": 362.046875,
        "wires": [
            [
                "fc1044e8.8cfd28"
            ]
        ]
    },
    {
        "id": "27237117.a1f3ce",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2521.03125,
        "y": 521.046875,
        "wires": [
            [
                "76034db8.945264"
            ],
            [
                "fb3e5d3b.f550e"
            ]
        ]
    },
    {
        "id": "11862d00.8b1143",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "location",
        "property": "location_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2827.03125,
        "y": 309.046875,
        "wires": [
            [
                "da2d3d3.052fac"
            ],
            [
                "6c40a25e.7fc03c"
            ]
        ]
    },
    {
        "id": "21c61856.76f888",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3156.03125,
        "y": 360.046875,
        "wires": [
            [
                "6825d36e.e902ec"
            ]
        ]
    },
    {
        "id": "76034db8.945264",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2697.03125,
        "y": 542.046875,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "fb3e5d3b.f550e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    user_obj            = msg.user_obj ? msg.user_obj[0]: {} ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : user_obj._id || detail.user_id,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || \"private\",\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2718.03125,
        "y": 584.046875,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "5ad3dfae.2f3a4",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"There isn't any timeout for this task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2368.03125,
        "y": 300.046875,
        "wires": [
            [
                "11862d00.8b1143"
            ]
        ]
    },
    {
        "id": "5451f377.b3346c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "timeout",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2735.03125,
        "y": 356.046875,
        "wires": [
            [
                "11862d00.8b1143"
            ]
        ]
    },
    {
        "id": "6c40a25e.7fc03c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "location",
        "func": "msg.payload = {\n    query: \"table:location AND _id:\" + msg.location_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2971.03125,
        "y": 362.046875,
        "wires": [
            [
                "21c61856.76f888"
            ]
        ]
    },
    {
        "id": "aa1ef719.92f148",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2880.03125,
        "y": 555.046875,
        "wires": [
            [
                "f667d3d1.e4d44",
                "4aaf74bf.3f4cac"
            ],
            [
                "50f53f18.59ae5",
                "f667d3d1.e4d44"
            ]
        ]
    },
    {
        "id": "b103d9f4.3f09f8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "timeout",
        "property": "timeout_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2224.03125,
        "y": 307.046875,
        "wires": [
            [
                "5ad3dfae.2f3a4"
            ],
            [
                "a2fb7435.fa2558"
            ]
        ]
    },
    {
        "id": "399c7862.457f88",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2562.03125,
        "y": 357.046875,
        "wires": [
            [
                "5451f377.b3346c"
            ]
        ]
    },
    {
        "id": "f667d3d1.e4d44",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 541.046875,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "50f53f18.59ae5",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Optional task log",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3073.03125,
        "y": 582.046875,
        "wires": []
    },
    {
        "id": "d842b454.c33408",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"there isn't any child default_task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 203.046875,
        "wires": [
            [
                "b103d9f4.3f09f8"
            ]
        ]
    },
    {
        "id": "5fee152d.c1b79c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "child_task",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "child_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3669.03125,
        "y": 258.046875,
        "wires": [
            [
                "b103d9f4.3f09f8"
            ]
        ]
    },
    {
        "id": "a2fb7435.fa2558",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "timeout",
        "func": "msg.payload = {\n    query: \"table:timeout AND _id:\" + msg.timeout_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2378.03125,
        "y": 358.046875,
        "wires": [
            [
                "399c7862.457f88"
            ]
        ]
    },
    {
        "id": "183d69a0.d38bf6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3470.03125,
        "y": 539.046875,
        "wires": [
            [
                "65c98f5a.2f37d"
            ],
            [
                "36a38d76.bf4c62"
            ]
        ]
    },
    {
        "id": "67fb59fb.34c6a8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "child_task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3123.03125,
        "y": 227.046875,
        "wires": [
            [
                "d842b454.c33408"
            ],
            [
                "14cd5a97.861e15"
            ]
        ]
    },
    {
        "id": "7bc1c164.76c5e",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3467.03125,
        "y": 259.046875,
        "wires": [
            [
                "5fee152d.c1b79c"
            ]
        ]
    },
    {
        "id": "7894a745.f32498",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3626.03125,
        "y": 479.046875,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "65c98f5a.2f37d",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n  msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3690.03125,
        "y": 533.046875,
        "wires": [
            [
                "7894a745.f32498",
                "7936c18d.ddbd1"
            ]
        ]
    },
    {
        "id": "36a38d76.bf4c62",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3664.03125,
        "y": 585.046875,
        "wires": [
            [
                "90317658.28beb8",
                "7cad6d6c.a42054"
            ]
        ]
    },
    {
        "id": "799f9f2c.20ce4",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2953.03125,
        "y": 169.046875,
        "wires": [
            [
                "236b74f3.1c448c"
            ],
            [
                "67fb59fb.34c6a8"
            ]
        ]
    },
    {
        "id": "14cd5a97.861e15",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "child task",
        "func": "msg.payload = {\n    query : \"table:task_table AND _id:\" + msg.child_task_id \n};\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3280.03125,
        "y": 260.046875,
        "wires": [
            [
                "7bc1c164.76c5e"
            ]
        ]
    },
    {
        "id": "90317658.28beb8",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3901.03125,
        "y": 565.046875,
        "wires": []
    },
    {
        "id": "2e78e0d1.6e91c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var task = msg.task_obj , user = msg.user_obj, detail = msg.details_obj;\n\nif(isEmpty(task)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n}else if(isEmpty(user)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.child_task_id   = msg.task_obj[0].child_default_task_id || null;\n    msg.timeout_id      = msg.task_obj[0].timeout_id || null;\n    msg.location_id     = msg.task_obj[0].location_id || null;\n}\nreturn msg;\n\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2790.03125,
        "y": 178.046875,
        "wires": [
            [
                "799f9f2c.20ce4"
            ]
        ]
    },
    {
        "id": "236b74f3.1c448c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 3129.03125,
        "y": 173.046875,
        "wires": []
    },
    {
        "id": "de29f586.579be8",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "user arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3375.03125,
        "y": 38.046875,
        "wires": [
            [
                "89d29c64.61846"
            ]
        ]
    },
    {
        "id": "1159571.349ffa9",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3217.03125,
        "y": 32.046875,
        "wires": [
            [
                "de29f586.579be8"
            ]
        ]
    },
    {
        "id": "63dfaf7f.0f8c7",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort: \"_id<string>\"\n};\n\nmsg.detail_payload = {\n    query: \"table:details\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3052.03125,
        "y": 32.046875,
        "wires": [
            [
                "1159571.349ffa9"
            ]
        ]
    },
    {
        "id": "9a874081.8b42e",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "user_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2894.03125,
        "y": 33.046875,
        "wires": [
            [
                "63dfaf7f.0f8c7"
            ]
        ]
    },
    {
        "id": "fa630876.88dc18",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2720.03125,
        "y": 34.046875,
        "wires": [
            [
                "9a874081.8b42e"
            ]
        ]
    },
    {
        "id": "f6c9dea8.5f06e",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "user_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2552.0313720703125,
        "y": 35.046875,
        "wires": [
            [
                "fa630876.88dc18"
            ]
        ]
    },
    {
        "id": "27d6a391.8b151c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "task_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2390.0313720703125,
        "y": 35.046875,
        "wires": [
            [
                "f6c9dea8.5f06e"
            ]
        ]
    },
    {
        "id": "426e461f.b124a8",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2223.03125,
        "y": 35.046875,
        "wires": [
            [
                "27d6a391.8b151c"
            ]
        ]
    },
    {
        "id": "c2f887a2.0e44c8",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1949.03125,
        "y": 413.046875,
        "wires": [
            [
                "426e461f.b124a8"
            ]
        ]
    },
    {
        "id": "8340ddf2.852ea",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var access_token = msg.req_body.access_token ;\nvar table_data = msg.req_body.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_payload = { \n        query: \"table:task_table AND _id:\" + table_data.task_id \n    };\n    msg.user_payload = {\n        query: \"table:users AND access_token:\" + access_token \n    };\n    msg.page_payload = {\n        query: \"table:details AND page_id:\" + table_data.page_id  \n    };\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.03125,
        "y": 466.046875,
        "wires": [
            [
                "855a021b.8aaaa"
            ]
        ]
    },
    {
        "id": "de8ecfc0.1ca1c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "template",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "524c9629.0a16d8"
            ]
        ]
    },
    {
        "id": "524c9629.0a16d8",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "Templates",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2383.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "92ad8642.bc0738"
            ]
        ]
    },
    {
        "id": "92ad8642.bc0738",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "template arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "templates_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2614.2734375,
        "y": 176.9921875,
        "wires": [
            [
                "2e78e0d1.6e91c",
                "6fb274fe.71719c"
            ]
        ]
    },
    {
        "id": "34f7000c.78479",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 1,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4253.03125,
        "y": 621.046875,
        "wires": [
            [
                "b85632f.f6942d",
                "b3871104.b6593"
            ]
        ]
    },
    {
        "id": "7cad6d6c.a42054",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3873.03125,
        "y": 624.046875,
        "wires": [
            [
                "f49286a3.60bd48"
            ]
        ]
    },
    {
        "id": "f49286a3.60bd48",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4039.03125,
        "y": 623.046875,
        "wires": [
            [
                "34f7000c.78479"
            ]
        ]
    },
    {
        "id": "855a021b.8aaaa",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1744,
        "y": 385,
        "wires": [
            [
                "ebd20539.3bd978"
            ],
            [
                "c2f887a2.0e44c8"
            ]
        ]
    },
    {
        "id": "ebd20539.3bd978",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1942,
        "y": 355,
        "wires": []
    },
    {
        "id": "b85632f.f6942d",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "User Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4467,
        "y": 552,
        "wires": []
    },
    {
        "id": "7936c18d.ddbd1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3911,
        "y": 515,
        "wires": []
    },
    {
        "id": "4aaf74bf.3f4cac",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Optional Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3051,
        "y": 522,
        "wires": []
    },
    {
        "id": "72b3a1c3.d8c1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2503,
        "y": 438,
        "wires": []
    },
    {
        "id": "3a83b028.174ce",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2541,
        "y": 478,
        "wires": [
            [
                "d099693.f745198"
            ]
        ]
    },
    {
        "id": "d099693.f745198",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2697,
        "y": 499,
        "wires": []
    },
    {
        "id": "dc6e47ae.829f28",
        "type": "http in",
        "z": "5e22f743.a6a0b8",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "b86a2cb5.013be"
            ]
        ]
    },
    {
        "id": "b86a2cb5.013be",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    var obj = populate_content(req.app) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `app` param json.\", data: null};\n    }else{\n        msg.req_params = obj.data.api;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "d1f9a02e.3a168"
            ]
        ]
    },
    {
        "id": "d1f9a02e.3a168",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "e21a6625.bbee68"
            ],
            [
                "194125ed.652ada"
            ]
        ]
    },
    {
        "id": "e21a6625.bbee68",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 598.7656173706055,
        "y": 204.75000381469727,
        "wires": []
    },
    {
        "id": "194125ed.652ada",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    if(!checkObj(params.content)){\n        msg.payload_type = params.type ;\n        msg.payload_content = params.content;\n    }else{\n        var obj = populate_content(params.content) ;\n        if(obj.error){\n          msg.api_response = \"API_ERROR\";\n          msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n        }else{\n            msg.payload_type    = params.type ;\n            msg.payload_content = obj.data ;\n        }\n    }\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}\n\nfunction checkObj(obj){\n    if(typeof obj == \"string\") return true;\n    else return false ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "fac0f585.2f5b08"
            ]
        ]
    },
    {
        "id": "fac0f585.2f5b08",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "bd921431.7fd498"
            ],
            [
                "b40ce815.147eb8"
            ]
        ]
    },
    {
        "id": "bd921431.7fd498",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 942.7655944824219,
        "y": 286.74999237060547,
        "wires": []
    },
    {
        "id": "b40ce815.147eb8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_user_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data_for_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_task",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 7,
        "x": 787.765625,
        "y": 688.75,
        "wires": [
            [
                "a86b54c1.473c78"
            ],
            [
                "d489a76a.675f28"
            ],
            [
                "4151b7c3.f7cfa8"
            ],
            [
                "fe339820.cb4b28"
            ],
            [
                "a68f3e81.95d52"
            ],
            [
                "6cc2848f.b7b8bc"
            ],
            [
                "65c0dc87.cb51f4"
            ]
        ]
    },
    {
        "id": "96c3c68.c7d7338",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2300.0157470703125,
        "y": 761.0000610351562,
        "wires": []
    },
    {
        "id": "af77daa4.7a3808",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_task",
        "func": "var access_token = msg.access_token ;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            query : \"table:users AND access_token:\" + access_token ,\n            sort  : \"_id<string>\"\n        };\n    }\n    \nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1298.015625,
        "y": 749,
        "wires": [
            [
                "71cf9c70.c94964"
            ]
        ]
    },
    {
        "id": "e46a487a.d682b8",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2178.0157470703125,
        "y": 716.0001831054688,
        "wires": []
    },
    {
        "id": "3ed49608.46eeba",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2158.0157470703125,
        "y": 763.0000610351562,
        "wires": [
            [
                "96c3c68.c7d7338"
            ]
        ]
    },
    {
        "id": "1ea39368.4d2cbd",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_user",
        "func": "var req_body        = msg.payload_data ,\n    access_token    = msg.access_token ;\n\nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:\"+ req_body.table +\"AND access_token:\"+ access_token +\" AND _id:\" + req_body.user_id ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1295.265625,
        "y": 866.25,
        "wires": [
            [
                "1c62297c.51d5f7"
            ]
        ]
    },
    {
        "id": "1c62297c.51d5f7",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1445.2656860351562,
        "y": 891.25,
        "wires": [
            [
                "d5520305.66f6a"
            ],
            [
                "580ba2f4.08d5ec"
            ]
        ]
    },
    {
        "id": "910f835e.b1997",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_short_detail",
        "func": "var body            = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else if(isEmpty(body.detail_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`detail_id` is required to update detail\", data: body};\n}else if(isEmpty(body.page_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is required to update task detail\", data: body};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload_content = {\n        access_token : access_token,\n        content: body\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1314.140625,
        "y": 1006.5,
        "wires": [
            [
                "3f0f1c5b.139264"
            ]
        ]
    },
    {
        "id": "580ba2f4.08d5ec",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1598.7656860351562,
        "y": 894.25,
        "wires": [
            [
                "7098655a.6d389c"
            ]
        ]
    },
    {
        "id": "7098655a.6d389c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find user with `access_token` and `user_id`.\", data: req_body};    \n}else{\n    var payload ={\n      _id               : user_obj._id,\n      _rev              : user_obj._rev,\n      table             : user_obj.table,\n      long_url          : user_obj.long_url,\n      access_token      : user_obj.access_token ,\n      security_level    : user_obj.security_level,\n      phone             : Number(req_body.phone) || user_obj.phone ,\n      virtual_phone     : user_obj.virtual_phone,\n      email             : req_body.email || user_obj.email,\n      converstation_id  : user_obj.converstation_id || \"\",\n      firstname         : req_body.firstname || user_obj.firstname,\n      lastname          : req_body.lastname || user_obj.lastname,\n      code              : user_obj.code,\n      password          : user_obj.password,\n      image             : user_obj.image,\n      type              : user_obj.type,\n      device_id         : user_obj.device_id,\n      push_accepted     : user_obj.push_accepted\n    };\n    \n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = payload ;\n    msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1732.7656860351562,
        "y": 893.25,
        "wires": [
            [
                "ab068161.d3be6"
            ]
        ]
    },
    {
        "id": "db602985.e84178",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2059.7659301757812,
        "y": 864.25,
        "wires": []
    },
    {
        "id": "464e533f.20e15c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2051.7658589680987,
        "y": 907.2500025431315,
        "wires": [
            [
                "92ee4dcb.6a568"
            ]
        ]
    },
    {
        "id": "92ee4dcb.6a568",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2231.765981038411,
        "y": 906.2500025431315,
        "wires": []
    },
    {
        "id": "d5520305.66f6a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1597.6289672851562,
        "y": 850.41015625,
        "wires": []
    },
    {
        "id": "65c0dc87.cb51f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1202.833854675293,
        "y": 781.0003681182861,
        "wires": [
            [
                "226565c.1ddb69a"
            ]
        ]
    },
    {
        "id": "226565c.1ddb69a",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1341.8337631225586,
        "y": 782.6670424143474,
        "wires": []
    },
    {
        "id": "89d29c64.61846",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "detail_payload",
        "rules": [
            {
                "t": "move",
                "p": "detail_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2599.500244140625,
        "y": 93.00000762939453,
        "wires": [
            [
                "aecccef5.585b"
            ]
        ]
    },
    {
        "id": "69fa7a59.7b4134",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "detail_arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "details_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2993.833251953125,
        "y": 96.66666412353516,
        "wires": [
            [
                "de8ecfc0.1ca1c"
            ]
        ]
    },
    {
        "id": "42ea84ba.4a481c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "login page return again",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 718.8333435058594,
        "y": 1095.0000178019206,
        "wires": []
    },
    {
        "id": "2e62384d.25baa8",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "menu page return ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1046.8334045410156,
        "y": 929.0000178019206,
        "wires": []
    },
    {
        "id": "6fb274fe.71719c",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Comes her to log every thing",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 2847.8333435058594,
        "y": 224.3333511352539,
        "wires": []
    },
    {
        "id": "aecccef5.585b",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2796.33349609375,
        "y": 96.66666412353516,
        "wires": [
            [
                "69fa7a59.7b4134"
            ]
        ]
    },
    {
        "id": "6e9ce6fa.adc298",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 699.8333435058594,
        "y": 733.6667175292969,
        "wires": [
            [
                "3d8a6f38.8353d"
            ],
            [
                "6c013f75.c043a"
            ]
        ]
    },
    {
        "id": "6c013f75.c043a",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "",
        "x": 872.8333435058594,
        "y": 738.6667175292969,
        "wires": []
    },
    {
        "id": "ab068161.d3be6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1871.5000610351562,
        "y": 892.6666870117188,
        "wires": [
            [
                "db602985.e84178",
                "464e533f.20e15c"
            ],
            [
                "16048eac.d74bc1"
            ]
        ]
    },
    {
        "id": "3f0f1c5b.139264",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1483.8333740234375,
        "y": 1006.3333740234375,
        "wires": [
            [
                "64cc674e.592e58"
            ],
            [
                "3686ccd8.9cc104"
            ]
        ]
    },
    {
        "id": "e44c9b58.0a1a98",
        "type": "http in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "url": "/master_table",
        "method": "get",
        "swaggerDoc": "",
        "x": 152.8333282470703,
        "y": 206.33334350585938,
        "wires": [
            [
                "1f200840.541168"
            ]
        ]
    },
    {
        "id": "e9dd080d.c61978",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 578.8333740234375,
        "y": 208.33334350585938,
        "wires": []
    },
    {
        "id": "1f200840.541168",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 362.8333435058594,
        "y": 210.33333587646484,
        "wires": [
            [
                "e9dd080d.c61978"
            ]
        ]
    },
    {
        "id": "b3871104.b6593",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "create user_task after creating detail",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4559.833740234375,
        "y": 595.6667022705078,
        "wires": []
    },
    {
        "id": "84a08fd8.07adc",
        "type": "ibmpush",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 515.8333435058594,
        "y": 361.99999237060547,
        "wires": []
    },
    {
        "id": "6b0b4ee5.9c82a",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "Start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 136.8333282470703,
        "y": 360.6666488647461,
        "wires": [
            [
                "7145a6de.9551d8"
            ]
        ]
    },
    {
        "id": "7145a6de.9551d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "    msg.payload = {\n        \"message\": {\n            \"alert\": \"This is a demo pushnotificaiton. Please Ignore Thanks.\"\n        }\n    };\n    msg.notificationType = 3 ;\n    msg.identifiers= \"6D79C6CB-FCEB-49EA-9934-DFB8FD67E690\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 328.8333435058594,
        "y": 360.6666488647461,
        "wires": [
            [
                "84a08fd8.07adc",
                "d62af99d.3e01e8"
            ]
        ]
    },
    {
        "id": "d62af99d.3e01e8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 501.8333435058594,
        "y": 408.33333587646484,
        "wires": []
    },
    {
        "id": "dc4d3aa5.486358",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.8333282470703,
        "y": 513.6666488647461,
        "wires": [
            [
                "c1967280.e7e2f"
            ]
        ]
    },
    {
        "id": "c1967280.e7e2f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "// url, if set, is used as the url of the request. Must start with http: or https:\n// method, if set, is used as the HTTP method of the request. Must be one of GET, PUT, POST, PATCH or DELETE (default: GET)\n// headers, if set, should be an object containing field/value pairs to be added as request headers\n// payload is sent as the body of the request\n\n\nmsg.url = \"https://mobile.ng.bluemix.net/imfpush/v1/apps/3d321d52-0b21-485a-8669-7e19684b070b/messages\";\nmsg.method = \"POST\";\nmsg.headers = {\n    \"appSecret\": \"26328303-fc96-4379-a53c-7b2dbad74b00\"\n};\nmsg.payload = {\n    message: {\n        alert: \"Hello World from an SMS message using node-red rest api client.\"\n    },\n    notificationType: 3,\n    target: {\n        deviceIds: [\"89a5847f-3d15-301c-924f-c0b0cf0ac493\", \"93ab767a-dc15-3089-9cd0-372ff3403c66\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320.8333435058594,
        "y": 512.0000381469727,
        "wires": [
            [
                "87ead1cb.2c652",
                "bcfdb917.35d468"
            ]
        ]
    },
    {
        "id": "87ead1cb.2c652",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 494.8333435058594,
        "y": 511.33336639404297,
        "wires": [
            [
                "8426d48b.796de8"
            ]
        ]
    },
    {
        "id": "8426d48b.796de8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 673.8333435058594,
        "y": 511.00003814697266,
        "wires": []
    },
    {
        "id": "bcfdb917.35d468",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 488.8333435058594,
        "y": 564.0000839233398,
        "wires": []
    },
    {
        "id": "c4de788b.6c71e8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Not Working:- Below flow is not-working with IBM push node. So used Rest Api to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 470.8333435058594,
        "y": 306.6666488647461,
        "wires": []
    },
    {
        "id": "943900a.56612",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working:- Following Flow is working with the rest endpoint and is working well to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 464.6666564941406,
        "y": 461.6666564941406,
        "wires": []
    },
    {
        "id": "c10eb2f7.4f475",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1598.1666259765625,
        "y": 749.6666870117188,
        "wires": [
            [
                "c15cd6e0.e7c778"
            ],
            [
                "175f2640.7b875a"
            ]
        ]
    },
    {
        "id": "175f2640.7b875a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1722,
        "y": 790.3333740234375,
        "wires": []
    },
    {
        "id": "c15cd6e0.e7c778",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload & verify user",
        "func": "var task_obj = msg.payload_data;\n\nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Invalid access_token, Unable to find user with this access_token.\", data: null};\n}else{\n    \n    var user = msg.payload[0];\n    \n    if(user._id === task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            table                       : task_obj.table, \n            task_name                   : task_obj.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : task_obj.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1772.1666768391929,
        "y": 742.6666437784831,
        "wires": [
            [
                "df43328c.e54dc"
            ]
        ]
    },
    {
        "id": "df43328c.e54dc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1962.83349609375,
        "y": 776.6666870117188,
        "wires": [
            [
                "e46a487a.d682b8",
                "3ed49608.46eeba"
            ],
            [
                "97975b91.8cf308"
            ]
        ]
    },
    {
        "id": "97975b91.8cf308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2149.6668090820312,
        "y": 811.3333435058594,
        "wires": []
    },
    {
        "id": "71cf9c70.c94964",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1458.1666259765625,
        "y": 748.3333129882812,
        "wires": [
            [
                "c10eb2f7.4f475"
            ]
        ]
    },
    {
        "id": "bfd24bae.86b5d8",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Following code referes to \"/api/verfiy\" endpoint. which whill check if verfiy code is valid or not if valid then re-direct to Category screen else re-direct back to login screen",
        "info": "",
        "x": 567.2421875,
        "y": 638.59375,
        "wires": []
    },
    {
        "id": "aa4a7047.22dfa",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Login `/api/login` flow is following. To check existing number , send verification code, re-direct to verification screen are done by following code.",
        "info": "",
        "x": 503.2421875,
        "y": 76.6015625,
        "wires": []
    },
    {
        "id": "fe339820.cb4b28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1191.63676071167,
        "y": 527.5234394073486,
        "wires": [
            [
                "7a96b596.327adc"
            ]
        ]
    },
    {
        "id": "7ecc3796.ce8288",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1633.3867705464363,
        "y": 524.1718864999712,
        "wires": []
    },
    {
        "id": "b640bb8a.0d1a78",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.625,
        "y": 699.86328125,
        "wires": [
            [
                "f14031a7.d2127"
            ]
        ]
    },
    {
        "id": "f14031a7.d2127",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "query",
        "func": "msg.payload = {\n    //query   : \"table:users\",\n    selector: {\n        virtual_phone: {\n            \"$regex\": 7696016749\n        }\n    },\n    sort: \"_id<string>\"\n};\n\n\nnode.log(\"Log\");\nnode.warn(\"Warning\");\nnode.error(\"Error\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 282.640625,
        "y": 749.0234375,
        "wires": [
            [
                "27a7ea4.0427116"
            ]
        ]
    },
    {
        "id": "27a7ea4.0427116",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 458.640625,
        "y": 747.0703174360096,
        "wires": [
            [
                "c051cc99.0d468"
            ]
        ]
    },
    {
        "id": "c051cc99.0d468",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 643.63671875,
        "y": 752.20703125,
        "wires": []
    },
    {
        "id": "7a96b596.327adc",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1342.1328642964363,
        "y": 527.3320427499712,
        "wires": [
            [
                "9d835ace.95af38"
            ]
        ]
    },
    {
        "id": "9d835ace.95af38",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1493.1289580464363,
        "y": 526.7734489999712,
        "wires": [
            [
                "7ecc3796.ce8288"
            ]
        ]
    },
    {
        "id": "e64d7a99.c0ee48",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working:- This endpoint is used to get all records which is in master_table. We need this record while testing the various functionality like, counts and so on,",
        "info": "",
        "x": 570.62890625,
        "y": 128.2265625,
        "wires": []
    },
    {
        "id": "a6006a6b.5e62c8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working: This test flows is used to test the search functionality by keyword as google does (Seach by keyword like 12 and so on).",
        "info": "",
        "x": 472.640625,
        "y": 638.2265575639904,
        "wires": []
    },
    {
        "id": "d4893bd6.73baf8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2611.390625,
        "y": 412.94140625,
        "wires": [
            [
                "d62930a9.21f02"
            ],
            [
                "f71aaf5f.47b0e"
            ]
        ]
    },
    {
        "id": "d62930a9.21f02",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2806.375,
        "y": 404.42578125,
        "wires": [
            [
                "56701aa1.5fe244"
            ]
        ]
    },
    {
        "id": "56701aa1.5fe244",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3009.38671875,
        "y": 403.79296875,
        "wires": []
    },
    {
        "id": "f71aaf5f.47b0e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2749.378876615316,
        "y": 442.75780855119234,
        "wires": [
            []
        ]
    },
    {
        "id": "d5fe17cb.0cff78",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "url",
        "func": "var access_token = msg.payload.access_token ,\npage_id      = msg.payload.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 287.6666564941406,
        "y": 87.66665774956334,
        "wires": [
            [
                "aaa1ac9b.a6f43"
            ]
        ]
    },
    {
        "id": "2ea0fa8a.ee9776",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/test_page",
        "method": "get",
        "swaggerDoc": "",
        "x": 102.67446899414062,
        "y": 87.70571899414062,
        "wires": [
            [
                "d5fe17cb.0cff78"
            ]
        ]
    },
    {
        "id": "58dd2405.685fdc",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1406.6666107177734,
        "y": 174.322904586792,
        "wires": []
    },
    {
        "id": "64c6f779.f34ee8",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 581.6665344238281,
        "y": 139.61197024956334,
        "wires": [
            [
                "6ca781dd.6c20f"
            ]
        ]
    },
    {
        "id": "100815fe.57d97a",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "New get_page api endpoint with map view resonse ",
        "info": "",
        "x": 212.67837524414062,
        "y": 34.87757999077428,
        "wires": []
    },
    {
        "id": "ffed475a.8056c8",
        "type": "debug",
        "z": "d4fc71c6.eee2",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 1432.6705169677734,
        "y": 81.36193656921387,
        "wires": []
    },
    {
        "id": "f5002ded.ccc75",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "format",
        "func": "var db_records   = msg.db_records ,\n    counts       = msg.count_objs ,\n    access_token = msg.req_data.access_token ,\n    page_id      = msg.req_data.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users),\n            task_obj        =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);\n        \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  prepare_details\n    \t};\n    } \n}\nreturn msg;\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        for(var d=0; d<detail_data.length; d++){\n            if(check_isDisplay(detail_data[d].display_if_empty)){\n                detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n            }else{\n                detail_data.splice(d, 0);\n            }\n        }\n        msg.detailObj = removeEmptyArrayElements(detailObj);     \n    }\n    \n    return detailObj;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    var obj = {} ;\n    \n    if(isEmpty(id)) return obj;\n    \n    if(isEmpty(arr)){\n        return obj;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                obj = arr[i];\n            }\n        }\n    }    \n\n    return obj;\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n    }\n    return {users: users, templates: templates, details: details, tasks: task_table} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1194.8333702087402,
        "y": 138.666654586792,
        "wires": [
            [
                "ffed475a.8056c8",
                "58dd2405.685fdc"
            ]
        ]
    },
    {
        "id": "aaa1ac9b.a6f43",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 423.8333435058594,
        "y": 87.6666730083524,
        "wires": [
            [
                "ee2e5570.96b418"
            ],
            [
                "64c6f779.f34ee8"
            ]
        ]
    },
    {
        "id": "ee2e5570.96b418",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 550.6665649414062,
        "y": 80.66665774956334,
        "wires": []
    },
    {
        "id": "a86b54c1.473c78",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1205,
        "y": 199.83982849121094,
        "wires": [
            [
                "aa8e7501.202a68"
            ]
        ]
    },
    {
        "id": "aa8e7501.202a68",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1485.9961547851562,
        "y": 62.76952362060547,
        "wires": [
            [
                "4fe8c497.83a2ac"
            ],
            [
                "3e8369c8.233d56"
            ]
        ]
    },
    {
        "id": "4fe8c497.83a2ac",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1628.0078125,
        "y": 33,
        "wires": []
    },
    {
        "id": "3e8369c8.233d56",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1624.6171875,
        "y": 97.8515625,
        "wires": [
            [
                "debbb61b.960a88"
            ]
        ]
    },
    {
        "id": "debbb61b.960a88",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1760.7838745117188,
        "y": 97.85157775878906,
        "wires": [
            [
                "f2f1d34c.27bd3"
            ],
            [
                "1588c1f9.35643e"
            ]
        ]
    },
    {
        "id": "f2f1d34c.27bd3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1887.6170959472656,
        "y": 90.8515625,
        "wires": []
    },
    {
        "id": "1588c1f9.35643e",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1918.6170654296875,
        "y": 149.796875,
        "wires": [
            [
                "9dc55849.0108d8"
            ]
        ]
    },
    {
        "id": "3a122834.a215b8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "format",
        "func": "var db_records              = msg.db_records ,\n    counts                  = msg.payload ,\n    access_token            = msg.payload_content.access_token ,\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [],\n    page_id                 = msg.payload_content.page_id ;\n\nmsg.updated_user_task = []; //this will hold the user_task is not present in database.\nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.isUpdateUserTask = false; \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    // var result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n    //     detail = result.detail_array ;\n    \n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    \n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_obj.user_tasks); \n            if( isEmpty(isUserTaskExits)){ //check if already user_task is not present for that user. if not then do the following steps\n                populate_ancestors(details[loop].page_id, db_obj.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                populate_decendents(details[loop].page_id, db_obj.details); //calculating sub childs _id with current requested page_id\n                \n                msg.updated_user_task.push({   // create user_task record if user_task is not present in database \n                    table           : \"user_task\",\n                \ttask_id \t\t: task_obj._id,\n                \tuser_id\t\t\t: user_obj.user_id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tsynchronized    : 1,\n                    status          : 0, \n                \tdate_updated\t: null,\t\n                \tparent_id\t\t: task_obj._id,\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent_counts_array,\n                \tcount_status\t: {\n                \t   active       : 1,\n                \t   unread       : 0,\n                \t},\n                \tcount\t\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0,\n                \t},\n                \tcount_if\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0\n                \t},\n                \ttemplates\t\t: {},\n                \ttimeout\t\t\t: {},\n                \tcreatedAt       : new Date().getTime()\n                });\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n                \n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                details[loop].count.active = detail_count.active; \n                details[loop].count.unread = detail_count.unread;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n    if(!isEmpty(msg.updated_user_task))  msg.isUpdateUserTask = true; \n    \n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n    \n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    \n    if(isEmpty(obj)) return {};\n    if(isEmpty(user_tasks)) return {};\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj.user_id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            return user_tasks[loop];\n        }\n    }\n    \n    return {};\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                ancestor_conts_array.push(task_arr[index].parent_id);\n                if(!isEmpty(task_arr[index].parent_id)) populate_ancestors( task_arr[index].parent_id, db_obj.tasks, \"parent_id\");\n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    ancestor_conts_array.push(task_arr[itr].parent_id);\n                    populate_ancestors( task_arr[itr].parent_id, db_obj.tasks, \"parent_id\");\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr, type){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) decendent_counts_array.push(details_arr[index]._id);\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_obj.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else if(\"dri_main\" in detail.type){\n            if( \"dri_main\" in user_obj.type){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return true;\n        }\n    }\n}\n// function get_page_array(detail_array){\n    \n//     for(var itr = 0 ; itr < detail_array.length; itr++){\n//         var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n//         if(detail_array[itr].to_page_id){\n//             count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n//             if(check_obj(count) > 0){\n//                 current_count_active = count.active ;\n//                 current_count_unread = count.unread ;\n                \n//                 if(!isEmpty(user_obj)){\n//                     update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n//                 } \n//             }\n//         }else{\n//             current_count_active = detail_array[itr].count.active ;\n//             current_count_unread = detail_array[itr].count.unread ;\n//         }\n//         active = active + current_count_active ;\n//         unread = unread + current_count_unread ;\n        \n//         if(detail_array[itr].count){\n//             detail_array[itr].count.active = active ;\n//             detail_array[itr].count.unread = unread ;\n//         }\n//     }\n\n//     return {\n//         detail_array :   detail_array,\n//     };\n// }\n\n// function update_user_task_record(obj, update_parent){\n\n//     var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n//         create_user_task_flag = true, ancestors_array= [];\n    \n//     if (check_obj(user_task_obj) > 0){\n    \t\n//     \tif (user_task_obj.user_id == obj.user_id){\n//     \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n//     \t} \n    \t\n//     \tuser_task_obj.synchronized          = obj.synch ;\n//         user_task_obj.date_updated          = new Date().toJSON();\n\n//         if(!user_task_obj.update_read){\n//             if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n//                 user_task_obj.count.unread += 1 ;  \n//             }\n//         }\n    \n//         if(!user_task_obj.update_active){\n//             if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n//                 user_task_obj.count.active += 1 ;  \n//             }\n//         }\n    \n//         if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n\n//     }\n    \n//     if ( create_user_task_flag ) {\n        \n//         if(task_obj.parent_id){\n//             var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n//             if(check_obj(if_user_task) > 0){\n//                 ancestors_array = if_user_task.ancestors ;    \n\n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n//                     ancestors_array.push(task_obj.parent_id);\n//                 }\n//             }else{\n                \n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n//             }\n//         }\n        \n//         msg.updated_user_task = {\n//             table           : \"user_task\",\n//         \ttask_id \t\t: obj.task_id,\n//         \tuser_id\t\t\t: obj.user_id,\n//         \tpage_id         : parseInt(page_id),\n//         \tupdate_read     : 0,\n//         \tupdate_active   : 0, \n//         \tsynchronized    : 1,\n//             status          : 0, \n//         \tdate_updated\t: null,\t\n//         \tparent_id\t\t: obj.task_id,\n//         \tancestors       : ancestors_array, \n//         \tcount_status\t: {\n//         \t   active       : 1,\n//         \t   unread       : 0,\n//         \t},\n//         \tcount\t\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0,\n//         \t},\n//         \tcount_if\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0\n//         \t},\n//         \ttemplates\t\t: {},\n//         \ttimeout\t\t\t: {},\n//         \tcreatedAt       : new Date().getTime()\n//         };\n//     }else{\n//         msg.updated_user_task = user_task_obj ;\n//     }\n    \n//     msg.isUpdateUserTask = true ;\n// }\n\n// function return_user_task_obj(user_id, task_id){\n//     var obj = {}, user_task_arr = db_obj.user_tasks ;\n//     if(user_task_arr !== null && user_task_arr !== undefined){\n//         for(var i=0; i< user_task_arr.length; i++){\n//             if(\n//                 user_task_arr[i].user_id        == user_id &&\n//                 user_task_arr[i].task_id        == task_id \n//             ){\n//                     obj = user_task_arr[i];\n//             }\n//         }\n//     }\n//     return obj ;\n// }\n\n\n// function get_sub_child_count(to_page_id){\n//     var count = {active:0, unread: 0}, details = db_obj.details;\n    \n//     for(var itr = 0; itr < details.length; itr++){\n//         if(to_page_id == details[itr].page_id){\n//             if(details[itr].count_status){\n//                 count.active += details[itr].count_status.active ;\n//                 count.unread += details[itr].count_status.unread ;\n//             }\n//         }\n//     }\n//     return count;\n// }\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else if(\n                    (\"dri_main\" in detail_data[d].type) && (\"dri_main\" in user_obj.type) \n                ){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n\n                    if( check_isDisplay(detail_data[d].display_if_empty) && \n                        (\"public\" in detail_data[d].type) \n                    ){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2431.784008026123,
        "y": 146.85156059265137,
        "wires": [
            [
                "88651594.c6f868",
                "8f00693.57a2a98"
            ]
        ]
    },
    {
        "id": "1edbee6.07e3a12",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Bulk delete Api endpoint ",
        "info": "",
        "x": 137.640625,
        "y": 214.4375,
        "wires": []
    },
    {
        "id": "b7cef2a8.52021",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/bulk_delete",
        "method": "post",
        "swaggerDoc": "",
        "x": 116.625,
        "y": 263.80859375,
        "wires": [
            [
                "73cab5ca.cd4a5c"
            ]
        ]
    },
    {
        "id": "73cab5ca.cd4a5c",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "delete_detail",
        "func": "var body = msg.payload.table_data,\n    token = msg.payload.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/bulk_delete\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 295.765625,
        "y": 263.75,
        "wires": [
            [
                "d952cdf3.3c419"
            ]
        ]
    },
    {
        "id": "50bcb927.87ee88",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 608.6328125,
        "y": 316.6796875,
        "wires": [
            [
                "99fc1f33.fffac"
            ]
        ]
    },
    {
        "id": "99fc1f33.fffac",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n               \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 818.12890625,
        "y": 316.24609375,
        "wires": [
            [
                "f8f0ffa1.94802"
            ]
        ]
    },
    {
        "id": "fb7ff8d7.3b4cb8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1118.125,
        "y": 271.1484375,
        "wires": []
    },
    {
        "id": "d952cdf3.3c419",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 430.62890625,
        "y": 263.66796875,
        "wires": [
            [
                "c6e12c55.6d9b6"
            ],
            [
                "50bcb927.87ee88"
            ]
        ]
    },
    {
        "id": "c6e12c55.6d9b6",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 567.62890625,
        "y": 258.14453125,
        "wires": []
    },
    {
        "id": "f8f0ffa1.94802",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 990.375,
        "y": 316.6796875,
        "wires": [
            [
                "fb7ff8d7.3b4cb8"
            ],
            [
                "2b91f6a2.a6914a"
            ]
        ]
    },
    {
        "id": "fc9b1532.533208",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1419.515625,
        "y": 348.75,
        "wires": []
    },
    {
        "id": "88651594.c6f868",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "isUpdateUserTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2587.8833770751953,
        "y": 148.92577934265137,
        "wires": [
            [
                "264fffb0.2acc3"
            ],
            [
                "e2be2d17.4c36"
            ]
        ]
    },
    {
        "id": "2b91f6a2.a6914a",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1135.640625,
        "y": 349.18359375,
        "wires": [
            [
                "6ed42918.79f7c8"
            ]
        ]
    },
    {
        "id": "6ed42918.79f7c8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1294.62890625,
        "y": 348.9921875,
        "wires": [
            [
                "fc9b1532.533208"
            ]
        ]
    },
    {
        "id": "945454dc.62c3c8",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 107.5078125,
        "y": 1222.5234375,
        "wires": [
            [
                "5d46a223.4bf9ec"
            ],
            [
                "ec526330.9060b"
            ]
        ]
    },
    {
        "id": "5d46a223.4bf9ec",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 248.50778742134662,
        "y": 1177.0078077614307,
        "wires": []
    },
    {
        "id": "ec526330.9060b",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 270.5078125,
        "y": 1249.3203125,
        "wires": [
            [
                "108ef0ea.5be14f"
            ]
        ]
    },
    {
        "id": "108ef0ea.5be14f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate",
        "func": "var user = msg.payload ;\n    \n    if(isEmpty(user)){\n        msg.api_status  = \"API_ERROR\"    ;\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n    }else{\n        msg.user_obj    = user[0];\n        msg.payload     = {\n            query   : \"table:details AND _id:\" + msg.detail_id.toString() ,\n            sort    : \"_id<string>\"\n        };\n    }\n    \nnode.warn(msg.payload);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 440.5234375,
        "y": 1275.7109375,
        "wires": [
            [
                "c626eec2.d2c67"
            ]
        ]
    },
    {
        "id": "c626eec2.d2c67",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 597.5155857056391,
        "y": 1274.5312452614307,
        "wires": [
            [
                "afde8207.43e19"
            ],
            [
                "b4b55fa3.d298b"
            ]
        ]
    },
    {
        "id": "afde8207.43e19",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 721.5078125,
        "y": 1243.5,
        "wires": []
    },
    {
        "id": "b4b55fa3.d298b",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 739.5234375,
        "y": 1299.3125,
        "wires": [
            [
                "c7cd7581.62b9d8"
            ]
        ]
    },
    {
        "id": "c7cd7581.62b9d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate detail",
        "func": "var detail = msg.payload ;\n\n    if(isEmpty(detail)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with this id\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.detail_obj      = detail[0] ;\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 939.0233860909957,
        "y": 1298.7187428921463,
        "wires": [
            [
                "ed597d2e.ed605"
            ]
        ]
    },
    {
        "id": "ed597d2e.ed605",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1103.5077673047795,
        "y": 1343.5312428921463,
        "wires": [
            [
                "c832864c.844d58"
            ],
            [
                "80aa258b.6bb758"
            ]
        ]
    },
    {
        "id": "c832864c.844d58",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1239.932373046875,
        "y": 1312.2135620117188,
        "wires": []
    },
    {
        "id": "80aa258b.6bb758",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "isAuthorized",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.user_obj ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.api_status  = \"VALID_CONTENT\";\n    msg.payload     = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        table                           : \"details\",\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n    msg.response    = {status: 200, error: false, msg: \"Record deleted successfully\", data: msg.payload};\n}else{\n    msg.api_status = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.payload = {status: 403, error: false, msg: \"You are not authorized to remove record\", data: null};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260.598876953125,
        "y": 1369.8802490234375,
        "wires": [
            [
                "7ff59a77.7e46c4"
            ]
        ]
    },
    {
        "id": "7ff59a77.7e46c4",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INVALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1417.598876953125,
        "y": 1369.546875,
        "wires": [
            [
                "10b82be8.af3a14"
            ],
            [
                "585a302e.f8fe2",
                "eeeb889.e793a78",
                "6a2fcf5f.b8779",
                "d91862fc.186ac"
            ]
        ]
    },
    {
        "id": "10b82be8.af3a14",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1603.2655741373696,
        "y": 1322.880231221517,
        "wires": []
    },
    {
        "id": "585a302e.f8fe2",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "save detail to master table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1664.2655741373696,
        "y": 1384.8802464803061,
        "wires": []
    },
    {
        "id": "eeeb889.e793a78",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1618.2655741373696,
        "y": 1431.8802464803061,
        "wires": [
            [
                "123ac489.3e240b"
            ]
        ]
    },
    {
        "id": "6a2fcf5f.b8779",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:details AND to_page_id:\" + detail.page_id ,\n    sort    : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1622.2655741373696,
        "y": 1489.8801701863608,
        "wires": [
            [
                "4a3dad50.0cfca4"
            ]
        ]
    },
    {
        "id": "d91862fc.186ac",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:user_task AND page_id:\" + detail.to_page_id + \"user_id:\" + detail.user_id ,\n    sort    : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1622.2655741373696,
        "y": 1557.2136357625327,
        "wires": [
            [
                "76572607.960a18"
            ]
        ]
    },
    {
        "id": "76572607.960a18",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "msater_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1780.2655741373696,
        "y": 1554.880200703939,
        "wires": [
            [
                "9b15458d.7f0d98"
            ]
        ]
    },
    {
        "id": "4a3dad50.0cfca4",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1781.9322509765625,
        "y": 1490.546875,
        "wires": [
            [
                "645e6746.f59ca8"
            ]
        ]
    },
    {
        "id": "123ac489.3e240b",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1776.2655843098955,
        "y": 1428.5468953450522,
        "wires": []
    },
    {
        "id": "645e6746.f59ca8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "init",
        "func": "var filtered_details = msg.payload ;\n\nmsg.filtredArr = filtered_details || [] ;\nmsg.counter = 0;\nmsg.detail_length = filtered_details.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1944.2655843098955,
        "y": 1489.546875,
        "wires": [
            [
                "8a77c6aa.3bc948"
            ]
        ]
    },
    {
        "id": "9b15458d.7f0d98",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "init",
        "func": "var user_tasks = msg.payload ;\n\nmsg.calculated_task = user_tasks || [];\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1943.2655741373696,
        "y": 1554.5468877156577,
        "wires": [
            [
                "916a3af6.52d878"
            ]
        ]
    },
    {
        "id": "7e6032e9.a5fd8c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2196.4323221842446,
        "y": 1347.8802617390952,
        "wires": [
            [
                "8a77c6aa.3bc948"
            ]
        ]
    },
    {
        "id": "8a77c6aa.3bc948",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2118.4323221842446,
        "y": 1426.8802617390952,
        "wires": [
            [
                "cb980983.a4a188"
            ],
            [
                "4e8cb128.4756c"
            ]
        ]
    },
    {
        "id": "cb980983.a4a188",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2278.4323221842446,
        "y": 1417.8802922566733,
        "wires": [
            [
                "7e6032e9.a5fd8c",
                "f1a67446.f82a78"
            ]
        ]
    },
    {
        "id": "4e8cb128.4756c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2268.4323221842446,
        "y": 1459.8802922566733,
        "wires": [
            [
                "4cdfbc8e.00ca14"
            ]
        ]
    },
    {
        "id": "66441bc4.713884",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2144.0990702311196,
        "y": 1500.8802617390952,
        "wires": [
            [
                "916a3af6.52d878"
            ]
        ]
    },
    {
        "id": "916a3af6.52d878",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2083.0990702311196,
        "y": 1552.8802617390952,
        "wires": [
            [
                "28b99801.59c338"
            ],
            [
                "d1dbaf6e.b1993"
            ]
        ]
    },
    {
        "id": "28b99801.59c338",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\n\nuser_task_obj.status = 0   ;\nif(user_task_obj.count){\n    if(user_task_obj.count)    user_task_obj.count.active = 0 ;\n    if(user_task_obj.count)    user_task_obj.count.unread = 0 ;\n}\n\nmsg.payload = user_task_obj;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2230.0990702311196,
        "y": 1544.8802922566733,
        "wires": [
            [
                "66441bc4.713884",
                "d1123192.f8bc9"
            ]
        ]
    },
    {
        "id": "d1dbaf6e.b1993",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2224.0990702311196,
        "y": 1589.8802617390952,
        "wires": [
            [
                "da68b9e4.e66ba8"
            ]
        ]
    },
    {
        "id": "da68b9e4.e66ba8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2423.0990702311196,
        "y": 1587.8802617390952,
        "wires": []
    },
    {
        "id": "d1123192.f8bc9",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2414.0990702311196,
        "y": 1543.8802617390952,
        "wires": []
    },
    {
        "id": "4cdfbc8e.00ca14",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2445.4323221842446,
        "y": 1463.8802922566733,
        "wires": []
    },
    {
        "id": "f1a67446.f82a78",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "Update Detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2463.4323221842446,
        "y": 1385.8802617390952,
        "wires": []
    },
    {
        "id": "4a384ee1.48bc5",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Delete Records old flow  this is for only reference purpose... check latter",
        "info": "",
        "x": 321.2578125,
        "y": 1072.0390482842927,
        "wires": []
    },
    {
        "id": "7a1fa12a.ae0fc",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_detail",
        "func": "var body = msg.req_body.table_data,\n    token = msg.req_body.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/delete_view_data\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1296.0000610351562,
        "y": 639,
        "wires": [
            [
                "2f5e4f46.787e"
            ]
        ]
    },
    {
        "id": "2f5e4f46.787e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1473.86328125,
        "y": 613.91796875,
        "wires": [
            [
                "ad69ce11.40c27"
            ],
            [
                "d07942b5.0e4be"
            ]
        ]
    },
    {
        "id": "ad69ce11.40c27",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1644.86328125,
        "y": 570.39453125,
        "wires": []
    },
    {
        "id": "d07942b5.0e4be",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1685.8671875,
        "y": 628.9296875,
        "wires": [
            [
                "9896f35d.a07e1"
            ]
        ]
    },
    {
        "id": "9896f35d.a07e1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    node.warn(\">>>>>>>>>>>>>>>>>>>>>>\");\n    node.warn(body);\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n              \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if(details[i].page_id === to_page_id){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1895.36328125,
        "y": 628.49609375,
        "wires": [
            [
                "fe7e63dc.d9f8e"
            ]
        ]
    },
    {
        "id": "fe7e63dc.d9f8e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2067.609375,
        "y": 628.9296875,
        "wires": [
            [
                "529712dd.73ea7c"
            ],
            [
                "df3a22ee.0c8c9"
            ]
        ]
    },
    {
        "id": "529712dd.73ea7c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2237.359375,
        "y": 605.3984375,
        "wires": []
    },
    {
        "id": "df3a22ee.0c8c9",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2257.875,
        "y": 652.43359375,
        "wires": [
            [
                "1b4af4f1.9977bb"
            ]
        ]
    },
    {
        "id": "1b4af4f1.9977bb",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2416.86328125,
        "y": 652.2421875,
        "wires": [
            [
                "a784b7dc.0735d8"
            ]
        ]
    },
    {
        "id": "a784b7dc.0735d8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2541.75,
        "y": 652,
        "wires": []
    },
    {
        "id": "1e20dcaa.071803",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Set to inital record bulk delete api end point",
        "info": "",
        "x": 184.8333282470703,
        "y": 353.33333587646484,
        "wires": []
    },
    {
        "id": "cf92c0e1.826f8",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/set_initial_record",
        "method": "get",
        "swaggerDoc": "",
        "x": 121.83332824707031,
        "y": 417.33333587646484,
        "wires": [
            [
                "84898545.221598"
            ]
        ]
    },
    {
        "id": "84898545.221598",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 307.8333435058594,
        "y": 417.6666488647461,
        "wires": []
    },
    {
        "id": "6d6fcf66.e01cf",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/update_get_user_tasks",
        "method": "get",
        "swaggerDoc": "",
        "x": 149.8333282470703,
        "y": 564.3333969116211,
        "wires": [
            [
                "568b4aa8.59a3e4"
            ]
        ]
    },
    {
        "id": "15575bf5.8031e4",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Update_get_user_tasks api endpoint",
        "info": "",
        "x": 166.8333282470703,
        "y": 508.00003814697266,
        "wires": []
    },
    {
        "id": "4496d043.7ea7d",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 643.8333129882812,
        "y": 590.0000228881836,
        "wires": []
    },
    {
        "id": "568b4aa8.59a3e4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "msg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 364.8333435058594,
        "y": 563.6666641235352,
        "wires": [
            [
                "beb1d4bf.1d6628"
            ]
        ]
    },
    {
        "id": "beb1d4bf.1d6628",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 509.8333435058594,
        "y": 562.3333511352539,
        "wires": [
            [
                "1cabd420.3f4fdc"
            ],
            [
                "4496d043.7ea7d"
            ]
        ]
    },
    {
        "id": "1cabd420.3f4fdc",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/update_get_user_tasks?include_docs=true",
        "tls": "",
        "x": 672.6666412353516,
        "y": 524.6667098999023,
        "wires": [
            [
                "479bd6bb.90c898"
            ]
        ]
    },
    {
        "id": "479bd6bb.90c898",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "node.warn(new Date().getTime());\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            filtred_result      = populate_filtred_result(filter, db_record.user_tasks),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: filtred_result};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n    for(var i = 0; i<all_tasks.length; i++){\n        for(var j=0; j<task_list.length; j++){\n            if(\n                task_list[j].user_id == all_tasks[i].user_id &&\n                task_list[j].task_id == all_tasks[i].task_id &&\n                task_list[j].page_id == all_tasks[i].page_id     \n            ){\n                all_tasks[i].synchronized = task_list[j].synchronized ;\n                all_tasks[i].status = task_list[j].status;\n                all_tasks[i].date_updated = task_list[j].date_updated;\n                all_tasks[i].count = task_list[j].count;\n                \n                update_task.push(all_tasks[i]);   \n            }\n        }\n    }\n    return update_task;\n}\n\nfunction populate_filtred_result(filter, user_tasks){\n    var obj = {}, filtred_res1 = [], filtred_res2 = [], filtred_res3 = [],filtred_res4 = [];\n    \n    if((\"synchronized\" in filter)){\n        obj.synchronized = parseInt(filter.synchronized) ;\n    }else{\n        obj.synchronized = 0;\n    }\n    \n    if((\"status\" in filter)){\n        obj.status = parseInt(filter.status) ;\n    }else{\n        obj.status = 0;\n    }\n\n    for(var itr = 0; itr<user_tasks.length; itr++ ){\n        if(\n            (obj.synchronized === user_tasks[itr].synchronized) &&\n            (obj.status === user_tasks[itr].status)\n        ){\n            filtred_res1.push([itr]);\n        }\n    }\n    \n    if(\"user_id\" in filter){\n        for(var i = 0; i<filtred_res1.length; i++ ){\n            if( filter.user_id === filtred_res1[i].user_id ){\n                filtred_res2.push(filtred_res1[i]);\n            }\n        }   \n    }else{\n        filtred_res2 = filtred_res1 ;\n    }\n    \n    if(\"task_id\" in filter){\n        for(var j = 0; j<filtred_res2.length; j++ ){\n            if( filter.task_id === filtred_res2[j].task_id ){\n                filtred_res3.push(filtred_res2[j]);\n            }\n        }   \n    }else{\n        filtred_res3 = filtred_res2 ;\n    }\n    \n    if(\"page_id\" in filter){\n        for(var k = 0; k<filtred_res3.length; k++ ){\n            if( filter.page_id == filtred_res3[k].page_id ){\n                filtred_res4.push(filtred_res3[k]);\n            }\n        }   \n    }else{\n        filtred_res4 = filtred_res3 ;\n    }\n    \n    return filtred_res4;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"users\"){\n            users.push(rows[i].doc);   \n        }\n        \n        if(rows[i].doc.table == \"user_task\"){\n            user_tasks.push(rows[i].doc);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 834.8333740234375,
        "y": 514.0000381469727,
        "wires": [
            [
                "4ce4b83e.91dff8"
            ]
        ]
    },
    {
        "id": "73d6e71f.b127e8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1287.3333129882812,
        "y": 529.6666870117188,
        "wires": []
    },
    {
        "id": "4ce4b83e.91dff8",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 987.1666641235352,
        "y": 528.6666641235352,
        "wires": [
            [
                "1d385bf3.c3a0a4"
            ]
        ]
    },
    {
        "id": "1d385bf3.c3a0a4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "res",
        "func": "node.warn(new Date().getTime());\nif(isEmpty(msg.payload)){\n    msg.payload = msg.api_response;    \n}else{\n    msg.payload = msg.api_response;    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1130.8336563110352,
        "y": 514.3333892822266,
        "wires": [
            [
                "73d6e71f.b127e8"
            ]
        ]
    },
    {
        "id": "d489a76a.675f28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validation",
        "func": "var access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        //node.warn(msg.payload_content);\n        msg.api_status = \"API_SUCCESS\";\n        //msg.api_status = \"API_ERROR\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1206.000057220459,
        "y": 303.66669273376465,
        "wires": [
            [
                "304e6480.fe3fac"
            ]
        ]
    },
    {
        "id": "304e6480.fe3fac",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1351.000057220459,
        "y": 302.3333797454834,
        "wires": [
            [
                "642537e7.8e3128"
            ],
            [
                "8c4438a2.b4dad8"
            ]
        ]
    },
    {
        "id": "642537e7.8e3128",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/update_get_user_tasks?include_docs=true",
        "tls": "",
        "x": 1513.8333549499512,
        "y": 264.66673851013184,
        "wires": [
            [
                "71bd896f.388d68"
            ]
        ]
    },
    {
        "id": "8c4438a2.b4dad8",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1485.0000267028809,
        "y": 330.0000514984131,
        "wires": []
    },
    {
        "id": "71bd896f.388d68",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            filtred_result      = populate_filtred_result(filter, db_record.user_tasks),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: filtred_result};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n\n    for(var i = 0; i<task_list.length; i++){\n        for(var j=0; j<all_tasks.length; j++){\n            if(\n                task_list[i].user_id == all_tasks[j].user_id &&\n                task_list[i].task_id == all_tasks[j].task_id &&\n                task_list[i].page_id == all_tasks[j].page_id     \n            ){\n                all_tasks[j].synchronized = task_list[i].synchronized ;\n                all_tasks[j].status = task_list[i].status;\n                all_tasks[j].date_updated = task_list[i].date_updated;\n                all_tasks[j].count = task_list[i].count;\n                update_task.push(all_tasks[j]);   \n            }\n        }\n    }\n    \n    return update_task;\n}\n\nfunction populate_filtred_result(filter, user_tasks){\n    var obj = {}, filtred_res1 = [], filtred_res2 = [], filtred_res3 = [],filtred_res4 = [];\n    \n    if((\"synchronized\" in filter)){\n        obj.synchronized = parseInt(filter.synchronized) ;\n    }else{\n        obj.synchronized = 0;\n    }\n    \n    if((\"status\" in filter)){\n        obj.status = parseInt(filter.status) ;\n    }else{\n        obj.status = 0;\n    }\n\n    for(var itr = 0; itr<user_tasks.length; itr++ ){\n        if(\n            (obj.synchronized === user_tasks[itr].synchronized) &&\n            (obj.status === user_tasks[itr].status)\n        ){\n            filtred_res1.push([itr]);\n        }\n    }\n    \n    if(\"user_id\" in filter){\n        for(var i = 0; i<filtred_res1.length; i++ ){\n            if( filter.user_id === filtred_res1[i].user_id ){\n                filtred_res2.push(filtred_res1[i]);\n            }\n        }   \n    }else{\n        filtred_res2 = filtred_res1 ;\n    }\n    \n    if(\"task_id\" in filter){\n        for(var j = 0; j<filtred_res2.length; j++ ){\n            if( filter.task_id === filtred_res2[j].task_id ){\n                filtred_res3.push(filtred_res2[j]);\n            }\n        }   \n    }else{\n        filtred_res3 = filtred_res2 ;\n    }\n    \n    if(\"page_id\" in filter){\n        for(var k = 0; k<filtred_res3.length; k++ ){\n            if( filter.page_id == filtred_res3[k].page_id ){\n                filtred_res4.push(filtred_res3[k]);\n            }\n        }   \n    }else{\n        filtred_res4 = filtred_res3 ;\n    }\n    \n    return filtred_res4;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"users\"){\n            users.push(rows[i].doc);   \n        }\n        \n        if(rows[i].doc.table == \"user_task\"){\n            user_tasks.push(rows[i].doc);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1675.000057220459,
        "y": 268.00006675720215,
        "wires": [
            [
                "5f37c501.8ff77c"
            ]
        ]
    },
    {
        "id": "5f37c501.8ff77c",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1828.3333778381348,
        "y": 268.66669273376465,
        "wires": [
            [
                "c7f1c1c8.59328"
            ]
        ]
    },
    {
        "id": "c7f1c1c8.59328",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: msg.payload, data: null};\n}else{\n    msg.payload = msg.api_response;    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1967.0003700256348,
        "y": 268.3334102630615,
        "wires": [
            [
                "34b2327.9a933ce"
            ]
        ]
    },
    {
        "id": "34b2327.9a933ce",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2128.500026702881,
        "y": 269.66671562194824,
        "wires": []
    },
    {
        "id": "9ab7d9f2.89fc68",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "NOT IN  USE UPDATE_GET_USER_TASK",
        "info": "",
        "x": 1265.1666564941406,
        "y": 250.0000400543213,
        "wires": []
    },
    {
        "id": "76d401a5.8d604",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/update_get_pages",
        "method": "get",
        "swaggerDoc": "",
        "x": 133.8333282470703,
        "y": 743.3334045410156,
        "wires": [
            [
                "b74602d2.33c1e"
            ]
        ]
    },
    {
        "id": "b74602d2.33c1e",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "msg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token;\n\n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 338.6666259765625,
        "y": 743.6667175292969,
        "wires": [
            [
                "1e9ec567.e9154b"
            ]
        ]
    },
    {
        "id": "1e9ec567.e9154b",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 483.6666259765625,
        "y": 742.3334045410156,
        "wires": [
            [
                "984e746c.732d28"
            ],
            [
                "c0e69252.f324c"
            ]
        ]
    },
    {
        "id": "984e746c.732d28",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 646.4999237060547,
        "y": 704.6667633056641,
        "wires": [
            [
                "72b609df.95c6a8"
            ]
        ]
    },
    {
        "id": "c0e69252.f324c",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 617.6665954589844,
        "y": 770.0000762939453,
        "wires": []
    },
    {
        "id": "72b609df.95c6a8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "node.warn(msg.payload_content);\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    access_token    = body.access_token;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user with access_token\", data: null};\n        }else if( isEmpty(user_tasks) ){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user_task for this user.\", data: null};\n        }else{\n            msg.api_status = \"API_SUCCESS\";\n            msg.payload = {status: 200, error:false, msg: \"Record fetched successfully\", data: populated_pages(user_tasks, db_record)};\n        }    \n    }\n    \nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [];\n    \n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(task_obj){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n    return pages;\n}\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_record.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    for(var i =0; i<users.length; i++){\n        if(access_token === users[i].access_token){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 802.6665954589844,
        "y": 705.6667175292969,
        "wires": [
            [
                "e3dc961d.bf3698"
            ]
        ]
    },
    {
        "id": "e3dc961d.bf3698",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 940.1666870117188,
        "y": 706.6667327880859,
        "wires": [
            [
                "5bcfdeec.0998e"
            ],
            [
                "5bcfdeec.0998e"
            ]
        ]
    },
    {
        "id": "5bcfdeec.0998e",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1095,
        "y": 703.3333892822266,
        "wires": []
    },
    {
        "id": "27582250.728d9e",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 149,
        "y": 1799,
        "wires": [
            [
                "24e6c2ab.1046ae"
            ]
        ]
    },
    {
        "id": "24e6c2ab.1046ae",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true , msg: \"Unable to find user with access_token\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.filter_obj      = msg.payload_content.filter ;\n    msg.user_task_list  = msg.payload_content.user_task_list ;\n    msg.user            = msg.payload[0];\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 338.015625,
        "y": 1802.3828125,
        "wires": [
            [
                "c21a6975.582b48"
            ]
        ]
    },
    {
        "id": "c21a6975.582b48",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 498.015625,
        "y": 1802.703125,
        "wires": [
            [
                "2dd4d4e3.b8dbdc"
            ],
            [
                "b7c124b.484a0d8"
            ]
        ]
    },
    {
        "id": "2dd4d4e3.b8dbdc",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 624.515625,
        "y": 1782.1875,
        "wires": []
    },
    {
        "id": "b7c124b.484a0d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var filter          = msg.filter_obj ,\n    user_task_list  = msg.user_task_list ;\n    user            = msg.user ;\n    \n    msg.payload = {\n        selector    : create_selector(filter),\n        query       : create_filtred_query(user._id, filter)\n    };    \n    node.warn(msg.payload);\nreturn msg;\n\nfunction create_selector(filter){\n    var obj = {};\n    if(\"synchronized\" in filter){\n        if(parseInt(filter.synchronized) === 0){\n            obj.synchronized = {\n               \"$ne\" : 1\n            };\n            delete filter.synchronized ;\n        }\n    }\n    \n    if(\"status\" in filter){\n        if(parseInt(filter.status) === 0){\n            obj.status = {\n               \"$ne\" : 1\n            };\n            delete filter.status ;\n        }\n    }\n    return obj ;\n}\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n\n        if((\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id  ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter < length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 631.5000448822962,
        "y": 1840.8906368464227,
        "wires": [
            [
                "e63f5c36.1b918",
                "eaad3e71.213df"
            ]
        ]
    },
    {
        "id": "e63f5c36.1b918",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 824.5000448822962,
        "y": 1806.7890743464227,
        "wires": []
    },
    {
        "id": "eaad3e71.213df",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 825.5,
        "y": 1877.4921875,
        "wires": [
            [
                "713f5100.31481",
                "69cf1450.119e7c"
            ]
        ]
    },
    {
        "id": "713f5100.31481",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.filtred_user_task_list = msg.payload ;\nmsg.payload = {\n    query : \"table:user_task\",\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 995.0000099688764,
        "y": 1875.8984446078537,
        "wires": [
            [
                "8402ad22.266e7"
            ]
        ]
    },
    {
        "id": "69cf1450.119e7c",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1006.0156698822962,
        "y": 1930.7812618464227,
        "wires": []
    },
    {
        "id": "8402ad22.266e7",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1185.0000448822962,
        "y": 1889.0000118464227,
        "wires": [
            [
                "200ed7d6.de5db8"
            ]
        ]
    },
    {
        "id": "200ed7d6.de5db8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "populate",
        "func": "\nmsg.updated_content = return_user_task_filtred_arr(msg.user_task_list, msg.payload) ;\nmsg.updated_content_length = msg.updated_content.length;\nmsg.res_user_task = [];\nmsg.counter = 0 ;\nmsg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.res_user_task, filtred: msg.filtred_user_task_list};\nreturn msg;\n\n\nfunction return_user_task_filtred_arr(req_user_task_list, user_tasks_list){\n    var selected_arr = [];\n    if(\n        user_tasks_list !== undefined && \n        user_tasks_list !== null &&\n        req_user_task_list !== undefined &&\n        req_user_task_list !== null \n    ){\n        for(var i=0; i< req_user_task_list.length; i++){\n            for(j =0; j<user_tasks_list.length; j++){\n                if(\n                    req_user_task_list[i].user_id == user_tasks_list[j].user_id &&\n                    req_user_task_list[i].task_id == user_tasks_list[j].task_id &&\n                    req_user_task_list[i].page_id == user_tasks_list[j].page_id \n                ){\n                  \n                  \n                    user_tasks_list[j].synchronized = req_user_task_list[i].synchronized ;\n                    user_tasks_list[j].status = req_user_task_list[i].status;\n                    user_tasks_list[j].date_updated = req_user_task_list[i].date_updated;\n                    user_tasks_list[j].count = req_user_task_list[i].count;\n                    selected_arr.push(user_tasks_list[j]);\n                }\n            }\n        }    \n        \n        return selected_arr;\n    }else{\n        return selected_arr ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1343.0000448822962,
        "y": 1890.3984493464227,
        "wires": [
            [
                "176eb4.c8a4b14c"
            ]
        ]
    },
    {
        "id": "176eb4.c8a4b14c",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "updated_content_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1512.7656698822962,
        "y": 1875.7500118464227,
        "wires": [
            [
                "381525b1.e82e9a"
            ],
            [
                "863308b0.32b6f8"
            ]
        ]
    },
    {
        "id": "177d3f8a.b2fa4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1613.7656698822962,
        "y": 1817.7500118464227,
        "wires": [
            [
                "176eb4.c8a4b14c"
            ]
        ]
    },
    {
        "id": "381525b1.e82e9a",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "    var counter = msg.counter ;\n    msg.payload = msg.updated_content[counter];\n    msg.res_user_task.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1702.7656698822962,
        "y": 1864.7500118464227,
        "wires": [
            [
                "bc638e37.2cc24",
                "177d3f8a.b2fa4"
            ]
        ]
    },
    {
        "id": "bc638e37.2cc24",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1894.7734823822962,
        "y": 1897.2734493464227,
        "wires": []
    },
    {
        "id": "5ea52549.22d8dc",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1874.7734823822962,
        "y": 1952.2734493464227,
        "wires": []
    },
    {
        "id": "863308b0.32b6f8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "api_res",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1693.7734823822962,
        "y": 1954.2734493464227,
        "wires": [
            [
                "5ea52549.22d8dc"
            ]
        ]
    },
    {
        "id": "3f7c61b4.51a60e",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "update_get_user_tasks",
        "func": "node.warn(msg.payload_content);\nmsg.payload = {\n    query : \"table:users AND access_token:\" + msg.payload_content.access_token ,\n    sort  : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg ;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 176.33334350585938,
        "y": 1741,
        "wires": [
            [
                "27582250.728d9e"
            ]
        ]
    },
    {
        "id": "abbb9024.4ca85",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Workign examples for updated_get_user_tasks",
        "info": "",
        "x": 253.1666717529297,
        "y": 1675.333371480306,
        "wires": []
    },
    {
        "id": "8e018173.609bf",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "updated_get_pages api_endpoint ",
        "info": "",
        "x": 152.8333282470703,
        "y": 682.3333307902018,
        "wires": []
    },
    {
        "id": "d4d803af.d9c42",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_task",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`access_token` is required\", data: null};\n}else if(isEmpty(params.task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`task_id` is required\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload      = {\n        query : \"table:task_table AND _id:\"+ params.task_id,\n        sort  : \"_id<string>\"\n    };\n    msg.user_payload = {\n        query : \"table:users AND access_token:\"+ params.access_token,\n        sort  : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 144.66665649414062,
        "y": 2144.33349609375,
        "wires": [
            [
                "d281dffd.2baed"
            ]
        ]
    },
    {
        "id": "d281dffd.2baed",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 335.1666564941406,
        "y": 2137.52099609375,
        "wires": [
            [
                "768a3b12.83bf24"
            ],
            [
                "f59f79a0.eba5b8"
            ]
        ]
    },
    {
        "id": "768a3b12.83bf24",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 512.1549232900145,
        "y": 2056.7514426745474,
        "wires": []
    },
    {
        "id": "bab8b5f3.d705f8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate task",
        "func": "var task_obj = msg.payload ;\n\nif(isEmpty(task_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find task with `task_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj   = task_obj[0];\n    msg.payload    = msg.user_payload ;\n}\n\nreturn msg;\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 701.1666564941406,
        "y": 2196.591293334961,
        "wires": [
            [
                "ebb674e1.618798"
            ]
        ]
    },
    {
        "id": "f59f79a0.eba5b8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 536.6588439941406,
        "y": 2142.399887084961,
        "wires": [
            [
                "bab8b5f3.d705f8"
            ]
        ]
    },
    {
        "id": "ebb674e1.618798",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 864.9088233001532,
        "y": 2195.2670676745474,
        "wires": [
            [
                "5daf80cb.3c64e"
            ],
            [
                "3469ff7b.30bdd"
            ]
        ]
    },
    {
        "id": "5daf80cb.3c64e",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1004.9088439941406,
        "y": 2154.251449584961,
        "wires": []
    },
    {
        "id": "3469ff7b.30bdd",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1024.5260314941406,
        "y": 2222.345199584961,
        "wires": [
            [
                "60120015.1ac7d"
            ]
        ]
    },
    {
        "id": "d514f1cb.f49c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_user",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195.52603149414062,
        "y": 2254.6785736083984,
        "wires": [
            [
                "a2de0fbf.4dce"
            ]
        ]
    },
    {
        "id": "bd0f0c10.47bf4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_timeout",
        "func": "msg.payload = {\n    query: \"table:timeout\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 202.52603149414062,
        "y": 2309.6785736083984,
        "wires": [
            [
                "b0c3a762.714008"
            ]
        ]
    },
    {
        "id": "164ea165.fa154f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_location",
        "func": "msg.payload = {\n    query: \"table:location\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 202.52603149414062,
        "y": 2362.6785736083984,
        "wires": [
            [
                "32f369b9.0462d6"
            ]
        ]
    },
    {
        "id": "9a1d4f7f.cf1a8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 191.52603149414062,
        "y": 2412.6785736083984,
        "wires": [
            [
                "2e8dad28.6edec2"
            ]
        ]
    },
    {
        "id": "2e8dad28.6edec2",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 408.5260314941406,
        "y": 2409.6785736083984,
        "wires": [
            [
                "3bc0b2fe.375bfe"
            ]
        ]
    },
    {
        "id": "32f369b9.0462d6",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 408.5260314941406,
        "y": 2361.6785736083984,
        "wires": [
            [
                "e2013cde.02abd"
            ]
        ]
    },
    {
        "id": "b0c3a762.714008",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 406.5260314941406,
        "y": 2315.6785736083984,
        "wires": [
            [
                "23220fd3.dee81"
            ]
        ]
    },
    {
        "id": "a2de0fbf.4dce",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 403.5260314941406,
        "y": 2260.6785736083984,
        "wires": [
            [
                "d2a5b1bf.3bcf7"
            ]
        ]
    },
    {
        "id": "d2a5b1bf.3bcf7",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var users   = msg.payload , updated_user = [];\n\nif(users === null || users === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!users.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: users};\n}else{\n    for(var i=0; i< users.length; i++){\n        updated_user.push({id : users[i]._id, name: generate_name(users[i]) || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_user};\n}\n\nreturn msg;\n\nfunction generate_name(obj){\n    return (obj.firstname + \" \" + obj.lastname).trim();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 602.5260314941406,
        "y": 2259.6785736083984,
        "wires": [
            [
                "d52254c9.2072a8"
            ]
        ]
    },
    {
        "id": "23220fd3.dee81",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var timeout   = msg.payload , updated_timeout = [];\n\nif(timeout === null || timeout === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!timeout.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: timeout};\n}else{\n    for(var i=0; i< timeout.length; i++){\n        updated_timeout.push({id : timeout[i]._id, name: timeout[i].name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_timeout};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 602.5260314941406,
        "y": 2312.6785736083984,
        "wires": [
            [
                "e3c68472.575f88"
            ]
        ]
    },
    {
        "id": "e2013cde.02abd",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var location   = msg.payload , updated_location = [];\n\nif(location === null || location === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!location.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: location};\n}else{\n    for(var i=0; i< location.length; i++){\n        updated_location.push({id : location[i]._id, name: location[i].location_name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_location};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 599.5260314941406,
        "y": 2359.6785736083984,
        "wires": [
            [
                "b0e471fd.0234"
            ]
        ]
    },
    {
        "id": "3bc0b2fe.375bfe",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var tasks_arr = msg.payload , obj = {} ;\n\nif(tasks_arr === null || tasks_arr === undefined){\n    obj.status = 400 ;\n    obj.error  = true ;\n    obj.msg    = \"Unable to get the tasks\";\n    msg.paylod = obj ;\n}else{\n    if(tasks_arr.length){\n        var tasks = [];\n        for(var i=0; i < tasks_arr.length; i++){\n            tasks.push({\n                id           : tasks_arr[i]._id,\n                task_name    : tasks_arr[i].task_name || \"N/A\"     \n            });\n        }\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"Record fecthed successfully\";\n        obj.data   = tasks ;\n        msg.payload = obj ;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is not task present\";\n        msg.paylod = obj ;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 604.5260314941406,
        "y": 2409.6785736083984,
        "wires": [
            [
                "f1a493cb.58877"
            ]
        ]
    },
    {
        "id": "f1a493cb.58877",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 786.5260314941406,
        "y": 2407.6785736083984,
        "wires": []
    },
    {
        "id": "b0e471fd.0234",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 782.5260314941406,
        "y": 2360.6785736083984,
        "wires": []
    },
    {
        "id": "e3c68472.575f88",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 782.5260314941406,
        "y": 2310.6785736083984,
        "wires": []
    },
    {
        "id": "d52254c9.2072a8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 783.5260314941406,
        "y": 2257.6785736083984,
        "wires": []
    },
    {
        "id": "771df157.950d7",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 591.6927795410156,
        "y": 2505.011947631836,
        "wires": []
    },
    {
        "id": "11c42f25.e3acd1",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_all_templates",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 193.69270833333348,
        "y": 2509.3452377319336,
        "wires": [
            [
                "8c020fec.32453"
            ]
        ]
    },
    {
        "id": "8c020fec.32453",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 414.6926574707031,
        "y": 2507.3453216552734,
        "wires": [
            [
                "771df157.950d7"
            ]
        ]
    },
    {
        "id": "60120015.1ac7d",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "var user_obj = msg.payload ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: msg.task_obj};\n}\n\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1197.9010314941406,
        "y": 2253.837387084961,
        "wires": [
            [
                "6f7cad47.422774"
            ]
        ]
    },
    {
        "id": "6f7cad47.422774",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1355.9010314941406,
        "y": 2259.759262084961,
        "wires": [
            [
                "c79894c3.f330f8"
            ],
            [
                "c79894c3.f330f8"
            ]
        ]
    },
    {
        "id": "c79894c3.f330f8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1547.9127502441406,
        "y": 2257.25146484375,
        "wires": []
    },
    {
        "id": "4151b7c3.f7cfa8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate",
        "func": "var access_token = msg.payload_content.access_token,\n    task_id      = msg.payload_content.task_id;\nif(isEmpty(access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`access_token` is mising.\", data: null};\n}else if(isEmpty(task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`task_id` is mising.\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1206.5002746582031,
        "y": 453.00006103515625,
        "wires": [
            [
                "93323a2d.829028"
            ]
        ]
    },
    {
        "id": "e885a60f.39cf88",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_data_for_task endpoint",
        "info": "",
        "x": 1256.5001831054688,
        "y": 391.3333797454834,
        "wires": []
    },
    {
        "id": "93323a2d.829028",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1346.500254313151,
        "y": 451.0000432332357,
        "wires": [
            [
                "e9ae4e21.cd3d3"
            ],
            [
                "ee274f1a.c70b3"
            ]
        ]
    },
    {
        "id": "e9ae4e21.cd3d3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1474.500254313151,
        "y": 410.66673024495446,
        "wires": []
    },
    {
        "id": "ee274f1a.c70b3",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_task_related_data?include_docs=true",
        "tls": "",
        "x": 1495.500244140625,
        "y": 461.66673278808594,
        "wires": [
            [
                "f5476dc3.4f83d"
            ]
        ]
    },
    {
        "id": "f5476dc3.4f83d",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar payload = msg.payload ,\n    task_id = msg.payload_content.task_id;\n\nif(isEmpty(payload.rows)){\n    msg.payload     = {status: 400, error: true, msg: \"Unable to populate view to get_data_for_task.\", data: null};\n    return msg;\n}else{\n    msg.payload = {status:200, error:true, msg: \"Record fetched successfully.\", data: populate_db_record(payload.rows)};\n    return msg;\n}\n\n\nfunction populate_db_record(rows){\n    var template = [], task_table = [], timeout=[], location=[], users=[], task_obj={}; \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"template\"){\n            template.push(rows[i].doc);\n        }\n        \n        if(rows[i].doc.table == \"task_table\"){\n            if(rows[i].doc.page_id == task_id){\n                task_obj = rows[i].doc ;\n            }else{\n                task_table.push({\n                    id          : rows[i].doc._id,\n                    task_name   : rows[i].doc.task_name\n                });\n            }\n        }\n        \n        if(rows[i].doc.table == \"timeout\"){\n            timeout.push({\n                id     : rows[i].doc._id,\n                name   : rows[i].doc.name\n            });\n        }\n        \n        if(rows[i].doc.table == \"location\"){\n            location.push({\n                id          : rows[i].doc._id,\n                name        : rows[i].doc.location_name\n            });\n        }\n        \n        if(rows[i].doc.table == \"users\"){\n            users.push({\n                id          : rows[i].doc._id,\n                name        : formulate_name(rows[i].doc)\n            });\n        }\n    }\n    \n    return {\n      formatted_template: template,\n      formatted_task    : task_table,\n      formatted_timeout : timeout,\n      formatted_location: location,\n      formatted_user    : users,\n      task_obj          : task_obj\n    };\n}\n\nfunction formulate_name(obj){\n    var str = \"\";\n    if(obj.firstname){\n        str += obj.firstname;\n    }\n    \n    if(obj.lastname){\n        str += \" \"+ obj.lastname ;\n    }\n    \n    if(!str){\n        str = \"Anynomous User\";\n    }\n    \n    return str;\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1665.500254313151,
        "y": 456.3334172566732,
        "wires": [
            [
                "26c6644a.ea800c"
            ]
        ]
    },
    {
        "id": "26c6644a.ea800c",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1812.3336181640625,
        "y": 453.0000457763672,
        "wires": []
    },
    {
        "id": "ca803de8.82ae6",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Reapted Api endpoint to update particular task_table info",
        "info": "",
        "x": 286.8333435058594,
        "y": 1992.0000178019206,
        "wires": []
    },
    {
        "id": "d9dd2b5.cb3f5d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "update_get_pages",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n    msg.payload       = {\n        query   : \"table:users AND access_token:\" + params.access_token ,\n        sort    : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 127.66665649414062,
        "y": 2767.33349609375,
        "wires": [
            [
                "92b38fc2.3708"
            ]
        ]
    },
    {
        "id": "92b38fc2.3708",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 318.0000305175781,
        "y": 2718.0002059936523,
        "wires": [
            [
                "73eda7b1.f82868"
            ],
            [
                "374c6459.763c0c"
            ]
        ]
    },
    {
        "id": "374c6459.763c0c",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 485.3331604003906,
        "y": 2752.3334579467773,
        "wires": [
            [
                "5744ef65.7ed2a"
            ]
        ]
    },
    {
        "id": "5744ef65.7ed2a",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"Unable to fetch user with this `access_token`\", data:null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.user_obj    = msg.payload[0] ;\n    msg.payload     = {\n        selector    : {\n            synchronized : {\n                $eq : 0\n            }\n        },\n        query       : \"table:user_task AND user_id:\" + msg.user_obj._id ,\n        sort        : \"_id<string>\" \n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 673.3331604003906,
        "y": 2752.000198364258,
        "wires": [
            [
                "6df6df9c.41a06"
            ]
        ]
    },
    {
        "id": "6df6df9c.41a06",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 827.6665344238281,
        "y": 2752.0001373291016,
        "wires": [
            [
                "dceac883.3e6748"
            ],
            [
                "28dd4f85.72d67"
            ]
        ]
    },
    {
        "id": "dceac883.3e6748",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 948.6666564941406,
        "y": 2716.333511352539,
        "wires": []
    },
    {
        "id": "28dd4f85.72d67",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 971.3331604003906,
        "y": 2784.333511352539,
        "wires": [
            [
                "89cd6387.39ee7"
            ]
        ]
    },
    {
        "id": "89cd6387.39ee7",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "user_task",
        "func": "var users_task = msg.payload ,\n    req_body   = msg.payload_content ;\n\nvar filtred_user_task = get_filter_user_task(users_task);\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.filtred_payload = filtred_user_task ;\nmsg.payload = {status: 200, data:null};\nreturn msg;\n\nfunction get_req_user_task(user_task){\n    try{\n        return JSON.parse(user_task);\n    }catch(e){\n        return {} ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_filter_user_task(user_task){\n    var result = [];\n    if(!isEmpty(user_task)){\n        for(var itr = 0; itr < user_task.length; itr++){\n            if(user_task[itr].synchronized === 0){\n                result.push(user_task[itr]);\n            }   \n        }\n    }\n    return result ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1135.9998779296875,
        "y": 2784.000129699707,
        "wires": [
            [
                "3697c09f.d9bd3"
            ]
        ]
    },
    {
        "id": "3697c09f.d9bd3",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1314.1665344238281,
        "y": 2785.0001220703125,
        "wires": [
            [
                "920491d3.eb46f"
            ],
            [
                "76a6a51c.1da2dc"
            ]
        ]
    },
    {
        "id": "920491d3.eb46f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "create_url",
        "func": "msg.url = msg.req.headers.host + '/master_api_handler?type=get_page&content={\"access_token\":\"' + msg.payload_content.access_token + '\", \"page_id\":' + msg.filtred_payload[msg.counter].page_id + '}';\nmsg.method  = \"GET\";\nnode.warn(msg.url);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1470.6743469238281,
        "y": 2781.5235595703125,
        "wires": [
            [
                "d6ac9b76.903ad8"
            ]
        ]
    },
    {
        "id": "1eafd07d.b0dec",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1543.1665344238281,
        "y": 2708.0001220703125,
        "wires": [
            [
                "3697c09f.d9bd3"
            ]
        ]
    },
    {
        "id": "d6ac9b76.903ad8",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1642.6743469238281,
        "y": 2785.5235595703125,
        "wires": [
            [
                "737c4f71.55406"
            ]
        ]
    },
    {
        "id": "737c4f71.55406",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "api_res",
        "func": "msg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1806.1665344238281,
        "y": 2790.0001220703125,
        "wires": [
            [
                "1eafd07d.b0dec"
            ]
        ]
    },
    {
        "id": "7a18fc40.dc34d4",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1598.4087219238281,
        "y": 2846.9610595703125,
        "wires": []
    },
    {
        "id": "76a6a51c.1da2dc",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "res",
        "func": "if(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1457.9087219238281,
        "y": 2850.1641845703125,
        "wires": [
            [
                "7a18fc40.dc34d4"
            ]
        ]
    },
    {
        "id": "73eda7b1.f82868",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 467.6666564941406,
        "y": 2686,
        "wires": []
    },
    {
        "id": "12796874.e0f828",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_page endpoint",
        "info": "",
        "x": 1231.1666870117188,
        "y": 139.33334350585938,
        "wires": []
    },
    {
        "id": "771c1033.a7ba8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Updated_get_pages api endpoint",
        "info": "",
        "x": 165.8333282470703,
        "y": 2662.666748046875,
        "wires": []
    },
    {
        "id": "bc9467d8.a9ed48",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/test_endpoint",
        "method": "get",
        "swaggerDoc": "",
        "x": 107.83332824707031,
        "y": 868.6666870117188,
        "wires": [
            [
                "b1f9df36.a3892"
            ]
        ]
    },
    {
        "id": "b1f9df36.a3892",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "node.warn(new Date().getTime());\nmsg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        var filters = [ '\"' + filter.user_id + '\"', '\"' + filter.task_id + '\"', filter.page_id, filter.synchronized, filter.status], \n            str     = \"[\" + filters.toString() + \"]\";\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/test_view?key=' + str;\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 305.8333435058594,
        "y": 866.6666641235352,
        "wires": [
            [
                "b40b21b0.28b26"
            ]
        ]
    },
    {
        "id": "16353d92.751962",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 590.6666259765625,
        "y": 954.6666717529297,
        "wires": []
    },
    {
        "id": "b40b21b0.28b26",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 456.6666564941406,
        "y": 927,
        "wires": [
            [
                "3907b5b6.54888a"
            ],
            [
                "16353d92.751962"
            ]
        ]
    },
    {
        "id": "3907b5b6.54888a",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 619.4999542236328,
        "y": 889.3333587646484,
        "wires": [
            [
                "7064c05f.907b1"
            ]
        ]
    },
    {
        "id": "7064c05f.907b1",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find record with provided filter.\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: db_record.user_tasks};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n    for(var i = 0; i<all_tasks.length; i++){\n        for(var j=0; j<task_list.length; j++){\n            if(\n                task_list[j].user_id == all_tasks[i].user_id &&\n                task_list[j].task_id == all_tasks[i].task_id &&\n                task_list[j].page_id == all_tasks[i].page_id     \n            ){\n                all_tasks[i].synchronized = task_list[j].synchronized ;\n                all_tasks[i].status = task_list[j].status;\n                all_tasks[i].date_updated = task_list[j].date_updated;\n                all_tasks[i].count = task_list[j].count;\n                \n                update_task.push(all_tasks[i]);   \n            }\n        }\n    }\n    return update_task;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"user_task\"){\n            user_tasks.push(rows[i].value);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 781.6666870117188,
        "y": 878.6666870117188,
        "wires": [
            [
                "1ece94a7.4ef5db"
            ]
        ]
    },
    {
        "id": "6c43ddbb.e339e4",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1388.3334884643555,
        "y": 849.6667404174805,
        "wires": []
    },
    {
        "id": "fe6451d6.1afb1",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1083.1668090820312,
        "y": 850.6667175292969,
        "wires": [
            [
                "f741b12b.e0b8f"
            ]
        ]
    },
    {
        "id": "f741b12b.e0b8f",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = msg.api_response;    \n}else{\n    msg.payload = msg.api_response;    \n}\nnode.warn(new Date().getTime());\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1237.833854675293,
        "y": 850.3334274291992,
        "wires": [
            [
                "6c43ddbb.e339e4"
            ]
        ]
    },
    {
        "id": "1ece94a7.4ef5db",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 931.8333740234375,
        "y": 878.0000915527344,
        "wires": [
            [
                "fe6451d6.1afb1"
            ],
            [
                "79fbcb17.5a3ca4"
            ]
        ]
    },
    {
        "id": "d39b545.c0a0ca8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1234.0000305175781,
        "y": 933.3333740234375,
        "wires": []
    },
    {
        "id": "79fbcb17.5a3ca4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "log",
        "func": "node.warn(new Date().getTime());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1064.5000305175781,
        "y": 934.6666870117188,
        "wires": [
            [
                "d39b545.c0a0ca8"
            ]
        ]
    },
    {
        "id": "16048eac.d74bc1",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2042.5003051757812,
        "y": 952,
        "wires": []
    },
    {
        "id": "3686ccd8.9cc104",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1617.5000101725261,
        "y": 1041.333351135254,
        "wires": []
    },
    {
        "id": "64cc674e.592e58",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_short_details",
        "tls": "",
        "x": 1635.5,
        "y": 995.6666870117188,
        "wires": [
            [
                "bfab0f04.e55c1"
            ]
        ]
    },
    {
        "id": "bfab0f04.e55c1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload,\n    access_token    = msg.payload_content.access_token,\n    req_body        = msg.payload_content.content;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to fetch record via using views\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        user_obj   = populate_user(db_records.users, access_token),\n        detail_obj = populate_details(db_records.details, req_body.detail_id),\n        task_obj   = populate_task(db_records.tasks_arr, req_body.page_id);\n        \n        if(isEmpty(user_obj)){\n            msg.statusCode = 400 ;\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, error: true, msg: \"Invalid `access_token`. Please retry after logout.\", data: null};\n        }else{\n            if(user_obj._id == detail_obj.user_id){\n                //update detail_obj\n                detail_obj.display_if_empty         = req_body.display_if_empty;\n                detail_obj.user_incoming.note       = req_body.message ;\n                detail_obj.user_incoming.message    = req_body.message ;\n                detail_obj.type                     = req_body.type;\n         \n                //update task_obj \n                task_obj.display_if_empty = req_body.display_if_empty;\n                task_obj.task_name        = req_body.message ;\n                task_obj.type             = req_body.type;\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.payload = {\n                    docs: [detail_obj, task_obj]\n                };\n            }else{\n                msg.statusCode = 401 ;\n                msg.api_status = \"API_ERROR\";\n                msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n            }\n        }\n}   \n\nreturn msg;\n\nfunction populate_user(users, access_token){\n    var user = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token == access_token){\n            user = users[i];\n        }\n    }\n    return user;\n}\n\nfunction populate_details(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id == detail_id){\n            obj = details[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_task(tasks, page_id){\n    var obj = {};\n    for(var i=0; i<tasks.length; i++){\n        if((tasks[i].page_id == page_id) && (tasks[i].table == \"task_table\") ){\n            obj = tasks[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_records(rows){\n    var users = [], details = [], tasks=[];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table == \"task_table\"){\n            tasks.push(rows[i].value);\n        }\n    }\n    return {users: users, details:details, tasks_arr:tasks };\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1816.8333435058594,
        "y": 1035.333351135254,
        "wires": [
            [
                "db8b90a6.16022"
            ]
        ]
    },
    {
        "id": "a89ee394.95a9d",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2099.83349609375,
        "y": 1097.6666870117188,
        "wires": []
    },
    {
        "id": "db8b90a6.16022",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1977.8333435058594,
        "y": 1068.333351135254,
        "wires": [
            [
                "b250faeb.be6e78"
            ],
            [
                "a89ee394.95a9d"
            ]
        ]
    },
    {
        "id": "b250faeb.be6e78",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2116.8333740234375,
        "y": 1040.6666870117188,
        "wires": [
            [
                "affb5a04.b9f238"
            ]
        ]
    },
    {
        "id": "affb5a04.b9f238",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Unable to update provided documents\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: true, msg: \"Record updated successfully.\", data: msg.payload};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2266.83349609375,
        "y": 1040.3334350585938,
        "wires": [
            [
                "3edc137a.66ec4c"
            ]
        ]
    },
    {
        "id": "3edc137a.66ec4c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2384.1667378743487,
        "y": 1084.6666641235352,
        "wires": []
    },
    {
        "id": "fef7a49c.8d01e8",
        "type": "debug",
        "z": "dc67abfa.d0b008",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 288,
        "y": 266.99999237060547,
        "wires": []
    },
    {
        "id": "c9c2dd74.2429b",
        "type": "http in",
        "z": "dc67abfa.d0b008",
        "name": "Recieve Twilio Errors",
        "url": "/twilio_error",
        "method": "post",
        "swaggerDoc": "",
        "x": 129.5,
        "y": 40,
        "wires": [
            [
                "ef479dc2.b276a",
                "d358020.4bf54"
            ]
        ]
    },
    {
        "id": "ef479dc2.b276a",
        "type": "debug",
        "z": "dc67abfa.d0b008",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326.5,
        "y": 40.99999237060547,
        "wires": []
    },
    {
        "id": "fca63fef.a911",
        "type": "cloudant in",
        "z": "dc67abfa.d0b008",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 443.8333282470703,
        "y": 315.3333320617676,
        "wires": [
            [
                "2c81b2a3.9acffe"
            ]
        ]
    },
    {
        "id": "d529010d.6683b",
        "type": "inject",
        "z": "dc67abfa.d0b008",
        "name": "Inject",
        "topic": "start",
        "payload": "{\"From\": \"919814698146\", \"Body\": \"how today is wheather ?\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 95.83334350585938,
        "y": 363.0000228881836,
        "wires": [
            [
                "285f9e84.9a3122"
            ]
        ]
    },
    {
        "id": "285f9e84.9a3122",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "msg",
        "func": "var content = msg.payload ,\n    obj   = check_valid_phone(content);\n    \nvar payload = {\n    \"phone\": obj.phone,\n    \"body\" : obj.body\n};\n\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\nmsg.req_body = obj ;\nreturn msg;\n\n\nfunction check_valid_phone(obj){\n    return {\n        phone: Number(obj.From.replace('+', '').trim()) ,\n        body : obj.Body \n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 287.8333435058594,
        "y": 314.3333740234375,
        "wires": [
            [
                "fca63fef.a911"
            ]
        ]
    },
    {
        "id": "2c81b2a3.9acffe",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\n//user = {};\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload = {\n        table       : \"users\",\n        access_token:  token(),\n        firstname   :  parseInt(phone),\n        lastname    :   \"\",\n        phone       :  parseInt(phone),\n        virtual_phone: parseInt(phone),\n        security_level: 0,\n        code:         rand(),\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: \"\",\n        push_accepted: 0\n    };\n     msg.userObj = msg.payload ;\n}else{\n     msg.userObj = user ;\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\n    msg.method  = \"GET\";\n    msg.userObj = user ;\n}\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 631.8333435058594,
        "y": 317.3333740234375,
        "wires": [
            [
                "b59d8faa.bea1e"
            ]
        ]
    },
    {
        "id": "b59d8faa.bea1e",
        "type": "switch",
        "z": "dc67abfa.d0b008",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 791.5000101725261,
        "y": 316.00001525878906,
        "wires": [
            [
                "9a77588b.24ea48",
                "66b8083e.e14838"
            ],
            [
                "cc4db75f.a13e58"
            ]
        ]
    },
    {
        "id": "9a77588b.24ea48",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    phone   = msg.req_body.phone,\n    userObj = msg.userObj;\n    msg.added_user_page_id = new Date().getTime();\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"51fb167ca7670096ea62b4e9f913e7e5\"], //master bot task_id \n  \"child_task_id\": \"47126a7129fa090a23a20d53c0025d87\",\n  \"user_id\": \"0a9b50963bc76018418ffd857d551ced\",\n  \"from_user_id\": {\n      user_id: userObj._id,\n      phone: userObj.virtual_phone,\n      firstname: userObj.firstname,\n      lastname : userObj.lastname,\n      type     : userObj.type,\n    },\n  \"page_id\": 1499057617028, //masterbot category page_id\n  \"from_page_id\": 2,\n  \"to_page_id\": msg.added_user_page_id,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"2017-06-30T10:46:39.760Z\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": phone,\n    \"message\": (userObj.firstname + userObj.lastname ) || phone\n  },\n  \"watson_incoming\": {\n    \"message\": \"Watson response to : \" + (userObj.firstname + userObj.lastname )|| phone,\n    \"response\": {}\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"count\": {\n    \"active\": 1,\n    \"unread\": 1\n  },\n  \"count_if\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"createdAt\": new Date().getTime()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1011.1666870117188,
        "y": 274,
        "wires": [
            [
                "b4f1c395.a16c2",
                "d08c714f.42c6f"
            ]
        ]
    },
    {
        "id": "d08c714f.42c6f",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Save detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1208.5,
        "y": 300.9999580383301,
        "wires": []
    },
    {
        "id": "b4f1c395.a16c2",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Optional Task",
        "func": "var detail = msg.payload;\n    msg.addedUserTaskId = randomString(32);\n    \nmsg.payload = {\n  \"_id\": msg.addedUserTaskId,\n  \"table\": \"task_table\",\n  \"user_id\": null,\n  \"task_name\": detail.user_incoming.message, \n  \"page_id\": detail.to_page_id,\n  \"from_page_id\": detail.page_id,\n  \"parent_id\": detail.task_id,\n  \"header_template_id\": \"99_h\",\n  \"detail_template_id\": \"99_d\",\n  \"footer_template_id\": \"99_f\",\n  \"timeout_id\": null,\n  \"location_ids\": {},\n  \"child_default_task_id\": null,\n  \"child_default_task_name\": null,\n  \"date_created\": new Date().toJSON(),\n  \"category\": \"Chatbot\",\n  \"status\": \"true\",\n  \"additional_data_fn\": null,\n  \"optional_data\": {},\n  \"required_data\": {},\n  \"offline_expiration_time\": 0,\n  \"display_if_empty\": \"true\",\n  \"type\": {\n    \"public\": \"public\"\n  },\n  \"image\": \"\"\n};\n\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1216.500010172526,
        "y": 235.33330790201825,
        "wires": [
            [
                "88b646a7.c3f6c8",
                "bb302463.a9af78"
            ]
        ]
    },
    {
        "id": "bb302463.a9af78",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Save optional task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1431.5,
        "y": 183.33333206176758,
        "wires": []
    },
    {
        "id": "88b646a7.c3f6c8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Chatbot payload",
        "func": "var textMsg = msg.req_body.body;\n\nmsg.method = \"GET\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1421.5,
        "y": 232.66667556762695,
        "wires": [
            [
                "97a4a3eb.b9405"
            ]
        ]
    },
    {
        "id": "97a4a3eb.b9405",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1595.3333740234375,
        "y": 231.66666412353516,
        "wires": [
            [
                "bcdacbb8.6daf98"
            ]
        ]
    },
    {
        "id": "bcdacbb8.6daf98",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    if(isEmpty(payload.data)){\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }else{\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1799.3334350585938,
        "y": 230.3333511352539,
        "wires": [
            [
                "f4342235.5c0ed",
                "ebb6bc68.1ac46",
                "a99d51f2.a6856",
                "98eb9f2a.84817"
            ]
        ]
    },
    {
        "id": "a99d51f2.a6856",
        "type": "twilio out",
        "z": "dc67abfa.d0b008",
        "service": "_ext_",
        "twilio": "b1c40594.ea3728",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 2040.3335062662763,
        "y": 181.99993928273523,
        "wires": []
    },
    {
        "id": "f4342235.5c0ed",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response ,\n    userObj     = msg.userObj ,\n    req_body    = msg.req_body;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [msg.addedUserTaskId], //under masterbot user sub_category task_id\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": {\n      user_id: userObj._id,\n      phone: userObj.virtual_phone,\n      firstname: userObj.firstname,\n      lastname : userObj.lastname,\n      type     : userObj.type,\n    },\n  \"page_id\": msg.added_user_page_id, // masterbot user_sub category page_id\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\":  (userObj.firstname + userObj.lastname) || req_body.body ,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nmsg.userDetailPayload = {\n  \"table\": \"details\",\n  \"task_id\": [\"18_0\"],  //on user chabot sub-category \n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": {\n      user_id: userObj._id,\n      phone: userObj.virtual_phone,\n      firstname: userObj.firstname,\n      lastname : userObj.lastname,\n      type     : userObj.type,\n    },\n  \"page_id\": 18, //on user chabot sub-category page_id \n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2042.0001017252607,
        "y": 233.3333511352539,
        "wires": [
            [
                "9ab127e6.c28448",
                "655effbd.f46eb"
            ]
        ]
    },
    {
        "id": "655effbd.f46eb",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2219.000162760417,
        "y": 207.66666412353516,
        "wires": []
    },
    {
        "id": "c1edb0b1.dbecc",
        "type": "comment",
        "z": "dc67abfa.d0b008",
        "name": "This flow is worked when user doesn't exits in databse . so we create user and all related info then approach to chatbot process",
        "info": "",
        "x": 1335.1666870117188,
        "y": 130.33333587646484,
        "wires": []
    },
    {
        "id": "9f0851de.ccd6a",
        "type": "comment",
        "z": "dc67abfa.d0b008",
        "name": "This flow is worked when users exits in database. so just follows chabot process and sms process",
        "info": "",
        "x": 1254.1668090820312,
        "y": 475.33329486846924,
        "wires": []
    },
    {
        "id": "c1c3647e.9cf9e8",
        "type": "comment",
        "z": "dc67abfa.d0b008",
        "name": "Receive Twilio msg and respond to it.",
        "info": "",
        "x": 634.8332977294922,
        "y": 240.66663360595703,
        "wires": []
    },
    {
        "id": "172c5b56.6688f5",
        "type": "http in",
        "z": "dc67abfa.d0b008",
        "name": "",
        "url": "/user_chatbot_response",
        "method": "post",
        "swaggerDoc": "",
        "x": 180.83331298828125,
        "y": 630,
        "wires": [
            [
                "d690da1a.6ad278"
            ]
        ]
    },
    {
        "id": "d690da1a.6ad278",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Masterbot User Detail Payload",
        "func": "var payload = msg.payload ;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [payload.task_id],\n  \"child_task_id\": payload.task_id,\n  \"user_id\": null,\n  \"from_user_id\": payload.masterbot,\n  \"replied_bot\": payload.masterbot,\n  \"page_id\": payload.page_id,\n  \"from_page_id\": \"2_3\",\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": new Date().toJSON(),\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"dri_main\": \"dri_main\",\n      \"public\" : \"public\"\n  },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": payload.master_bot,\n    \"message\": \"undefined\"\n  },\n  \"watson_incoming\": {\n    \"message\": payload.msg,\n    \"response\": payload.master_bot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"count\": {\n    \"active\": 1,\n    \"unread\": 1\n  },\n  \"count_if\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"createdAt\": new Date().getTime()\n};\nmsg.req_body = payload ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 455.8333282470703,
        "y": 630,
        "wires": [
            [
                "7edce954.b22588",
                "110cc1e1.d5519e"
            ]
        ]
    },
    {
        "id": "160b025e.ec484e",
        "type": "comment",
        "z": "dc67abfa.d0b008",
        "name": "Respond back to user via Roger user.",
        "info": "",
        "x": 207.8333282470703,
        "y": 587.0000178019205,
        "wires": []
    },
    {
        "id": "7edce954.b22588",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "save detail+",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 696.8332977294922,
        "y": 604.3333740234375,
        "wires": []
    },
    {
        "id": "110cc1e1.d5519e",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "User Chatbot Msg",
        "func": "var req_body = msg.req_body;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"18_0\"],\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": req_body.chatbot,\n  \"replied_bot\": req_body.master_bot,\n  \"page_id\": 18,\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\" : \"public\"\n  },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.master_bot,\n    \"message\": \"undefined\"\n  },\n  \"watson_incoming\": {\n    \"message\": req_body.msg,\n    \"response\": req_body.master_bot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 712.8333587646484,
        "y": 651.3333740234375,
        "wires": [
            [
                "857dc464.426d68",
                "b9a7567f.e300f8"
            ]
        ]
    },
    {
        "id": "857dc464.426d68",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Save chatbot res",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 935.8333587646484,
        "y": 613.3333740234375,
        "wires": []
    },
    {
        "id": "b9a7567f.e300f8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "SMS payload",
        "func": "var req_body = msg.req_body;\n\n//also sends a message to that user.\nmsg.topic = Number(req_body.chatbot.phone) || 12145644732;\nmsg.payload = req_body.msg;\n\nmsg.api_response = {status: 200, error: false, msg: \"Record created successfully\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 920.8333587646484,
        "y": 679.3333740234375,
        "wires": [
            [
                "147c3b0f.f71c65",
                "430df39a.9a310c"
            ]
        ]
    },
    {
        "id": "430df39a.9a310c",
        "type": "twilio out",
        "z": "dc67abfa.d0b008",
        "service": "_ext_",
        "twilio": "b1c40594.ea3728",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1119.3334197998047,
        "y": 632.0000025431315,
        "wires": []
    },
    {
        "id": "147c3b0f.f71c65",
        "type": "change",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1109.5000457763672,
        "y": 689.333376566569,
        "wires": [
            [
                "c09dd187.4691e"
            ]
        ]
    },
    {
        "id": "c09dd187.4691e",
        "type": "http response",
        "z": "dc67abfa.d0b008",
        "name": "",
        "x": 1260.8334197998047,
        "y": 690.6666870117188,
        "wires": []
    },
    {
        "id": "82f78394.7efc6",
        "type": "http in",
        "z": "dc67abfa.d0b008",
        "name": "Get SMS",
        "url": "/twilio_sms",
        "method": "post",
        "swaggerDoc": "",
        "x": 93.66665649414062,
        "y": 299.66661834716797,
        "wires": [
            [
                "285f9e84.9a3122"
            ]
        ]
    },
    {
        "id": "9ab127e6.c28448",
        "type": "change",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "userDetailPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2217.5006256103516,
        "y": 253.3333396911621,
        "wires": [
            [
                "c7e11136.47039"
            ]
        ]
    },
    {
        "id": "c7e11136.47039",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2415.666763305664,
        "y": 239.66665267944336,
        "wires": []
    },
    {
        "id": "85aeef41.c00b7",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1389.6666870117188,
        "y": 365.6666793823242,
        "wires": [
            [
                "9faa429b.b757d"
            ]
        ]
    },
    {
        "id": "9faa429b.b757d",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1593.666748046875,
        "y": 364.33336639404297,
        "wires": [
            [
                "5bb0b6ed.9c7b68",
                "99daf8b3.92c9f8",
                "ba1ef2cb.a428d",
                "beb652ae.e21f9"
            ]
        ]
    },
    {
        "id": "beb652ae.e21f9",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_obj    = msg.task_obj,\n    detail_obj  = msg.detail_obj,\n    userObj     = msg.userObj;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"18_0\"],\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": {\n      user_id: userObj._id,\n      phone: userObj.virtual_phone,\n      firstname: userObj.firstname,\n      lastname : userObj.lastname,\n      type     : userObj.type,\n    },\n  \"page_id\": 18,\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nmsg.userDetailPayload = {\n  \"table\": \"details\",\n  \"task_id\": [task_obj._id], //under masterbot user sub_category task_id\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": {\n      user_id: userObj._id,\n      phone: userObj.virtual_phone,\n      firstname: userObj.firstname,\n      lastname : userObj.lastname,\n      type     : userObj.type,\n    },\n  \"page_id\": detail_obj.page_id, // masterbot user_sub category page_id\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n    \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": (userObj.firstname + userObj.lastname) || req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nnode.warn(\"msg obj >>>\");\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1832.3333587646484,
        "y": 399.3333854675293,
        "wires": [
            [
                "f80142f2.d8216",
                "befd50bf.e888b",
                "7fdd6ca7.91ef74"
            ]
        ]
    },
    {
        "id": "befd50bf.e888b",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2040.3334350585938,
        "y": 330.6666717529297,
        "wires": []
    },
    {
        "id": "5bb0b6ed.9c7b68",
        "type": "twilio out",
        "z": "dc67abfa.d0b008",
        "service": "_ext_",
        "twilio": "b1c40594.ea3728",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1834.6668192545576,
        "y": 315.9999545415243,
        "wires": []
    },
    {
        "id": "7fdd6ca7.91ef74",
        "type": "change",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "userDetailPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040.0000610351562,
        "y": 382.6666898727417,
        "wires": [
            [
                "78539c70.b57c14"
            ]
        ]
    },
    {
        "id": "78539c70.b57c14",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2200.1660766601562,
        "y": 383.00000286102295,
        "wires": []
    },
    {
        "id": "cb07e9ff.995f78",
        "type": "comment",
        "z": "dc67abfa.d0b008",
        "name": "Respond via users from their chatbot screens",
        "info": "",
        "x": 180.2421875,
        "y": 886.0469131469727,
        "wires": []
    },
    {
        "id": "9a3a61d9.35aa4",
        "type": "http in",
        "z": "dc67abfa.d0b008",
        "name": "",
        "url": "/ask_chatbot",
        "method": "post",
        "swaggerDoc": "",
        "x": 100.25,
        "y": 931.2265625,
        "wires": [
            [
                "4af7db3f.b695c4",
                "8393ae56.a2045"
            ]
        ]
    },
    {
        "id": "84ce22b6.dcbee",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1391.8333892822266,
        "y": 994.9999847412109,
        "wires": [
            [
                "ad1e385a.9f78e8"
            ]
        ]
    },
    {
        "id": "ad1e385a.9f78e8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: \" + payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1595.8334503173828,
        "y": 993.6666717529297,
        "wires": [
            [
                "7dc6f840.aafd38"
            ]
        ]
    },
    {
        "id": "7dc6f840.aafd38",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    userObj     = msg.userObj ,\n    task_obj    = msg.task_obj,\n    detail_obj  = msg.detail_obj;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"18_0\"],\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": req_body.chatbot_user,\n  \"page_id\": 18,\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nmsg.userDetailPayload = {\n  \"table\": \"details\",\n  \"task_id\": [task_obj._id], //under masterbot user sub_category task_id\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": req_body.chatbot_user,\n  \"page_id\": detail_obj.page_id, // masterbot user_sub category page_id\n  \"from_page_id\": detail_obj.from_page_id || 2,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n  },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\n\nnode.warn(\"msg.userDetailPayload >>>>>>>>>>\");\nnode.warn(msg.userDetailPayload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1825.5001373291016,
        "y": 991.6666946411133,
        "wires": [
            [
                "e7998a6a.acedd8",
                "5e4507d5.d8af48",
                "7987d965.4f6ae8"
            ]
        ]
    },
    {
        "id": "5e4507d5.d8af48",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2042.5001373291016,
        "y": 959.9999771118164,
        "wires": []
    },
    {
        "id": "7987d965.4f6ae8",
        "type": "change",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "userDetailPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2042.166763305664,
        "y": 1011.9999952316284,
        "wires": [
            [
                "3df95e3c.b4c622"
            ]
        ]
    },
    {
        "id": "3df95e3c.b4c622",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2259.332649230957,
        "y": 982.3333740234375,
        "wires": []
    },
    {
        "id": "11df10ef.8bc72f",
        "type": "http response",
        "z": "dc67abfa.d0b008",
        "name": "",
        "x": 2252.242202758789,
        "y": 1081.9609451293945,
        "wires": []
    },
    {
        "id": "e7998a6a.acedd8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2075.242202758789,
        "y": 1083.1562576293945,
        "wires": [
            [
                "11df10ef.8bc72f"
            ]
        ]
    },
    {
        "id": "66b8083e.e14838",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "save users",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 989.166748046875,
        "y": 223.33333587646484,
        "wires": []
    },
    {
        "id": "efcb3163.14ea5",
        "type": "twilio out",
        "z": "dc67abfa.d0b008",
        "service": "_ext_",
        "twilio": "b1c40594.ea3728",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 2292.5001220703125,
        "y": 135.99998474121094,
        "wires": []
    },
    {
        "id": "ebb6bc68.1ac46",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n\nvar data = msg.adminData;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = \"A number is added under `Masterbot` category with chabot msg:- `\" + data.body + \"`\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2070.5,
        "y": 137,
        "wires": [
            []
        ]
    },
    {
        "id": "d358020.4bf54",
        "type": "http response",
        "z": "dc67abfa.d0b008",
        "name": "",
        "x": 328.8333435058594,
        "y": 89.33333587646484,
        "wires": []
    },
    {
        "id": "1233f5ae.b7f3fa",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 103.83332824707031,
        "y": 908.3333409627279,
        "wires": [
            [
                "97a8d9aa.b30298"
            ]
        ]
    },
    {
        "id": "97a8d9aa.b30298",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "func": "node.log(\"This node is used to log info\", \"john macathy\");\nnode.warn(\"This is used for Warning messages\");\nnode.error(\"This is used to show error messages\");\nmsg.payload = \"Final output.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 264.8333435058594,
        "y": 907.6666844685873,
        "wires": [
            [
                "12376bc4.d80914"
            ]
        ]
    },
    {
        "id": "12376bc4.d80914",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 434.8333435058594,
        "y": 908.6666844685873,
        "wires": []
    },
    {
        "id": "d9f7ff8c.cadfe",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/save_device_ids",
        "method": "post",
        "swaggerDoc": "",
        "x": 151.8333282470703,
        "y": 1248.0000178019204,
        "wires": [
            [
                "378378f1.1892b8"
            ]
        ]
    },
    {
        "id": "378378f1.1892b8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "var payload = msg.payload;\n\nmsg.payload = {\n  first_name: payload.f_name,\n  last_name : payload.l_name,\n  device_id : payload.device_id,\n  push_accepted: true\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 356.8333435058594,
        "y": 1245.6666259765625,
        "wires": [
            [
                "b5adf29f.1c45c",
                "f1df8fd4.19498"
            ]
        ]
    },
    {
        "id": "b5adf29f.1c45c",
        "type": "cloudant out",
        "z": "d4fc71c6.eee2",
        "name": "",
        "cloudant": "",
        "database": "devcie_details",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 564.8333435058594,
        "y": 1207.3333307902017,
        "wires": []
    },
    {
        "id": "f1df8fd4.19498",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 531.8333129882812,
        "y": 1261.3333740234375,
        "wires": []
    },
    {
        "id": "447c713e.ae088",
        "type": "twilio out",
        "z": "dc67abfa.d0b008",
        "service": "_ext_",
        "twilio": "b1c40594.ea3728",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 2086.6666259765625,
        "y": 469.66668224334717,
        "wires": []
    },
    {
        "id": "99daf8b3.92c9f8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n\nvar data = msg.chatbot_response;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = \"A message is added under `Masterbot` category with chabot msg:- `\" + data.data + \"`\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1864.66650390625,
        "y": 470.66669750213623,
        "wires": [
            [
                "447c713e.ae088"
            ]
        ]
    },
    {
        "id": "a68f3e81.95d52",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "update_get_pages ",
        "func": "var access_token = msg.payload_content.access_token;\n\nif(isEmpty(access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is mising.\", data: msg.payload_content};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1230.833381652832,
        "y": 644.6667499542236,
        "wires": [
            [
                "2bd3da91.104616"
            ]
        ]
    },
    {
        "id": "aee26cf5.06819",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1542.8338623046875,
        "y": 610.666784286499,
        "wires": []
    },
    {
        "id": "2bd3da91.104616",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1406.8336181640625,
        "y": 645.0001583099365,
        "wires": [
            [
                "aee26cf5.06819"
            ],
            [
                "448d2c48.319d14"
            ]
        ]
    },
    {
        "id": "448d2c48.319d14",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "updated_get_pages View",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 1605.8336181640625,
        "y": 655.3334712982178,
        "wires": [
            [
                "4107fbed.f0bb14"
            ]
        ]
    },
    {
        "id": "4107fbed.f0bb14",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "var body            = msg.payload_content,\n    payload         = msg.payload,\n    page_id         = body.page_id ;\n    access_token    = body.access_token;\n    \n     if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user with access_token\", data: null};\n        }else{\n            msg.api_status = \"API_SUCCESS\";\n\n            if(isEmpty(body.user_task_list)){\n                msg.isUpdateUserTasks = false;\n            }else{\n                msg.method  = \"GET\";\n                msg.url     = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task?key=[\"' + user_obj._id +'\"]';\n                msg.isUpdateUserTasks = true;\n            }\n            msg.payload = {status: 200, error:false, msg: \"Record fetched successfully\", data: populated_pages(user_tasks, db_record) };\n        }    \n    }\n    \nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [];\n\n    if(!isEmpty(page_id)){\n        var task = populate_taskobj(page_id, db_obj.tasks);\n        if(!isEmpty(task)){\n            var single_detail     =  populate_details(task._id, db_obj.details),\n            single_prepare_task   =  formulate_task(task, db_obj),\n            single_prepare_detail =  formulate_details(single_detail);  \n            \n            pages.push({\n               page_id : page_id,\n               user    : user_obj || {},\n               task    : single_prepare_task,\n               detail  : getpage(single_prepare_detail)\n            });\n        }\n    }\n\n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n    \n    return pages;\n}\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_record.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    for(var i =0; i<users.length; i++){\n        if(access_token === users[i].access_token){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1814.0001831054688,
        "y": 654.666784286499,
        "wires": [
            [
                "f19e5754.210198",
                "6acadba6.de4814"
            ]
        ]
    },
    {
        "id": "f19e5754.210198",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1986.8338012695312,
        "y": 706.0000972747803,
        "wires": []
    },
    {
        "id": "6acadba6.de4814",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "isUpdateUserTasks",
        "property": "isUpdateUserTasks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2024.5001831054688,
        "y": 652.3334102630615,
        "wires": [
            [
                "2e9f2b10.8a15d4"
            ]
        ]
    },
    {
        "id": "2e9f2b10.8a15d4",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2211.5005493164062,
        "y": 653.666784286499,
        "wires": [
            [
                "70475134.b5a74"
            ]
        ]
    },
    {
        "id": "70475134.b5a74",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "payload",
        "func": "var content          = msg.payload_content;\n    users_all_task   = simplfyUserTask(msg.payload);\n\nvar updated_user_task = populate_updated_user_task(content.user_task_list, users_all_task);\n\nif(!isEmpty(updated_user_task)){\n    msg.payload = { \"docs\": updated_user_task };   \n}else{\n    var obj = [];\n    for(var i=0; i<content.user_task_list.length; i++){\n        obj.push({\n            table           : \"user_task\",\n        \ttask_id \t\t: content.user_task_list[i].task_id,\n        \tuser_id\t\t\t: content.user_task_list[i].user_id,\n        \tpage_id         : parseInt(content.user_task_list[i].page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 1, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: content.user_task_list[i].task_id,\n        \tancestors       : content.user_task_list[i].ancestors, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : content.user_task_list[i].unread,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        });\n    }\n    msg.payload = { \"docs\": obj };   \n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction simplfyUserTask(user_task){\n    if(isEmpty(user_task)){\n        return [];\n    }else{\n        var d = [], rows = user_task.rows;\n        for(var i=0; i<rows.length; i++){\n            d.push(rows[i].value);\n        }\n        return d;\n    }    \n}\n\nfunction populate_updated_user_task(user_task_list, users_all_task){\n\n    if(!isEmpty(user_task_list) && !isEmpty(user_task_list)){\n        var user_task = [];\n\n        for(var i=0; i<users_all_task.length; i++){\n            for(j=0; j<user_task_list.length; j++){\n                if(\n                    (users_all_task[i].user_id == user_task_list[j].user_id) &&\n                    (users_all_task[i].task_id == user_task_list[j].task_id) &&\n                    (users_all_task[i].page_id == user_task_list[j].page_id)  \n                ){\n                    users_all_task[i].synchronized = 1 ;\n                    users_all_task[i].status       = 1 ;\n                    users_all_task[i].count.unread = user_task_list[j].unread ;\n                    users_all_task[i].date_updated = new Date().getTime();\n                    \n                    //push to new array which is going to update into db.\n                    user_task.push(users_all_task[i]);\n                }\n            }\n        }\n        return user_task ;\n    }else{\n        return null;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2371.8336791992188,
        "y": 653.3334712982178,
        "wires": [
            [
                "76e5d666.571e88",
                "c4b54b65.01a2b8"
            ]
        ]
    },
    {
        "id": "c4b54b65.01a2b8",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2551.1678009033203,
        "y": 648.0001878738403,
        "wires": [
            [
                "b4d044f3.6326c8"
            ]
        ]
    },
    {
        "id": "b4d044f3.6326c8",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2729.1670684814453,
        "y": 654.6668281555176,
        "wires": []
    },
    {
        "id": "fcedef66.0c5d9",
        "type": "cloudant in",
        "z": "dc67abfa.d0b008",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 476,
        "y": 936,
        "wires": [
            [
                "65cf1608.e3bca8"
            ]
        ]
    },
    {
        "id": "65cf1608.e3bca8",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload = {\n        table       : \"users\",\n        access_token:  token(),\n        firstname   :  parseInt(phone),\n        lastname    :   \"\",\n        phone       :  parseInt(phone),\n        virtual_phone: parseInt(phone),\n        security_level: 0,\n        code:         rand(),\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: \"\",\n        push_accepted: 0\n    };\n    msg.userObj = msg.payload;\n}else{\n    msg.userObj = user ;\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\n    msg.method  = \"GET\";\n    msg.userObj = user ;\n}\n\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 675,
        "y": 935.0000610351562,
        "wires": [
            [
                "d7723ce2.c07"
            ]
        ]
    },
    {
        "id": "d7723ce2.c07",
        "type": "switch",
        "z": "dc67abfa.d0b008",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 834.6666666666667,
        "y": 933.6667022705078,
        "wires": [
            [
                "aad828d8.7d6378",
                "f798dace.b16ff8"
            ],
            [
                "6ce811de.17152"
            ]
        ]
    },
    {
        "id": "f798dace.b16ff8",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "save users",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1032.3334045410156,
        "y": 841.0000228881836,
        "wires": []
    },
    {
        "id": "aad828d8.7d6378",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    userObj = msg.userObj,\n    phone   = msg.req_body.phone;\n    msg.added_user_page_id = new Date().getTime();\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"51fb167ca7670096ea62b4e9f913e7e5\"], //master bot task_id \n  \"child_task_id\": \"51fb167ca7670096ea62b4e9f913e7e5\",\n  \"user_id\": \"0a9b50963bc76018418ffd857d551ced\",\n  \"from_user_id\": null,\n  \"page_id\": 1499057617028, //masterbot category page_id\n  \"from_page_id\": 2,\n  \"to_page_id\": msg.added_user_page_id,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": new Date().toJSON(),\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": phone,\n    \"message\": (userObj.firstname + userObj.lastname ) || parseInt(phone)\n  },\n  \"watson_incoming\": {\n    \"message\": \"Watson response to : \" + (userObj.firstname + userObj.lastname )|| phone,\n    \"response\": {}\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"count\": {\n    \"active\": 1,\n    \"unread\": 1\n  },\n  \"count_if\": {\n    \"active\": 1,\n    \"unread\": 0\n  },\n  \"createdAt\": new Date().getTime()\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1054.3333435058594,
        "y": 892.6666870117188,
        "wires": [
            [
                "df947300.42374",
                "fb186ce.702789"
            ]
        ]
    },
    {
        "id": "fb186ce.702789",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Save detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1251.6666564941406,
        "y": 918.6666450500488,
        "wires": []
    },
    {
        "id": "df947300.42374",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Optional Task",
        "func": "var detail = msg.payload;\n    msg.addedUserTaskId = randomString(32);\n    \nmsg.payload = {\n  \"_id\": msg.addedUserTaskId,\n  \"table\": \"task_table\",\n  \"user_id\": null,\n  \"task_name\": detail.user_incoming.message, \n  \"page_id\": detail.to_page_id,\n  \"from_page_id\": detail.page_id,\n  \"parent_id\": detail.task_id,\n  \"header_template_id\": \"99_h\",\n  \"detail_template_id\": \"99_d\",\n  \"footer_template_id\": \"99_f\",\n  \"timeout_id\": null,\n  \"location_ids\": {},\n  \"child_default_task_id\": null,\n  \"child_default_task_name\": null,\n  \"date_created\": new Date().toJSON(),\n  \"category\": \"Chatbot\",\n  \"status\": \"true\",\n  \"additional_data_fn\": null,\n  \"optional_data\": {},\n  \"required_data\": {},\n  \"offline_expiration_time\": 0,\n  \"display_if_empty\": \"true\",\n  \"type\": {\n    \"public\": \"public\"\n  },\n  \"image\": \"\"\n};\n\nmsg.detail_obj = detail;\nmsg.task_obj   = msg.payload ;\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1259.6666666666665,
        "y": 852.999994913737,
        "wires": [
            [
                "deef899a.031a08",
                "9dbbc861.61f678"
            ]
        ]
    },
    {
        "id": "9dbbc861.61f678",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Save optional task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1512.6666259765625,
        "y": 815,
        "wires": []
    },
    {
        "id": "deef899a.031a08",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body;\n\nmsg.method = \"GET\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1505.598876953125,
        "y": 869.1848754882812,
        "wires": [
            [
                "e2d28c09.9d476"
            ]
        ]
    },
    {
        "id": "e2d28c09.9d476",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1681.0989990234375,
        "y": 866.8515396118164,
        "wires": [
            [
                "6aba04ac.7d1b2c"
            ]
        ]
    },
    {
        "id": "6aba04ac.7d1b2c",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: \" + payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1885.0990600585938,
        "y": 865.5182266235352,
        "wires": [
            [
                "37bab35c.cd72bc"
            ]
        ]
    },
    {
        "id": "37bab35c.cd72bc",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    userObj     = msg.userObj ,\n    req_body    = msg.req_body,\n    task_obj    = msg.task_obj,\n    detail_obj  = msg.detail_obj;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": [\"18_0\"],\n  \"child_task_id\": null,\n  \"user_id\": null,\n  \"from_user_id\": req_body.chatbot_user,\n  \"page_id\": 18,\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\n\nmsg.userDetailPayload = {\n  \"table\": \"details\",\n  \"task_id\": [task_obj._id], //under masterbot user sub_category task_id\n  \"child_task_id\": task_obj._id,\n  \"user_id\": null,\n  \"from_user_id\": req_body.chatbot_user,\n    \"master_bot\": {},\n  \"page_id\": detail_obj.page_id, // masterbot user_sub category page_id\n  \"from_page_id\": 5,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 0,\n  \"status\": 0,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": \"\",\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"type\": {\n      \"public\": \"public\",\n      \"dri_main\": \"dri_main\"\n    },\n  \"image\": \"\",\n  \"from_user\": {},\n  \"user_incoming\": {\n    \"note\": req_body.body,\n    \"message\": req_body.body\n  },\n  \"watson_incoming\": {\n    \"message\": chatbot.data,\n    \"response\": chatbot\n  },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2114.7657470703125,
        "y": 863.5182495117188,
        "wires": [
            [
                "d9e873ca.25992",
                "dffadd92.27c1d",
                "dc67b1df.56a63"
            ]
        ]
    },
    {
        "id": "dc67b1df.56a63",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2320.765625,
        "y": 773.8515625,
        "wires": []
    },
    {
        "id": "dffadd92.27c1d",
        "type": "change",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "userDetailPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2319.432373046875,
        "y": 823.8515625,
        "wires": [
            [
                "3d489665.a99c5a"
            ]
        ]
    },
    {
        "id": "d9e873ca.25992",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2348.5078125,
        "y": 881.0078125,
        "wires": [
            [
                "42b8958b.49378c"
            ]
        ]
    },
    {
        "id": "42b8958b.49378c",
        "type": "http response",
        "z": "dc67abfa.d0b008",
        "name": "",
        "x": 2525.5078125,
        "y": 879.8125,
        "wires": []
    },
    {
        "id": "3d489665.a99c5a",
        "type": "cloudant out",
        "z": "dc67abfa.d0b008",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2479.598388671875,
        "y": 824.1848754882812,
        "wires": []
    },
    {
        "id": "98eb9f2a.84817",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "func": "    var data = msg.payload ;    \n    msg.payload = {\n        \"message\": {\n            \"alert\": data\n        }\n    };\n    msg.notificationType = 3 ;\n    msg.identifiers= \"74CD9319-262A-48E6-9DB5-960B2CBEAF01\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2035,
        "y": 85.66666412353516,
        "wires": [
            []
        ]
    },
    {
        "id": "31acf733.e2fdd8",
        "type": "ibmpush",
        "z": "dc67abfa.d0b008",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 2222,
        "y": 87.00000762939453,
        "wires": []
    },
    {
        "id": "ba1ef2cb.a428d",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "payload",
        "func": "    var data = msg.payload ;    \n    msg.payload = {\n        \"message\": {\n            \"alert\": data\n        }\n    };\n    msg.notificationType = 3 ;\n    msg.identifiers= \"74CD9319-262A-48E6-9DB5-960B2CBEAF01\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1826.9998779296875,
        "y": 522.6667127609253,
        "wires": [
            [
                "afaa46af.e6fde8"
            ]
        ]
    },
    {
        "id": "afaa46af.e6fde8",
        "type": "ibmpush",
        "z": "dc67abfa.d0b008",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 2013.9998779296875,
        "y": 524.0000562667847,
        "wires": []
    },
    {
        "id": "4af7db3f.b695c4",
        "type": "debug",
        "z": "dc67abfa.d0b008",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 303.8333435058594,
        "y": 1003.6666870117188,
        "wires": []
    },
    {
        "id": "8393ae56.a2045",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "msg",
        "func": "var payload = msg.payload;\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\n\nmsg.req_body = payload ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 295.8333435058594,
        "y": 937.6666259765625,
        "wires": [
            [
                "fcedef66.0c5d9"
            ]
        ]
    },
    {
        "id": "7e6d9628.c836b8",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "Updated_get_pages endpoint",
        "info": "",
        "x": 1261.7656631469727,
        "y": 603.2500654856365,
        "wires": []
    },
    {
        "id": "41f6d315.284eac",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 82.66667175292969,
        "y": 2991.3334312438965,
        "wires": [
            [
                "8df59faa.2db1d"
            ]
        ]
    },
    {
        "id": "e3c921b6.2d7ae",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "get_page endpoint (working endpoint plz do not delete)",
        "info": "",
        "x": 218.83335876464844,
        "y": 2930.826946258545,
        "wires": []
    },
    {
        "id": "8df59faa.2db1d",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 252.66282653808594,
        "y": 2990.2629404067993,
        "wires": [
            [
                "1208319.200eece"
            ],
            [
                "f3b8c901.7aa0e8"
            ]
        ]
    },
    {
        "id": "1208319.200eece",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 394.6744842529297,
        "y": 2960.493416786194,
        "wires": []
    },
    {
        "id": "f3b8c901.7aa0e8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 391.2838592529297,
        "y": 3025.344979286194,
        "wires": [
            [
                "aa7190ec.ef92e"
            ]
        ]
    },
    {
        "id": "aa7190ec.ef92e",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 527.4505462646484,
        "y": 3025.344994544983,
        "wires": [
            [
                "4d3a8f6b.41c2e"
            ],
            [
                "406ebbbb.20da84"
            ]
        ]
    },
    {
        "id": "4d3a8f6b.41c2e",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 654.2837677001953,
        "y": 3018.344979286194,
        "wires": []
    },
    {
        "id": "406ebbbb.20da84",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 685.2837371826172,
        "y": 3077.290291786194,
        "wires": [
            [
                "849d12d9.9e1da"
            ]
        ]
    },
    {
        "id": "849d12d9.9e1da",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "format",
        "func": "var db_records   = msg.payload ;\n    access_token = msg.payload_content.access_token ;\n    page_id      = msg.payload_content.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.updated_user_task = null ;\n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                \n                if(!isEmpty(user_obj)){\n                    update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n                } \n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n\n    if ( create_user_task_flag ) {\n        \n        if(task_obj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(task_obj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n            }\n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {}, user_task_arr = db_obj.user_tasks ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        == user_id &&\n                user_task_arr[i].task_id        == task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_obj.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 879.4505157470703,
        "y": 3077.344979286194,
        "wires": [
            [
                "f8042c51.d3228"
            ]
        ]
    },
    {
        "id": "f8042c51.d3228",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "updated_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1009.5494842529297,
        "y": 3077.419198036194,
        "wires": [
            [
                "9fc4ab8b.fbafd8",
                "62fb6e1b.6c97b"
            ],
            [
                "9fc4ab8b.fbafd8"
            ]
        ]
    },
    {
        "id": "62fb6e1b.6c97b",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1161.5416717529297,
        "y": 3035.657479286194,
        "wires": [
            [
                "cd711d60.19ff3"
            ]
        ]
    },
    {
        "id": "9fc4ab8b.fbafd8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1150.2838592529297,
        "y": 3078.001229286194,
        "wires": []
    },
    {
        "id": "cd711d60.19ff3",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "update_user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1346.5494842529297,
        "y": 3035.317635536194,
        "wires": []
    },
    {
        "id": "6ca781dd.6c20f",
        "type": "change",
        "z": "d4fc71c6.eee2",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 748.8333778381348,
        "y": 140.00001907348633,
        "wires": [
            [
                "2e5e2993.c71836"
            ]
        ]
    },
    {
        "id": "2e5e2993.c71836",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 920.8333435058594,
        "y": 141.000018119812,
        "wires": [
            [
                "f6db4f52.f5f3e"
            ]
        ]
    },
    {
        "id": "f6db4f52.f5f3e",
        "type": "change",
        "z": "d4fc71c6.eee2",
        "name": "counts",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "count_objs",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1061.8333587646484,
        "y": 139.33333206176758,
        "wires": [
            [
                "f5002ded.ccc75"
            ]
        ]
    },
    {
        "id": "3f0b1978.18eed6",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 2275.333583831787,
        "y": 149.6666660308838,
        "wires": [
            [
                "3a122834.a215b8"
            ]
        ]
    },
    {
        "id": "9dc55849.0108d8",
        "type": "change",
        "z": "5e22f743.a6a0b8",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2103.3336181640625,
        "y": 148.6666669845581,
        "wires": [
            [
                "3f0b1978.18eed6"
            ]
        ]
    },
    {
        "id": "76e5d666.571e88",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "bulk payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2528.166717529297,
        "y": 594.0000076293945,
        "wires": []
    },
    {
        "id": "8f00693.57a2a98",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2595.8334884643555,
        "y": 235.00004196166992,
        "wires": []
    },
    {
        "id": "49ac873d.cc2de8",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 99.83332824707031,
        "y": 203.00000762939453,
        "wires": [
            [
                "83cd7147.7005b"
            ]
        ]
    },
    {
        "id": "83cd7147.7005b",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "just a function node",
        "func": "msg.payload = \"Test Node\";\nnode.warn(\"Just to check a logs.\");\n\nvar cloneObj = Object.assign({}, msg);\nmsg.payload = {\n    msgObject : cloneObj\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 292.8333435058594,
        "y": 248.00000762939453,
        "wires": [
            [
                "8007e56a.746888"
            ]
        ]
    },
    {
        "id": "4875e436.7a2cfc",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 707.833324432373,
        "y": 369.333345413208,
        "wires": []
    },
    {
        "id": "8007e56a.746888",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "http://mastersoftwaretechnologies.com/roger_project/log.php",
        "tls": "",
        "x": 530.8333549499512,
        "y": 307.33334159851074,
        "wires": [
            [
                "4875e436.7a2cfc"
            ]
        ]
    },
    {
        "id": "6cc2848f.b7b8bc",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_all_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1212.8333435058594,
        "y": 714.9999923706055,
        "wires": [
            [
                "5026614f.73353"
            ]
        ]
    },
    {
        "id": "5026614f.73353",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "all_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1380.8333740234375,
        "y": 712.6667098999023,
        "wires": [
            [
                "9d1db335.cafd3"
            ]
        ]
    },
    {
        "id": "9d1db335.cafd3",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var response = msg.payload ;\n\nif(!isEmpty(response)){\n    msg.payload = {status:200, msg: \"Record fectehed successfully.\", data: response};\n}else{\n    msg.statusCode = 400;\n    msg.payload = {status:400, msg: \"Error while fetching record..\", data: response};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.833381652832,
        "y": 712.666708946228,
        "wires": [
            [
                "82810bd4.435928"
            ]
        ]
    },
    {
        "id": "82810bd4.435928",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1688.8334045410156,
        "y": 709.9999923706055,
        "wires": []
    },
    {
        "id": "8047b1c2.00b14",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_detail_to_task",
        "func": "var content         = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(content.detail_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`detaik_id`is missing\", data: content};\n}else if(isEmpty(content.task_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`task_id`is missing\", data: content};\n}else if(isEmpty(access_token)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`access_token`is missing\", data: content};\n}else{\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task\";\n    msg.method  = \"GET\";\n}\n\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1311.5000305175781,
        "y": 1140.333351135254,
        "wires": [
            [
                "b009fcf1.982cd"
            ]
        ]
    },
    {
        "id": "418ae6bc.5f2e38",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1984.500244140625,
        "y": 1145.6667852401733,
        "wires": []
    },
    {
        "id": "b009fcf1.982cd",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1504.5000076293945,
        "y": 1140.0000267028809,
        "wires": [
            [
                "647749b5.f11ce8"
            ]
        ]
    },
    {
        "id": "647749b5.f11ce8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_data",
        "func": "var content         = msg.payload_data,\n    access_token    = msg.access_token,\n    db_records      = msg.payload;\n\nif(isEmpty(db_records.rows)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to fetch data via using cloudant view 'add_detail_to_task'\", data: null};\n}else{\n    var records     = populate_record(db_records.rows),\n        detail_obj  = populate_details(records.details, content.detail_id),\n        user_obj    = populate_user(records.users, access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`access_token` is not valid.\", data: null};\n    }else if(isEmpty(detail_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`detail_id` is not valid.\", data: null};\n    }else{\n\n        if(isEmpty(detail_obj.task_id)){\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"`detail_obj` doesn't contains task_id. please check it once.\", data: null};\n        }\n        else if(Object.prototype.toString.call(detail_obj.task_id) !== \"[object Array]\"){\n            detail_obj.task_id = detail_obj.task_id.push(task_id);    \n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Invalid detail.task_id. Plesae check details_obj once.\", data: null};\n        }else{\n            msg.statusCode     = 200;\n            detail_obj.task_id.push(content.task_id);    \n            msg.payload        = detail_obj;\n        }\n    }\n}\nreturn msg;\n\nfunction populate_user(arr, token){\n    if(isEmpty(token)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].access_token == token){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_details(arr, id){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]._id == id){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_record(list){\n    var users = [],details=[], sorted_detail=[];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, details: sorted_detail} ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1673.8333435058594,
        "y": 1183.6666641235352,
        "wires": [
            [
                "ced53a41.ba8868"
            ]
        ]
    },
    {
        "id": "ced53a41.ba8868",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1840.8333435058594,
        "y": 1184.0000076293945,
        "wires": [
            [
                "418ae6bc.5f2e38"
            ],
            [
                "d674a9dd.e79dd8",
                "fb340adc.026378"
            ]
        ]
    },
    {
        "id": "fb340adc.026378",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2006.8336181640625,
        "y": 1199.3334197998047,
        "wires": []
    },
    {
        "id": "d674a9dd.e79dd8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var data = msg.payload ;\n\nmsg.payload = {status: 200, msg: \"Record updated successfully.\", data: data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1998.8333435058594,
        "y": 1256.0000076293945,
        "wires": [
            [
                "b1560562.e65e68"
            ]
        ]
    },
    {
        "id": "b1560562.e65e68",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2134.8334045410156,
        "y": 1257.333351135254,
        "wires": []
    },
    {
        "id": "180fe49f.22f41b",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\nmsg.task_obj    = populate_task(db_records.tasks, msg.req_body.phone);\nmsg.detail_obj  = populate_detail(db_records.details, msg.task_obj._id);\n\nmsg.method      = \"GET\";\nmsg.url         = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;\n\nfunction populate_task(list, task_name){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_detail(list, task_id){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if( if_exists_in_arr(task_id, list[i].task_id) ){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1201.3333740234375,
        "y": 362.66667795181274,
        "wires": [
            [
                "85aeef41.c00b7"
            ]
        ]
    },
    {
        "id": "cc4db75f.a13e58",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 996.5000991821289,
        "y": 365.0000114440918,
        "wires": [
            [
                "180fe49f.22f41b"
            ]
        ]
    },
    {
        "id": "6ce811de.17152",
        "type": "http request",
        "z": "dc67abfa.d0b008",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1011.0000610351562,
        "y": 994.0000677108765,
        "wires": [
            [
                "784d4c14.024444"
            ]
        ]
    },
    {
        "id": "784d4c14.024444",
        "type": "function",
        "z": "dc67abfa.d0b008",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\nmsg.task_obj    = populate_task(db_records.tasks, msg.req_body.phone);\nmsg.detail_obj  = populate_detail(db_records.details, msg.task_obj._id);\n\nnode.warn(\"task_obj >>>>>>>>>>>>\");\nnode.warn(msg.task_obj);\n\nnode.warn(\"detail_obj >>>>>>>>>>>>>>\");\nnode.warn(msg.detail_obj);\n\nnode.warn(\"textMsg >>>>>>>>>>>>>>>>>\");\nnode.warn(textMsg);\n\nmsg.method      = \"GET\";\nmsg.url          = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;\n\nfunction populate_task(list, task_name){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj = list[i];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_detail(list, task_id){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if( if_exists_in_arr(task_id, list[i].task_id) ){\n            obj = list[i];\n        }\n    }\n\n    return obj;\n}\n\nfunction populate_record(list){\n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1215.8333358764648,
        "y": 991.6667342185974,
        "wires": [
            [
                "84ce22b6.dcbee"
            ]
        ]
    },
    {
        "id": "f80142f2.d8216",
        "type": "debug",
        "z": "dc67abfa.d0b008",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2033.8332901000977,
        "y": 426.3333492279053,
        "wires": []
    },
    {
        "id": "6823a1ed.2beed",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 90.66666412353516,
        "y": 3154.000196456909,
        "wires": [
            [
                "6d834958.2ab618"
            ]
        ]
    },
    {
        "id": "6d834958.2ab618",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 362.6628189086914,
        "y": 3156.9296951293945,
        "wires": [
            [
                "5fcf5e8b.16a77"
            ],
            [
                "2a2db810.f39038"
            ]
        ]
    },
    {
        "id": "5fcf5e8b.16a77",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 504.67447662353516,
        "y": 3127.160171508789,
        "wires": []
    },
    {
        "id": "2a2db810.f39038",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 501.28385162353516,
        "y": 3192.011734008789,
        "wires": [
            [
                "1ed36759.7ca5d9"
            ]
        ]
    },
    {
        "id": "1ed36759.7ca5d9",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 637.4505386352539,
        "y": 3192.011749267578,
        "wires": [
            [
                "a5c8c451.8dd208"
            ],
            [
                "56100971.4884d8"
            ]
        ]
    },
    {
        "id": "a5c8c451.8dd208",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 764.2837600708008,
        "y": 3185.011734008789,
        "wires": []
    },
    {
        "id": "56100971.4884d8",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 795.2837295532227,
        "y": 3243.957046508789,
        "wires": [
            [
                "97b08421.6d4cb8"
            ]
        ]
    },
    {
        "id": "114bda8.f52b426",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "get_page endpoint (working backup)",
        "info": "",
        "x": 168.8333511352539,
        "y": 3102.493681907654,
        "wires": []
    },
    {
        "id": "c3c3e7d0.a83368",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 1152.0002479553223,
        "y": 3243.826837539673,
        "wires": [
            [
                "d01bac02.b8db9"
            ]
        ]
    },
    {
        "id": "97b08421.6d4cb8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980.0002822875977,
        "y": 3242.826838493347,
        "wires": [
            [
                "c3c3e7d0.a83368"
            ]
        ]
    },
    {
        "id": "d01bac02.b8db9",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "format",
        "func": "var db_records   = msg.db_records ,\n    counts       = msg.payload ,\n    access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.isUpdateUserTask = false; \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    var result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n        detail = result.detail_array ;\n    \n    // var result = populate_active_unread_count(details),\n    //     detail = result.detail_array;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                \n                if(!isEmpty(user_obj)){\n                    update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n                } \n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction update_user_task_record(obj, update_parent){\n\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \t\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n\n    }\n    \n    if ( create_user_task_flag ) {\n        \n        if(task_obj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(task_obj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n            }\n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n    \n    msg.isUpdateUserTask = true ;\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {}, user_task_arr = db_obj.user_tasks ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        == user_id &&\n                user_task_arr[i].task_id        == task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_obj.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else if(\n                    (\"dri_main\" in detail_data[d].type) && (\"dri_main\" in user_obj.type) \n                ){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n\n                    if( check_isDisplay(detail_data[d].display_if_empty) && \n                        (\"public\" in detail_data[d].type) \n                    ){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.4506721496582,
        "y": 3241.0117321014404,
        "wires": [
            [
                "cd54bcc.47f374",
                "17932363.55781d"
            ]
        ]
    },
    {
        "id": "cd54bcc.47f374",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "isUpdateUserTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1438.5496406555176,
        "y": 3241.0859508514404,
        "wires": [
            [
                "29a2fdae.42e632",
                "504a6c18.1737d4"
            ],
            [
                "29a2fdae.42e632"
            ]
        ]
    },
    {
        "id": "504a6c18.1737d4",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1566.833381652832,
        "y": 3178.826835632324,
        "wires": [
            [
                "1f15beca.c55611",
                "877ee55c.a35e38"
            ]
        ]
    },
    {
        "id": "29a2fdae.42e632",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1610.2843437194824,
        "y": 3239.667984008789,
        "wires": []
    },
    {
        "id": "1f15beca.c55611",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1780.833501815796,
        "y": 3175.1601905822754,
        "wires": []
    },
    {
        "id": "877ee55c.a35e38",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1785.8334999084473,
        "y": 3214.160186767578,
        "wires": []
    },
    {
        "id": "17932363.55781d",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1472.5001525878906,
        "y": 3329.160213470459,
        "wires": []
    },
    {
        "id": "e2be2d17.4c36",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "x": 2736.50008392334,
        "y": 171.66665744781494,
        "wires": []
    },
    {
        "id": "264fffb0.2acc3",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "bulk_insert payload",
        "func": "var payload = msg.updated_user_task;\n\nmsg.api_response = msg.payload; //preserve basic get_page api_response before changing payload;\nmsg.payload = { //this payload has been used for inser into user_task table .this payload is used when there is not task for that detail.\n    docs: payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2764.50008392334,
        "y": 111.66667175292969,
        "wires": [
            [
                "e80abaa0.ba5e48"
            ]
        ]
    },
    {
        "id": "e227f0ca.76d3e",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 3255.5001106262207,
        "y": 108.33333683013916,
        "wires": []
    },
    {
        "id": "e80abaa0.ba5e48",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2951.5000915527344,
        "y": 111.66667079925537,
        "wires": [
            [
                "565cac57.7e5d34"
            ]
        ]
    },
    {
        "id": "565cac57.7e5d34",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "node.warn(\"bulk insert logs\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3112.5000915527344,
        "y": 110.33333587646484,
        "wires": [
            [
                "e227f0ca.76d3e"
            ]
        ]
    }
]
