[
    {
        "id": "5e22f743.a6a0b8",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "dc6e47ae.829f28",
        "type": "http in",
        "z": "5e22f743.a6a0b8",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "b86a2cb5.013be"
            ]
        ]
    },
    {
        "id": "b86a2cb5.013be",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    var obj = populate_content(req.app) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `app` param json.\", data: null};\n    }else{\n        msg.req_params = obj.data.api;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "d1f9a02e.3a168"
            ]
        ]
    },
    {
        "id": "d1f9a02e.3a168",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "e21a6625.bbee68"
            ],
            [
                "194125ed.652ada"
            ]
        ]
    },
    {
        "id": "e21a6625.bbee68",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 569.7655944824219,
        "y": 241.74999237060547,
        "wires": []
    },
    {
        "id": "194125ed.652ada",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    if(!checkObj(params.content)){\n        msg.payload_type = params.type ;\n        msg.payload_content = params.content;\n    }else{\n        var obj = populate_content(params.content) ;\n        if(obj.error){\n          msg.api_response = \"API_ERROR\";\n          msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n        }else{\n            msg.payload_type    = params.type ;\n            msg.payload_content = obj.data ;\n        }\n    }\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}\n\nfunction checkObj(obj){\n    if(typeof obj == \"string\") return true;\n    else return false ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "fac0f585.2f5b08"
            ]
        ]
    },
    {
        "id": "fac0f585.2f5b08",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "bd921431.7fd498"
            ],
            [
                "b40ce815.147eb8"
            ]
        ]
    },
    {
        "id": "bd921431.7fd498",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 942.7655944824219,
        "y": 286.74999237060547,
        "wires": []
    },
    {
        "id": "b40ce815.147eb8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_user_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data_for_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 6,
        "x": 787.765625,
        "y": 688.75,
        "wires": [
            [
                "a86b54c1.473c78"
            ],
            [
                "d489a76a.675f28"
            ],
            [
                "4151b7c3.f7cfa8"
            ],
            [
                "fe339820.cb4b28"
            ],
            [
                "a68f3e81.95d52"
            ],
            [
                "65c0dc87.cb51f4"
            ]
        ]
    },
    {
        "id": "65c0dc87.cb51f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200.8338088989258,
        "y": 705.0003080368042,
        "wires": [
            [
                "226565c.1ddb69a"
            ]
        ]
    },
    {
        "id": "226565c.1ddb69a",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1339.8337173461914,
        "y": 706.6669823328655,
        "wires": []
    },
    {
        "id": "fe339820.cb4b28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1191.63676071167,
        "y": 527.5234394073486,
        "wires": [
            [
                "7a96b596.327adc"
            ]
        ]
    },
    {
        "id": "7ecc3796.ce8288",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1633.3867705464363,
        "y": 524.1718864999712,
        "wires": []
    },
    {
        "id": "7a96b596.327adc",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1342.1328642964363,
        "y": 527.3320427499712,
        "wires": [
            [
                "9d835ace.95af38"
            ]
        ]
    },
    {
        "id": "9d835ace.95af38",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1493.1289580464363,
        "y": 526.7734489999712,
        "wires": [
            [
                "7ecc3796.ce8288"
            ]
        ]
    },
    {
        "id": "a86b54c1.473c78",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1205,
        "y": 199.83982849121094,
        "wires": [
            [
                "aa8e7501.202a68"
            ]
        ]
    },
    {
        "id": "aa8e7501.202a68",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1485.9961547851562,
        "y": 62.76952362060547,
        "wires": [
            [
                "4fe8c497.83a2ac"
            ],
            [
                "3e8369c8.233d56"
            ]
        ]
    },
    {
        "id": "4fe8c497.83a2ac",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1628.0078125,
        "y": 33,
        "wires": []
    },
    {
        "id": "3e8369c8.233d56",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1624.6171875,
        "y": 97.8515625,
        "wires": [
            [
                "debbb61b.960a88"
            ]
        ]
    },
    {
        "id": "debbb61b.960a88",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1760.7838745117188,
        "y": 97.85157775878906,
        "wires": [
            [
                "f2f1d34c.27bd3"
            ],
            [
                "1588c1f9.35643e"
            ]
        ]
    },
    {
        "id": "f2f1d34c.27bd3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1887.6170959472656,
        "y": 90.8515625,
        "wires": []
    },
    {
        "id": "1588c1f9.35643e",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1918.6170654296875,
        "y": 149.796875,
        "wires": [
            [
                "3a122834.a215b8"
            ]
        ]
    },
    {
        "id": "3a122834.a215b8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "format",
        "func": "var db_records   = msg.payload ;\n    access_token = msg.payload_content.access_token ;\n    page_id      = msg.payload_content.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.updated_user_task = null ;\n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                \n                if(!isEmpty(user_obj)){\n                    update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n                } \n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n\n    if ( create_user_task_flag ) {\n        \n        if(task_obj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(task_obj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n            }\n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {}, user_task_arr = db_obj.user_tasks ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        == user_id &&\n                user_task_arr[i].task_id        == task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_obj.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2112.7838439941406,
        "y": 149.8515625,
        "wires": [
            [
                "88651594.c6f868"
            ]
        ]
    },
    {
        "id": "4ba8e35b.e1be8c",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2383.6171875,
        "y": 150.5078125,
        "wires": []
    },
    {
        "id": "88651594.c6f868",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "updated_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2242.8828125,
        "y": 149.92578125,
        "wires": [
            [
                "4ba8e35b.e1be8c",
                "b59d95ba.4dfe48"
            ],
            [
                "4ba8e35b.e1be8c"
            ]
        ]
    },
    {
        "id": "3bd8d2a1.31170e",
        "type": "cloudant out",
        "z": "5e22f743.a6a0b8",
        "name": "update_user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2579.8828125,
        "y": 107.82421875,
        "wires": []
    },
    {
        "id": "b59d95ba.4dfe48",
        "type": "change",
        "z": "5e22f743.a6a0b8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2394.875,
        "y": 108.1640625,
        "wires": [
            [
                "3bd8d2a1.31170e"
            ]
        ]
    },
    {
        "id": "d489a76a.675f28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validation",
        "func": "var access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        //node.warn(msg.payload_content);\n        msg.api_status = \"API_SUCCESS\";\n        //msg.api_status = \"API_ERROR\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1206.000057220459,
        "y": 303.66669273376465,
        "wires": [
            [
                "304e6480.fe3fac"
            ]
        ]
    },
    {
        "id": "304e6480.fe3fac",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1351.000057220459,
        "y": 302.3333797454834,
        "wires": [
            [
                "642537e7.8e3128"
            ],
            [
                "8c4438a2.b4dad8"
            ]
        ]
    },
    {
        "id": "642537e7.8e3128",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/update_get_user_tasks?include_docs=true",
        "tls": "",
        "x": 1513.8333549499512,
        "y": 264.66673851013184,
        "wires": [
            [
                "71bd896f.388d68"
            ]
        ]
    },
    {
        "id": "8c4438a2.b4dad8",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1485.0000267028809,
        "y": 330.0000514984131,
        "wires": []
    },
    {
        "id": "71bd896f.388d68",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            filtred_result      = populate_filtred_result(filter, db_record.user_tasks),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: filtred_result};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n\n    for(var i = 0; i<task_list.length; i++){\n        for(var j=0; j<all_tasks.length; j++){\n            if(\n                task_list[i].user_id == all_tasks[j].user_id &&\n                task_list[i].task_id == all_tasks[j].task_id &&\n                task_list[i].page_id == all_tasks[j].page_id     \n            ){\n                all_tasks[j].synchronized = task_list[i].synchronized ;\n                all_tasks[j].status = task_list[i].status;\n                all_tasks[j].date_updated = task_list[i].date_updated;\n                all_tasks[j].count = task_list[i].count;\n                update_task.push(all_tasks[j]);   \n            }\n        }\n    }\n    \n    return update_task;\n}\n\nfunction populate_filtred_result(filter, user_tasks){\n    var obj = {}, filtred_res1 = [], filtred_res2 = [], filtred_res3 = [],filtred_res4 = [];\n    \n    if((\"synchronized\" in filter)){\n        obj.synchronized = parseInt(filter.synchronized) ;\n    }else{\n        obj.synchronized = 0;\n    }\n    \n    if((\"status\" in filter)){\n        obj.status = parseInt(filter.status) ;\n    }else{\n        obj.status = 0;\n    }\n\n    for(var itr = 0; itr<user_tasks.length; itr++ ){\n        if(\n            (obj.synchronized === user_tasks[itr].synchronized) &&\n            (obj.status === user_tasks[itr].status)\n        ){\n            filtred_res1.push([itr]);\n        }\n    }\n    \n    if(\"user_id\" in filter){\n        for(var i = 0; i<filtred_res1.length; i++ ){\n            if( filter.user_id === filtred_res1[i].user_id ){\n                filtred_res2.push(filtred_res1[i]);\n            }\n        }   \n    }else{\n        filtred_res2 = filtred_res1 ;\n    }\n    \n    if(\"task_id\" in filter){\n        for(var j = 0; j<filtred_res2.length; j++ ){\n            if( filter.task_id === filtred_res2[j].task_id ){\n                filtred_res3.push(filtred_res2[j]);\n            }\n        }   \n    }else{\n        filtred_res3 = filtred_res2 ;\n    }\n    \n    if(\"page_id\" in filter){\n        for(var k = 0; k<filtred_res3.length; k++ ){\n            if( filter.page_id == filtred_res3[k].page_id ){\n                filtred_res4.push(filtred_res3[k]);\n            }\n        }   \n    }else{\n        filtred_res4 = filtred_res3 ;\n    }\n    \n    return filtred_res4;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"users\"){\n            users.push(rows[i].doc);   \n        }\n        \n        if(rows[i].doc.table == \"user_task\"){\n            user_tasks.push(rows[i].doc);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1675.000057220459,
        "y": 268.00006675720215,
        "wires": [
            [
                "5f37c501.8ff77c"
            ]
        ]
    },
    {
        "id": "5f37c501.8ff77c",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1828.3333778381348,
        "y": 268.66669273376465,
        "wires": [
            [
                "c7f1c1c8.59328"
            ]
        ]
    },
    {
        "id": "c7f1c1c8.59328",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: msg.payload, data: null};\n}else{\n    msg.payload = msg.api_response;    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1967.0003700256348,
        "y": 268.3334102630615,
        "wires": [
            [
                "34b2327.9a933ce"
            ]
        ]
    },
    {
        "id": "34b2327.9a933ce",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2128.500026702881,
        "y": 269.66671562194824,
        "wires": []
    },
    {
        "id": "9ab7d9f2.89fc68",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "NOT IN  USE UPDATE_GET_USER_TASK",
        "info": "",
        "x": 1265.1666564941406,
        "y": 250.0000400543213,
        "wires": []
    },
    {
        "id": "4151b7c3.f7cfa8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate",
        "func": "var access_token = msg.payload_content.access_token,\n    task_id      = msg.payload_content.task_id;\nif(isEmpty(access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`access_token` is mising.\", data: null};\n}else if(isEmpty(task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`task_id` is mising.\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1206.5002746582031,
        "y": 453.00006103515625,
        "wires": [
            [
                "93323a2d.829028"
            ]
        ]
    },
    {
        "id": "e885a60f.39cf88",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_data_for_task endpoint",
        "info": "",
        "x": 1256.5001831054688,
        "y": 391.3333797454834,
        "wires": []
    },
    {
        "id": "93323a2d.829028",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1346.500254313151,
        "y": 451.0000432332357,
        "wires": [
            [
                "e9ae4e21.cd3d3"
            ],
            [
                "ee274f1a.c70b3"
            ]
        ]
    },
    {
        "id": "e9ae4e21.cd3d3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1474.500254313151,
        "y": 410.66673024495446,
        "wires": []
    },
    {
        "id": "ee274f1a.c70b3",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_task_related_data?include_docs=true",
        "tls": "",
        "x": 1495.500244140625,
        "y": 461.66673278808594,
        "wires": [
            [
                "f5476dc3.4f83d"
            ]
        ]
    },
    {
        "id": "f5476dc3.4f83d",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar payload = msg.payload ,\n    task_id = msg.payload_content.task_id;\n\nif(isEmpty(payload.rows)){\n    msg.payload     = {status: 400, error: true, msg: \"Unable to populate view to get_data_for_task.\", data: null};\n    return msg;\n}else{\n    msg.payload = {status:200, error:true, msg: \"Record fetched successfully.\", data: populate_db_record(payload.rows)};\n    return msg;\n}\n\n\nfunction populate_db_record(rows){\n    var template = [], task_table = [], timeout=[], location=[], users=[], task_obj={}; \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"template\"){\n            template.push(rows[i].doc);\n        }\n        \n        if(rows[i].doc.table == \"task_table\"){\n            if(rows[i].doc.page_id == task_id){\n                task_obj = rows[i].doc ;\n            }else{\n                task_table.push({\n                    id          : rows[i].doc._id,\n                    task_name   : rows[i].doc.task_name\n                });\n            }\n        }\n        \n        if(rows[i].doc.table == \"timeout\"){\n            timeout.push({\n                id     : rows[i].doc._id,\n                name   : rows[i].doc.name\n            });\n        }\n        \n        if(rows[i].doc.table == \"location\"){\n            location.push({\n                id          : rows[i].doc._id,\n                name        : rows[i].doc.location_name\n            });\n        }\n        \n        if(rows[i].doc.table == \"users\"){\n            users.push({\n                id          : rows[i].doc._id,\n                name        : formulate_name(rows[i].doc)\n            });\n        }\n    }\n    \n    return {\n      formatted_template: template,\n      formatted_task    : task_table,\n      formatted_timeout : timeout,\n      formatted_location: location,\n      formatted_user    : users,\n      task_obj          : task_obj\n    };\n}\n\nfunction formulate_name(obj){\n    var str = \"\";\n    if(obj.firstname){\n        str += obj.firstname;\n    }\n    \n    if(obj.lastname){\n        str += \" \"+ obj.lastname ;\n    }\n    \n    if(!str){\n        str = \"Anynomous User\";\n    }\n    \n    return str;\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1665.500254313151,
        "y": 456.3334172566732,
        "wires": [
            [
                "26c6644a.ea800c"
            ]
        ]
    },
    {
        "id": "26c6644a.ea800c",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1812.3336181640625,
        "y": 453.0000457763672,
        "wires": []
    },
    {
        "id": "12796874.e0f828",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_page endpoint",
        "info": "",
        "x": 1231.1666870117188,
        "y": 139.33334350585938,
        "wires": []
    },
    {
        "id": "a68f3e81.95d52",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "update_get_pages ",
        "func": "var access_token = msg.payload_content.access_token;\n\nif(isEmpty(access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is mising.\", data: msg.payload_content};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1230.833381652832,
        "y": 644.6667499542236,
        "wires": [
            [
                "2bd3da91.104616"
            ]
        ]
    },
    {
        "id": "aee26cf5.06819",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1542.8338623046875,
        "y": 610.666784286499,
        "wires": []
    },
    {
        "id": "2bd3da91.104616",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1406.8336181640625,
        "y": 645.0001583099365,
        "wires": [
            [
                "aee26cf5.06819"
            ],
            [
                "448d2c48.319d14"
            ]
        ]
    },
    {
        "id": "448d2c48.319d14",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "updated_get_pages View",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 1605.8336181640625,
        "y": 655.3334712982178,
        "wires": [
            [
                "4107fbed.f0bb14"
            ]
        ]
    },
    {
        "id": "4107fbed.f0bb14",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "var body            = msg.payload_content,\n    payload         = msg.payload,\n    page_id         = body.page_id ;\n    access_token    = body.access_token;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user with access_token\", data: null};\n        }else if( isEmpty(user_tasks) ){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user_task for this user.\", data: null};\n        }else{\n            msg.api_status = \"API_SUCCESS\";\n            if(isEmpty(body.user_task_list)){\n                msg.isUpdateUserTasks = false;\n            }else{\n                msg.url  = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task?key=[\"' + user_obj._id +'\"]';\n                msg.isUpdateUserTasks = true;\n            }\n            msg.payload = {status: 200, error:false, msg: \"Record fetched successfully\", data: populated_pages(user_tasks, db_record) };\n        }    \n    }\n    \nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [];\n\n    if(!isEmpty(page_id)){\n        var task = populate_taskobj(page_id, db_obj.tasks);\n        if(!isEmpty(task)){\n            var single_detail     =  populate_details(task._id, db_obj.details),\n            single_prepare_task   =  formulate_task(task, db_obj),\n            single_prepare_detail =  formulate_details(single_detail);  \n            \n            pages.push({\n               page_id : page_id,\n               user    : user_obj || {},\n               task    : single_prepare_task,\n               detail  : getpage(single_prepare_detail)\n            });\n        }\n    }\n\n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n    \n    return pages;\n}\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_record.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    for(var i =0; i<users.length; i++){\n        if(access_token === users[i].access_token){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1814.0001831054688,
        "y": 654.666784286499,
        "wires": [
            [
                "f19e5754.210198",
                "6acadba6.de4814"
            ]
        ]
    },
    {
        "id": "f19e5754.210198",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1986.8338012695312,
        "y": 706.0000972747803,
        "wires": []
    },
    {
        "id": "6acadba6.de4814",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "isUpdateUserTasks",
        "property": "isUpdateUserTasks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2024.5001831054688,
        "y": 652.3334102630615,
        "wires": [
            [
                "2e9f2b10.8a15d4"
            ]
        ]
    },
    {
        "id": "2e9f2b10.8a15d4",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2211.5005493164062,
        "y": 653.666784286499,
        "wires": [
            [
                "70475134.b5a74"
            ]
        ]
    },
    {
        "id": "70475134.b5a74",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "payload",
        "func": "var content          = msg.payload_content;\n    users_all_task   = msg.payload;\n\nvar updated_user_task = populate_updated_user_task(content.user_task_list, users_all_task);\nif(!isEmpty(updated_user_task)){\n    msg.payload = { \"docs\": updated_user_task };   \n}\nreturn msg;\n\nfunction populate_updated_user_task(user_task_list, users_all_task){\n    if(!isEmpty(user_task_list) && !isEmpty(user_task_list)){\n        var user_task = [];\n        \n        for(var i=0; i<users_all_task.length; i++){\n            for(j=0; j<user_task_list.length; i++){\n                if(\n                    (users_all_task[i].user_id == user_task_list[j].user_id) &&\n                    (users_all_task[i].task_id == user_task_list[j].task_id) &&\n                    (users_all_task[i].page_id == user_task_list[j].page_id)  \n                ){\n                    users_all_task[i].synchronized = 1 ;\n                    users_all_task[i].status       = 1 ;\n                    users_all_task[i].count        = user_task_list[j].count;\n                    users_all_task[i].date_updated = new Date().getTime();\n                    user_task.push(users_all_task);\n                }\n            }\n        }\n        return user_task ;\n    }else{\n        return null;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2371.8336791992188,
        "y": 653.3334712982178,
        "wires": [
            [
                "c4b54b65.01a2b8"
            ]
        ]
    },
    {
        "id": "c4b54b65.01a2b8",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2532.1669311523438,
        "y": 653.0000972747803,
        "wires": [
            [
                "b4d044f3.6326c8"
            ]
        ]
    },
    {
        "id": "b4d044f3.6326c8",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2696.1669311523438,
        "y": 654.666784286499,
        "wires": []
    },
    {
        "id": "7e6d9628.c836b8",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "Updated_get_pages endpoint",
        "info": "",
        "x": 1261.7656631469727,
        "y": 603.2500654856365,
        "wires": []
    }
]
