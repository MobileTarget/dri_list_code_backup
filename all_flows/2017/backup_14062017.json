[
    {
        "id": "505a09c5.621328",
        "type": "tab",
        "label": "Login API "
    },
    {
        "id": "ed7375e0.d65788",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "19d64182.cdd4de",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "a1c7b9eb.d6a108",
        "type": "tab",
        "label": "Test"
    },
    {
        "id": "6fbb9efc.acecd",
        "type": "tab",
        "label": "demo"
    },
    {
        "id": "a38007c3.b0ee68",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "2eb2b368.8322ec"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "2eb2b368.8322ec",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "a4a278a8.fe0848",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "f7272181.dd58e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "f7272181.dd58e",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "61a5aa7a.4c84c4",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "e6a2312.44f20d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "e6a2312.44f20d",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "75b71eb6.4ae56",
        "type": "websocket-listener",
        "z": "",
        "path": "",
        "wholemsg": "false"
    },
    {
        "id": "c4fcd744.cdabe8",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DoMeNowApp Twilio Service"
    },
    {
        "id": "df85784.deb9a88",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "+15103067839",
        "name": "Twilio Chatbot1"
    },
    {
        "id": "8256f452.e40578",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "+15103067839",
        "name": "Twilio Chatbot1"
    },
    {
        "id": "f21375e6.0c0388",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "b1b06246.0977a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1bd51bb9.ae7d24",
        "type": "ui_tab",
        "z": "",
        "name": "User Form Tab",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "b2135a9e.4c9988",
        "type": "ui_tab",
        "z": "",
        "name": "Template Form",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "b192884e.b0a068",
        "type": "ui_group",
        "z": "",
        "name": "Task",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "8f59afc3.dc37b",
        "type": "ui_tab",
        "z": "",
        "name": "Timeout Screen",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "f004ae97.62a33",
        "type": "ui_tab",
        "z": "",
        "name": "Detail Screen",
        "icon": "dashboard",
        "order": 6
    },
    {
        "id": "9a9b7181.f3ccf",
        "type": "ui_tab",
        "z": "",
        "name": "Big record table",
        "icon": "dashboard",
        "order": 7
    },
    {
        "id": "11c817eb.e94a08",
        "type": "ui_tab",
        "z": "",
        "name": "Task Screen",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "1aee3610.c8baea",
        "type": "mqtt-broker",
        "z": "",
        "broker": "test.mosquitto.com",
        "port": "8883",
        "clientid": "",
        "usetls": true,
        "verifyservercert": true,
        "compatmode": false,
        "keepalive": "15",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willRetain": null,
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": null,
        "birthPayload": ""
    },
    {
        "id": "5281de41.649f",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "76512216.4472ac",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "9cf87311.0014a",
        "type": "twilio-api",
        "z": "505a09c5.621328",
        "sid": "AC71948e10a2402ce138d9b46e789254b2",
        "from": "12317146495",
        "name": "Twilio SMS NoteToSelf"
    },
    {
        "id": "5e923e83.d5527",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "2eb2b368.8322ec",
        "type": "function",
        "z": "a38007c3.b0ee68",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f7272181.dd58e",
        "type": "function",
        "z": "a4a278a8.fe0848",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "e6a2312.44f20d",
        "type": "function",
        "z": "61a5aa7a.4c84c4",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "7186c287.a7506c",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "phone",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "d86876c3.a368d8"
            ]
        ]
    },
    {
        "id": "7803a4ba.36e64c",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "Going to save user if not found in db",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 287,
        "wires": []
    },
    {
        "id": "d58df840.89ee38",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\n\nmsg.verification_code = rand();\nmsg.access_token = token();\n\n\nif(isEmpty(db_data)) {\n    payload = {\n        table       : \"users\",\n        access_token:  msg.access_token,\n        phone       :  parseInt(user_data.phone),\n        virtual_phone: parseInt(user_data.phone),\n        security_level: 0,\n        code:         msg.verification_code,\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: \"\",\n        push_accepted: 0\n    };\n}\nelse {\n    payload ={\n      _id               : db_data[0]._id,\n      _rev              : db_data[0]._rev,\n      table             : \"users\",\n      long_url          : db_data[0].long_url || \"\",\n      access_token      : msg.access_token,\n      security_level    : db_data[0].security_level ,\n      phone             : db_data[0].phone || parseInt(user_data.phone) ,\n      virtual_phone     : db_data[0].virtual_phone || parseInt(user_data.phone),\n      email             : db_data[0].email || \"\",\n      converstation_id  : db_data[0].converstation_id || \"\",\n      firstname         : db_data[0].firstname || \"\",\n      lastname          : db_data[0].lastname || \"\",\n      code              : msg.verification_code,\n      password          : db_data[0].password || \"\",\n      image             : db_data[0].image || \"\",\n      type              : db_data[0].type ,\n      device_id         : db_data[0].device_id,\n      push_accepted     : db_data[0].push_accepted\n    };\n}\n\nmsg.security_level = payload.security_level ;\nmsg.payload = payload;\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "7803a4ba.36e64c",
                "b75807ef.c8af88",
                "426e5187.75c3d"
            ]
        ]
    },
    {
        "id": "61e00bf5.7542f4",
        "type": "http in",
        "z": "505a09c5.621328",
        "name": "",
        "url": "/api/login",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "db69296f.28fea8",
                "b77a7a77.4d7c98"
            ]
        ]
    },
    {
        "id": "db69296f.28fea8",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "7186c287.a7506c"
            ]
        ]
    },
    {
        "id": "d86876c3.a368d8",
        "type": "cloudant in",
        "z": "505a09c5.621328",
        "name": "get user by phone",
        "cloudant": "76512216.4472ac",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "de85adbc.6754"
            ]
        ]
    },
    {
        "id": "de85adbc.6754",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "d58df840.89ee38"
            ]
        ]
    },
    {
        "id": "426e5187.75c3d",
        "type": "cloudant out",
        "z": "505a09c5.621328",
        "name": "save user to db",
        "cloudant": "76512216.4472ac",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "c3b5731.5c1fc9",
        "type": "http in",
        "z": "505a09c5.621328",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 102,
        "y": 763,
        "wires": [
            [
                "42191b01.3a5b14",
                "2c072fa6.f5b59"
            ]
        ]
    },
    {
        "id": "42191b01.3a5b14",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 327,
        "y": 764,
        "wires": [
            [
                "e56e2da1.ba451"
            ]
        ]
    },
    {
        "id": "e56e2da1.ba451",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. access_token",
        "func": "if(isEmpty(msg.request_data.access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.code)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`code` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.device_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`device_id` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.push_accepted)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`push_accepted` is required to fullfil request\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.access_token = msg.request_data.access_token; \n    msg.payload = {\n        query: \"table: users AND access_token:\"+ msg.request_data.access_token\n    };    \n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 527,
        "y": 764,
        "wires": [
            [
                "12f5e63c.6ad31a"
            ]
        ]
    },
    {
        "id": "b75807ef.c8af88",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "security_level",
        "property": "security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "c73b58c0.0a4d18"
            ],
            [
                "8c38552f.3e1b78"
            ]
        ]
    },
    {
        "id": "8c38552f.3e1b78",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. return menu page",
        "func": "//node.warn(\"comes in this case.....\");\nvar response = {\n    \"page_id\":      2,\n    \"access_token\": msg.access_token\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 673,
        "y": 442,
        "wires": [
            [
                "dd88b5c9.2e1168",
                "3ea3a102.57f93e"
            ]
        ]
    },
    {
        "id": "3ea3a102.57f93e",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 933,
        "y": 480,
        "wires": []
    },
    {
        "id": "f7ec356e.eb9568",
        "type": "cloudant in",
        "z": "505a09c5.621328",
        "name": "get user by token",
        "cloudant": "76512216.4472ac",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 908.9999694824219,
        "y": 802.0000305175781,
        "wires": [
            [
                "b426c1f6.f09e8"
            ]
        ]
    },
    {
        "id": "b426c1f6.f09e8",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 209,
        "y": 844,
        "wires": [
            [
                "4924a8d8.356e18"
            ]
        ]
    },
    {
        "id": "4924a8d8.356e18",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].virtual_phone).length == 4){\n        if(request_data.code == 1234){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].virtual_phone).length > 7 &&  String(db_data[0].virtual_phone).length <= 12){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 844,
        "wires": [
            [
                "74d84c05.9f6ee4"
            ]
        ]
    },
    {
        "id": "b7b07cb6.8ee87",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 989,
        "y": 1004,
        "wires": []
    },
    {
        "id": "74d84c05.9f6ee4",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 249,
        "y": 924,
        "wires": [
            [
                "45c09b7.5237264"
            ],
            [
                "8e411c33.cb121"
            ]
        ]
    },
    {
        "id": "f46a8552.d393f8",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  2,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 759,
        "y": 944,
        "wires": [
            [
                "b7b07cb6.8ee87",
                "f98b5651.131558"
            ]
        ]
    },
    {
        "id": "5740c095.59b7d",
        "type": "cloudant out",
        "z": "505a09c5.621328",
        "name": "update security level",
        "cloudant": "76512216.4472ac",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 779,
        "y": 884,
        "wires": []
    },
    {
        "id": "45c09b7.5237264",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0] ,\n    body    = msg.request_data ;\n\ndb_data.security_level = 1 ;\ndb_data.device_id = body.device_id ;\ndb_data.push_accepted = parseInt(body.push_accepted) || 1 ;\n\nmsg.payload = db_data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 924,
        "wires": [
            [
                "f46a8552.d393f8",
                "5740c095.59b7d"
            ]
        ]
    },
    {
        "id": "8e411c33.cb121",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 1004,
        "wires": [
            [
                "b7b07cb6.8ee87",
                "c4cdcc73.d3fdd"
            ]
        ]
    },
    {
        "id": "b77a7a77.4d7c98",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 293,
        "y": 133,
        "wires": []
    },
    {
        "id": "2c072fa6.f5b59",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326,
        "y": 703,
        "wires": []
    },
    {
        "id": "dd88b5c9.2e1168",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "menu page",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 934,
        "y": 429,
        "wires": []
    },
    {
        "id": "c73b58c0.0a4d18",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "11. return verify page & ac",
        "func": "var req_body = msg.user_data ;\nif(msg.user_data.phone){\n  \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"access_token\": msg.access_token,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "ad522d0c.dc4ab"
            ]
        ]
    },
    {
        "id": "ad522d0c.dc4ab",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "137fa500.6fb9bb"
            ],
            [
                "b0ff54bd.8a8f28"
            ]
        ]
    },
    {
        "id": "137fa500.6fb9bb",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = \"Your verification code for the DoMeNow app is : \" + code;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "749c447d.38ea4c",
                "47e61224.2060ec",
                "3334fe5e.960e52"
            ]
        ]
    },
    {
        "id": "47e61224.2060ec",
        "type": "twilio out",
        "z": "505a09c5.621328",
        "service": "_ext_",
        "twilio": "c4fcd744.cdabe8",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "749c447d.38ea4c",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "73d92033.6eb02",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "3334fe5e.960e52",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "73d92033.6eb02"
            ]
        ]
    },
    {
        "id": "b0ff54bd.8a8f28",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "b7263275.e082d",
                "453bf294.25fdcc"
            ]
        ]
    },
    {
        "id": "b7263275.e082d",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "453bf294.25fdcc",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "b601694f.9c35b8",
        "type": "http in",
        "z": "ed7375e0.d65788",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 219,
        "y": 291,
        "wires": [
            [
                "a7cda715.0b2778",
                "3c3ab5f7.c5b22a"
            ]
        ]
    },
    {
        "id": "a7cda715.0b2778",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Handler",
        "func": "var req = msg.payload;\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.req_body = msg.payload;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 411,
        "y": 291,
        "wires": [
            [
                "5a2220ef.96fb9"
            ]
        ]
    },
    {
        "id": "5a2220ef.96fb9",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 574,
        "y": 291,
        "wires": [
            [
                "1dc76b1a.e5bc65"
            ],
            [
                "34cfd307.165fcc"
            ]
        ]
    },
    {
        "id": "1dc76b1a.e5bc65",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 716,
        "y": 253,
        "wires": []
    },
    {
        "id": "34cfd307.165fcc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate body",
        "func": "var body = msg.payload;\nnode.warn(body);\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n    msg.access_token  = body.access_token ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 735,
        "y": 309,
        "wires": [
            [
                "81b06213.81043"
            ]
        ]
    },
    {
        "id": "81b06213.81043",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 908,
        "y": 309,
        "wires": [
            [
                "fbf18955.7cd068"
            ],
            [
                "411c8f47.fbd3b"
            ]
        ]
    },
    {
        "id": "fbf18955.7cd068",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1056,
        "y": 265,
        "wires": []
    },
    {
        "id": "411c8f47.fbd3b",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "template",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "task_table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "location",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 11,
        "x": 1069,
        "y": 566,
        "wires": [
            [
                "9e3f04e8.fb4808"
            ],
            [
                "8d5f0962.f05e08"
            ],
            [
                "12edb1e8.252dbe"
            ],
            [
                "294f345d.abeb6c"
            ],
            [
                "b70f4949.fcfda8"
            ],
            [
                "36478db.de18072"
            ],
            [
                "4ff506b2.169578"
            ],
            [
                "44c2518e.ef865"
            ],
            [
                "5df254a7.85e2cc"
            ],
            [
                "e4a95d10.a73ea"
            ],
            [
                "2f4d9fc7.859d7"
            ]
        ]
    },
    {
        "id": "9e3f04e8.fb4808",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "User Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table               : body.table,\n    long_url            : null,\n    access_token        : access_token(),\n    security_level      : body.security_level || 0,\n    virtual_phone       : body.phone,\n    email               : body.email,\n    converstation_id    : null,\n    firstname           : body.firstname,\n    lastname            : body.firstname,\n    code                : 1234,\n    password            : body.password,\n    image               : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction rand() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n}\n\nfunction time() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n}\n\nfunction access_token() {\n    return time()+'.'+rand(); // to make it longer\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1298,
        "y": 84,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "8d5f0962.f05e08",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Template Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    _id         : body.table_data._id,\n    table       : body.table,\n    name        : body.table_data.name || \"\",\n    html        : body.table_data.html || \"\",\n    js          : body.table_data.js   || \"\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1307,
        "y": 167,
        "wires": [
            [
                "23a83251.96a8ce",
                "8ab5b587.e855e8"
            ]
        ]
    },
    {
        "id": "12edb1e8.252dbe",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Task Table",
        "func": "var body        = msg.req_body.table_data,\n    table_name  = msg.req_body.table,\n    page_id     = generate_page_id();\n\nmsg.payload = {\n    _id                     : body._id,\n    table                   : table_name, \n    task_name               : body.name || \"\", \n    page_id                 : page_id, \n    from_page_id            : page_id,\n    parent_id               : page_id, \n    user_id                 : body.user_id || \"\",\n    header_template_id      : body.header_template_id || \"\",\n    detail_template_id      : body.details_template_id || \"\",\n    footer_template_id      : body.footer_template_id || \"\",\n    timeout_id              : body.timeout_id || \"\",\n    location_id             : body.location_id || \"\",\n    child_default_task_id   : body.child_default_task_id || \"\",\n    child_default_task_name : body.child_default_task_name || \"\",\n    date_created            : body.date_created || new Date().toJSON(),\n    status                  : body.status || 0,\n    category                : body.category || \"\",\n    additional_data_fn      : body.additional_data_fn || \"\",\n    optional_data           : body.optional_data || {},\n    required_data           : body.required_data || {},\n    offline_expiration_time : body.offline_expiration_time || 0,\n    display_if_empty        : body.display_if_empty || 1 ,\n    type                    : {\n        public              : body.type  || \"public\"\n    },\n    image                   : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n    count_status\t: {\n\t   active       : 1,\n\t   unread       : 0,\n\t},\n\tcount\t\t\t: {\n\t    active      : 1,\n\t    unread      : 0,\n\t},\n\tcount_if\t\t: {\n\t    active      : 1,\n\t    unread      : 0\n\t},\n    defaults                : {\n        parent              : null,\n        next_child          : null,\n        all_children        : null,\n        user                : body.user_id\n    }\n    \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction generate_page_id() {\n    return new Date().getTime();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1299,
        "y": 254,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "294f345d.abeb6c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Timeout Table",
        "func": "var body        = msg.req_body ,\n    table_name  = msg.req_body.table;\nmsg.payload = {\n    table: table_name,\n    name: msg.timeout_data.name || \"\",\n    timeout_list: create_delivery_obj(body) \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction create_delivery_obj(body){\n    var obj = {};\n    var user_id = body.delivery_user_ids ? body.delivery_user_ids.split(',') : \"\";\n    \n    for(var i=0; i < body.delivery_count; i++){\n        obj[i] = {\n            delivery_count      : i , \n            delivery_status     :   body.delivery_status || 0, \n            delivery_due        :   body.delivery_due || new Date.toJSON(),\n            delivery_user_ids   :   user_id[i] ? user_id[i] : body.delivery_user_ids,\n            delivery_via        :   body.delivery_via || \"\",\n            delivery_task_id    :   body.delivery_task_id || \"\",\n            delivery_task_name  :   body.delivery_task_name || \"\", \n            message_id          :   body.message_id || \"\",\n            from_user_id        :   body.from_user_id || \"\"\n        };\n    }\n    return obj ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1312,
        "y": 343,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "b70f4949.fcfda8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Location Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table         : body.table,\n    location_name : body.name,\n    location_type : body.type,\n    location_data : {\n        lat : body.lat ? Number(body.lat) : 0,\n        lon : body.lon ? Number(body.lon) : 0,\n        dist: body.dist ? Number(body.dist) : 0,\n        web: body.web || \"\"\n    }\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1311,
        "y": 443,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "36478db.de18072",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1298,
        "y": 545,
        "wires": [
            [
                "57bec002.50ae8"
            ]
        ]
    },
    {
        "id": "2f4d9fc7.859d7",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1315.0000305175781,
        "y": 1095.0000610351562,
        "wires": [
            [
                "d7abc0d3.b641c"
            ]
        ]
    },
    {
        "id": "d7abc0d3.b641c",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1503.0000305175781,
        "y": 1108.0000610351562,
        "wires": []
    },
    {
        "id": "8ab5b587.e855e8",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Master Table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1757,
        "y": 209.99999523162842,
        "wires": []
    },
    {
        "id": "3c3ab5f7.c5b22a",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 420,
        "y": 219,
        "wires": []
    },
    {
        "id": "8621ee44.0309",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1939,
        "y": 270,
        "wires": []
    },
    {
        "id": "23a83251.96a8ce",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 269,
        "wires": [
            [
                "8621ee44.0309"
            ]
        ]
    },
    {
        "id": "ca9bd935.3bb1e8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = msg.child_task ? msg.child_task[0] : null,\n    timeout             = msg.timeout ? msg.timeout[0] : null ,\n    location            = msg.location ? msg.location[0] : null,\n    user                = msg.user_obj ? msg.user_obj[0] : null ,\n    task                = msg.task_obj ? msg.task_obj[0] : null,\n    user_arr            = msg.user_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n     \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id || null;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = return_page_id(form_data.page_id);\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\n                                            \"public\" : task.type || \"public\"\n                                        };\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\ndetail.watson_incoming                  = {\n                                            message :   \"Watson response to : \" + form_data.note,\n                                            response : {},\n                                            \n                                        } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\">>>>>>>>>>>>>>>>>>>>>>> set_from_user\");\n        // node.warn(item);\n        return item[0] ;\n    }else{\n        // node.warn(\"set_from_user else case\");\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\"check_need_to_create_second_detail >>>>\");\n        // node.warn(item);\n        return true ;\n    }else{\n        // node.warn(\"else case >>>>\");\n        return false ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2323.03125,
        "y": 404.046875,
        "wires": [
            [
                "13870ef9.5fbe41",
                "187b3892.b9f7d7",
                "bac4821c.f56c7",
                "ccf2e209.e5bcb"
            ]
        ]
    },
    {
        "id": "9cfb060b.237ad8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"There isn't any Location for task obj\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2964.03125,
        "y": 303.046875,
        "wires": [
            [
                "ca9bd935.3bb1e8"
            ]
        ]
    },
    {
        "id": "a61e3eac.d55ec",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "location",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3378.03125,
        "y": 362.046875,
        "wires": [
            [
                "ca9bd935.3bb1e8"
            ]
        ]
    },
    {
        "id": "13870ef9.5fbe41",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2521.03125,
        "y": 521.046875,
        "wires": [
            [
                "c404a53d.0210f8"
            ],
            [
                "b429bd3f.1824d"
            ]
        ]
    },
    {
        "id": "388b759a.d94a6a",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "location",
        "property": "location_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2827.03125,
        "y": 309.046875,
        "wires": [
            [
                "9cfb060b.237ad8"
            ],
            [
                "1c8d505b.9922"
            ]
        ]
    },
    {
        "id": "830362c9.3db01",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3156.03125,
        "y": 360.046875,
        "wires": [
            [
                "a61e3eac.d55ec"
            ]
        ]
    },
    {
        "id": "c404a53d.0210f8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2697.03125,
        "y": 542.046875,
        "wires": [
            [
                "fccd2e2e.9bb7b"
            ]
        ]
    },
    {
        "id": "b429bd3f.1824d",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : default_task.user_id || null,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || null,\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2718.03125,
        "y": 584.046875,
        "wires": [
            [
                "fccd2e2e.9bb7b"
            ]
        ]
    },
    {
        "id": "a0e8242.98bd5d8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"There isn't any timeout for this task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2368.03125,
        "y": 300.046875,
        "wires": [
            [
                "388b759a.d94a6a"
            ]
        ]
    },
    {
        "id": "44ef3460.59f8dc",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2735.03125,
        "y": 356.046875,
        "wires": [
            [
                "388b759a.d94a6a"
            ]
        ]
    },
    {
        "id": "1c8d505b.9922",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "location",
        "func": "msg.payload = {\n    query: \"table:location AND _id:\" + msg.location_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2971.03125,
        "y": 362.046875,
        "wires": [
            [
                "830362c9.3db01"
            ]
        ]
    },
    {
        "id": "fccd2e2e.9bb7b",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2880.03125,
        "y": 555.046875,
        "wires": [
            [
                "98d99176.63373",
                "bb1187b6.23d9d8"
            ],
            [
                "d9c4862f.8053d8",
                "98d99176.63373"
            ]
        ]
    },
    {
        "id": "38b87748.c0c0a8",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "property": "timeout_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2224.03125,
        "y": 307.046875,
        "wires": [
            [
                "a0e8242.98bd5d8"
            ],
            [
                "e753aa93.5fbf18"
            ]
        ]
    },
    {
        "id": "fe726396.01143",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2562.03125,
        "y": 357.046875,
        "wires": [
            [
                "44ef3460.59f8dc"
            ]
        ]
    },
    {
        "id": "98d99176.63373",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 541.046875,
        "wires": [
            [
                "d104fb73.6fe968"
            ]
        ]
    },
    {
        "id": "d9c4862f.8053d8",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "Optional task log",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3073.03125,
        "y": 582.046875,
        "wires": []
    },
    {
        "id": "e2a27bcd.4580c8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"there isn't any child default_task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 203.046875,
        "wires": [
            [
                "38b87748.c0c0a8"
            ]
        ]
    },
    {
        "id": "596f0b62.9292c4",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "child_task",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "child_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3669.03125,
        "y": 258.046875,
        "wires": [
            [
                "38b87748.c0c0a8"
            ]
        ]
    },
    {
        "id": "e753aa93.5fbf18",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "func": "msg.payload = {\n    query: \"table:timeout AND _id:\" + msg.timeout_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2378.03125,
        "y": 358.046875,
        "wires": [
            [
                "fe726396.01143"
            ]
        ]
    },
    {
        "id": "d104fb73.6fe968",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3470.03125,
        "y": 539.046875,
        "wires": [
            [
                "9aa66a3c.033358"
            ],
            [
                "d79adc8b.3221b"
            ]
        ]
    },
    {
        "id": "2888bc9d.d2d6d4",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "child_task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3123.03125,
        "y": 227.046875,
        "wires": [
            [
                "e2a27bcd.4580c8"
            ],
            [
                "4f9da4ac.bb86cc"
            ]
        ]
    },
    {
        "id": "cea484bb.83f458",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3467.03125,
        "y": 259.046875,
        "wires": [
            [
                "596f0b62.9292c4"
            ]
        ]
    },
    {
        "id": "84714b41.e34418",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3626.03125,
        "y": 479.046875,
        "wires": [
            [
                "d104fb73.6fe968"
            ]
        ]
    },
    {
        "id": "9aa66a3c.033358",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n  msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3690.03125,
        "y": 533.046875,
        "wires": [
            [
                "84714b41.e34418",
                "96b20269.d836f"
            ]
        ]
    },
    {
        "id": "d79adc8b.3221b",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3664.03125,
        "y": 585.046875,
        "wires": [
            [
                "4e2e30c.bbb54d",
                "3bf5ab50.5f6c94"
            ]
        ]
    },
    {
        "id": "7b8ede79.ee466",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2953.03125,
        "y": 169.046875,
        "wires": [
            [
                "6fa94d00.794ca4"
            ],
            [
                "2888bc9d.d2d6d4"
            ]
        ]
    },
    {
        "id": "4f9da4ac.bb86cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "child task",
        "func": "msg.payload = {\n    query : \"table:task_table AND _id:\" + msg.child_task_id \n};\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3280.03125,
        "y": 260.046875,
        "wires": [
            [
                "cea484bb.83f458"
            ]
        ]
    },
    {
        "id": "4e2e30c.bbb54d",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3901.03125,
        "y": 565.046875,
        "wires": []
    },
    {
        "id": "f30f4099.a5917",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var task = msg.task_obj , user = msg.user_obj, detail = msg.details_obj;\n\nif(isEmpty(task)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n}else if(isEmpty(user)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.child_task_id   = msg.task_obj[0].child_default_task_id || null;\n    msg.timeout_id      = msg.task_obj[0].timeout_id || null;\n    msg.location_id     = msg.task_obj[0].location_id || null;\n}\nreturn msg;\n\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2790.03125,
        "y": 178.046875,
        "wires": [
            [
                "7b8ede79.ee466"
            ]
        ]
    },
    {
        "id": "6fa94d00.794ca4",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 3129.03125,
        "y": 173.046875,
        "wires": []
    },
    {
        "id": "3fa3c681.7b937a",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "user arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3375.03125,
        "y": 38.046875,
        "wires": [
            [
                "d4a95cf7.4b6d4"
            ]
        ]
    },
    {
        "id": "7edc9154.bf3f8",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3217.03125,
        "y": 32.046875,
        "wires": [
            [
                "3fa3c681.7b937a"
            ]
        ]
    },
    {
        "id": "9ecf65af.3de7e8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort: \"_id<string>\"\n};\n\nmsg.detail_payload = {\n    query: \"table:details\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3052.03125,
        "y": 32.046875,
        "wires": [
            [
                "7edc9154.bf3f8"
            ]
        ]
    },
    {
        "id": "ce8e3ccf.e5702",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "user_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2894.03125,
        "y": 33.046875,
        "wires": [
            [
                "9ecf65af.3de7e8"
            ]
        ]
    },
    {
        "id": "5eadacce.7fa8a4",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2720.03125,
        "y": 34.046875,
        "wires": [
            [
                "ce8e3ccf.e5702"
            ]
        ]
    },
    {
        "id": "bfcdfc52.7337",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "user_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2552.0313720703125,
        "y": 35.046875,
        "wires": [
            [
                "5eadacce.7fa8a4"
            ]
        ]
    },
    {
        "id": "d7d5c8e0.48a7a8",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "task_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2390.0313720703125,
        "y": 35.046875,
        "wires": [
            [
                "bfcdfc52.7337"
            ]
        ]
    },
    {
        "id": "9c1674f8.1d4728",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2223.03125,
        "y": 35.046875,
        "wires": [
            [
                "d7d5c8e0.48a7a8"
            ]
        ]
    },
    {
        "id": "f3355043.b4df1",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1949.03125,
        "y": 413.046875,
        "wires": [
            [
                "9c1674f8.1d4728"
            ]
        ]
    },
    {
        "id": "57bec002.50ae8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var access_token = msg.payload.access_token ;\nvar table_data = msg.payload.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_payload = { \n        query: \"table:task_table AND _id:\" + table_data.task_id \n    };\n    msg.user_payload = {\n        query: \"table:users AND access_token:\" + access_token \n    };\n    msg.page_payload = {\n        query: \"table:details AND page_id:\" + table_data.page_id  \n    };\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.03125,
        "y": 466.046875,
        "wires": [
            [
                "b6af2672.99e958"
            ]
        ]
    },
    {
        "id": "d2b55e61.08c28",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "template",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "9ddec7b3.c16d78"
            ]
        ]
    },
    {
        "id": "9ddec7b3.c16d78",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "Templates",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2393.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "b79eeb98.78a8a8"
            ]
        ]
    },
    {
        "id": "b79eeb98.78a8a8",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "template arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "templates_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2614.2734375,
        "y": 176.9921875,
        "wires": [
            [
                "f30f4099.a5917",
                "bb57deaa.48c82"
            ]
        ]
    },
    {
        "id": "5de3d290.17c0cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n    \n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 0,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id\n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4253.03125,
        "y": 621.046875,
        "wires": [
            [
                "d41f48b0.7f1228",
                "f2def268.f5a43"
            ]
        ]
    },
    {
        "id": "3bf5ab50.5f6c94",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3873.03125,
        "y": 624.046875,
        "wires": [
            [
                "c8e96c2e.712a2"
            ]
        ]
    },
    {
        "id": "c8e96c2e.712a2",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4039.03125,
        "y": 623.046875,
        "wires": [
            [
                "5de3d290.17c0cc"
            ]
        ]
    },
    {
        "id": "b6af2672.99e958",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1744,
        "y": 385,
        "wires": [
            [
                "cc9156dd.e6c9d8"
            ],
            [
                "f3355043.b4df1"
            ]
        ]
    },
    {
        "id": "cc9156dd.e6c9d8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1942,
        "y": 355,
        "wires": []
    },
    {
        "id": "d41f48b0.7f1228",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "User Task",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4467,
        "y": 552,
        "wires": []
    },
    {
        "id": "96b20269.d836f",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3911,
        "y": 515,
        "wires": []
    },
    {
        "id": "bb1187b6.23d9d8",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Optional Task",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3061,
        "y": 522,
        "wires": []
    },
    {
        "id": "187b3892.b9f7d7",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2503,
        "y": 438,
        "wires": []
    },
    {
        "id": "bac4821c.f56c7",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2541,
        "y": 478,
        "wires": [
            [
                "7f94322.34c74cc"
            ]
        ]
    },
    {
        "id": "7f94322.34c74cc",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2697,
        "y": 499,
        "wires": []
    },
    {
        "id": "5ce6fa8f.341204",
        "type": "http in",
        "z": "19d64182.cdd4de",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "659155ee.00678c"
            ]
        ]
    },
    {
        "id": "659155ee.00678c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.req_params = req;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "d85ce3d9.c8439"
            ]
        ]
    },
    {
        "id": "d85ce3d9.c8439",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "657493ec.dc15ac"
            ],
            [
                "7ab1f39.b0caa0c"
            ]
        ]
    },
    {
        "id": "657493ec.dc15ac",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 569.7655944824219,
        "y": 241.74999237060547,
        "wires": []
    },
    {
        "id": "7ab1f39.b0caa0c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    var obj = populate_content(params.content) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n    }else{\n        msg.payload_type    = params.type ;\n        msg.payload_content = obj.data ;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    console.log(\"obj >>>\", obj);\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "516cd8a3.2c7188"
            ]
        ]
    },
    {
        "id": "516cd8a3.2c7188",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "a0d5da84.f02398"
            ],
            [
                "ba2f65af.6e4b88"
            ]
        ]
    },
    {
        "id": "a0d5da84.f02398",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 942.7655944824219,
        "y": 286.74999237060547,
        "wires": []
    },
    {
        "id": "ba2f65af.6e4b88",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_user_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_location",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_templates",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 11,
        "x": 787.765625,
        "y": 688.75,
        "wires": [
            [
                "931d3641.cc78b8"
            ],
            [
                "1dd3ea1c.8ec786"
            ],
            [
                "474671ce.062f3"
            ],
            [
                "ef75de0.d20e52"
            ],
            [
                "1ed4113a.a9737f"
            ],
            [
                "6f573c03.ac1344"
            ],
            [
                "574ce932.9a2578"
            ],
            [
                "22c60329.daa0fc"
            ],
            [
                "f04eed2.3cdca1"
            ],
            [
                "ef28fcd4.2cf89"
            ],
            [
                "2e3b2403.b34c6c"
            ]
        ]
    },
    {
        "id": "931d3641.cc78b8",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1231.3828125,
        "y": 192.9882583618164,
        "wires": [
            [
                "ce38b993.406038"
            ]
        ]
    },
    {
        "id": "ce38b993.406038",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1397.37890625,
        "y": 95.91796875,
        "wires": [
            [
                "a795f11e.e3a25"
            ],
            [
                "f9a15130.bc60a"
            ]
        ]
    },
    {
        "id": "a795f11e.e3a25",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1622.390625,
        "y": 27.1484375,
        "wires": []
    },
    {
        "id": "f9a15130.bc60a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate page",
        "func": "var params = msg.payload_content ;\n\nmsg.payload = {\n    query: \"table:users AND access_token:\" + params.access_token\n};\n//node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1651.1328125,
        "y": 91,
        "wires": [
            [
                "cacad2c6.c0e4c"
            ]
        ]
    },
    {
        "id": "cacad2c6.c0e4c",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1814.125,
        "y": 177.0625,
        "wires": [
            [
                "fcbf2e9d.f122c"
            ]
        ]
    },
    {
        "id": "fcbf2e9d.f122c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "security",
        "func": "var user = msg.payload ;\n\nif(isEmpty(user)){\n    msg.userStatus = \"invalid\" ;\n}else{\n    msg.isNewUser = false;\n    var security_level = user[0].security_level;\n    \n    if(parseInt(security_level) === 0){\n        msg.userStatus = \"verify\" ;\n    }else{\n        msg.userStatus = \"valid\" ;\n        msg.userObj = {\n            user_id   : user[0]._id ,\n            firstname : user[0].firstname ? user[0].firstname : \"\" ,\n            lastname  : user[0].lastname ? user[0].lastname : \"\", \n            email     : user[0].email ? user[0].email : \"\" ,\n            phone     : user[0].phone || \"\" , \n            virtual_phone     : user[0].virtual_phone ? user[0].virtual_phone: \"\",\n            type      : user[0].type || {}\n        } ;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1978.1328125,
        "y": 177.48828125,
        "wires": [
            [
                "1dd23ac9.800665"
            ]
        ]
    },
    {
        "id": "1dd23ac9.800665",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "userStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 2117.62890625,
        "y": 179.4296875,
        "wires": [
            [
                "23815642.3d669a"
            ],
            [
                "31239e35.d60112"
            ],
            [
                "84589a1a.2cef78"
            ]
        ]
    },
    {
        "id": "23815642.3d669a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page=1",
        "func": "msg.payload = {\n    query: \"table:task_table AND _id:1_0\",\n    sort: \"_id<string>\"\n};\nmsg.payload_content.page_id = 1 ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2314.136693902314,
        "y": 99.49609375,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "31239e35.d60112",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page=11",
        "func": "msg.payload = {\n    query: \"table:task_table AND _id:11_0\",\n    sort : \"_id<string>\"\n};\nmsg.payload_content.page_id = 11 ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2312.140625,
        "y": 170.48828125,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "84589a1a.2cef78",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page",
        "func": "if(msg.payload_content.page_id.page_id === undefined){\n    msg.payload = {\n        query: \"table:task_table AND page_id:\" +  msg.payload_content.page_id,\n        sort : \"_id<string>\"\n    };    \n}else{\n    msg.payload = {\n        query: \"table:task_table AND page_id:\" +  msg.payload_content.page_id.page_id,\n        sort : \"_id<string>\"\n    };    \n}\n\nnode.warn(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2305.12890625,
        "y": 249.5,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "7d6c5e7a.7cb09",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2489.833251953125,
        "y": 172.66665649414062,
        "wires": [
            [
                "f36c8ac9.38ce18"
            ]
        ]
    },
    {
        "id": "f36c8ac9.38ce18",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate_record",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status : 400, error: true, msg: \"Unable to get the page with the `page_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj = msg.payload[0];\n    msg.payload = {\n        query : \"table:details AND task_id:\" + msg.task_obj._id ,\n        sort  : \"_id<string>\"\n    };\n    node.warn(msg.payload);\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2685.83349609375,
        "y": 173.99999237060547,
        "wires": [
            [
                "7a03e152.5cdc4"
            ]
        ]
    },
    {
        "id": "c80b6939.11c258",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2651.833251953125,
        "y": 250.66663360595703,
        "wires": []
    },
    {
        "id": "7a03e152.5cdc4",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2493.166748046875,
        "y": 269.00000762939453,
        "wires": [
            [
                "c80b6939.11c258"
            ],
            [
                "1aed670.0607b99"
            ]
        ]
    },
    {
        "id": "1aed670.0607b99",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2654.16650390625,
        "y": 305.99999237060547,
        "wires": [
            [
                "44519a7.1aa2e64"
            ]
        ]
    },
    {
        "id": "44519a7.1aa2e64",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "template_payload",
        "func": "// if(isEmpty(msg.payload)){\n//     msg.api_status  = \"API_ERROR\";\n//     msg.payload     = {status: 400, error: true, msg: \"unable to fetch task_obj using page_id\", data: null};\n// }else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.detail    = msg.payload || [];\n    msg.payload     = {\n        query   : \"table:template\",\n        sort    : \"_id<string>\" \n    };\n//}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2850.1669921875,
        "y": 304.3333435058594,
        "wires": [
            [
                "6b2572d.d79ad8c"
            ]
        ]
    },
    {
        "id": "6b2572d.d79ad8c",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3030.5,
        "y": 291,
        "wires": [
            [
                "ee36d1de.0acb9"
            ],
            [
                "1ee53bd5.12ae84"
            ]
        ]
    },
    {
        "id": "ee36d1de.0acb9",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 3184.50048828125,
        "y": 233.33334350585938,
        "wires": []
    },
    {
        "id": "1ee53bd5.12ae84",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3193.500244140625,
        "y": 301.6666564941406,
        "wires": [
            [
                "923207e7.5ed858"
            ]
        ]
    },
    {
        "id": "71044f78.6770a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "prepare taskObj",
        "func": "var template_data       = msg.tempteObj ,\n    task_data           = msg.task_obj,\n    templateObj         = {},\n    header_template_id  = task_data.header_template_id,\n    detail_template_id  = task_data.detail_template_id,\n    footer_template_id  = task_data.footer_template_id;\n    \nif(msg.payload_content.page_id.page_id === undefined){\n    var page_id         = msg.payload_content.page_id;    \n}else{\n    var page_id         = msg.payload_content.page_id.page_id;    \n}\n\n\nfor(var ind=0; ind<template_data.length; ind++){\n    if(header_template_id == template_data[ind]._id){\n        templateObj.header = template_data[ind];\n    }\n    if(detail_template_id == template_data[ind]._id){\n        templateObj.detail = template_data[ind];\n    }\n    if(footer_template_id == template_data[ind]._id){\n        templateObj.footer = template_data[ind];\n    }\n}\n\n\nvar taskObj = {\n    \"task_id\":\t\t    task_data._id,\n    \"task_name\":\t\ttask_data.task_name,\n    \"parent_id\":        task_data.parent_id,\n    \"template\": \t\ttemplateObj,\n    \"from_page_id\":\t\ttask_data.from_page_id,\n    \"child_task_id\":    task_data.child_default_task_id,\n    \"date_created\":     task_data.date_created\n};\n\nmsg.detail_arr  = msg.payload ;\nmsg.taskObj     = taskObj;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3807.5,
        "y": 393.00006103515625,
        "wires": [
            [
                "e19597e8.b6f6e8"
            ]
        ]
    },
    {
        "id": "e19597e8.b6f6e8",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "prepare detail_obj",
        "func": "var detail_data = msg.detail,\n    detailObj   = [];\n    \n//**********    detailObj     *******//\nvar detailRecord = {\n    \"_id\": \t\"\",\n    \"image\":\t\t\"\",\n    \"to_page_id\": \t\"\",\n    \"user_id\": \t\t\"\",\n    \"task_id\":      \"\",\n    \"page_id\":      \"\",\n    \"from_user_id\": \"\",\n\t\"user_incoming\":{},\n    \"watson_incoming\":{},\n    \"type\":         {},\n    \"date_created\": \"\",\n    \"from_user\":    {},\n    \"count\":{\"active\":0, \"unread\":0}\n};\n\nif(detail_data.length){\n    for(var d=0; d<detail_data.length; d++){\n        detail_data[d]._id = detail_data[d]._id;\n        detail_data[d].to_page_id = detail_data[d].to_page_id;\n        \n        if(check_isDisplay(detail_data[d].display_if_empty)){\n            detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n        }else{\n            detail_data.splice(d, 0)    ;\n        }\n    }\n    msg.detailObj = removeEmptyArrayElements(detailObj);     \n}else{\n    msg.detailObj = [] ;\n}\n\nmsg.user_task_payload = {query: \"table:user_task\", sort: \"_id<string>\"};\nreturn msg;\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3992.16650390625,
        "y": 330.66668701171875,
        "wires": [
            [
                "4c9fdaa7.6734c4"
            ]
        ]
    },
    {
        "id": "3f8ecaa4.829606",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "if(msg.payload_content.page_id.page_id === undefined){\n    var page_id         = msg.payload_content.page_id;    \n}else{\n    var page_id         = msg.payload_content.page_id.page_id;    \n}\n\nvar userObj         = msg.userObj;\nvar taskObj         = msg.taskObj;\nvar user_task_arr   = [] ;\nvar apiResult       = {} ;\nvar details         = [];\n\ntry{\n    if(!isEmpty(msg.payload)){\n        user_task_arr = msg.payload.sort(function(){\n            user_task_arr = user_task_arr.sort(function(a, b){\n                return (a.createdAt - b.createdAt);\t\n            });\n        });\n    }\n    \n    details =  msg.detail_arr.sort(function(a,b){\n        details = details.sort(function(a,b){\n        \tif(typeof a.page_id === 'number'){\n        \t\treturn (a.page_id - b.page_id);\t\n        \t}else{\n        \t\treturn (a.createdAt - b.createdAt);\t\n        \t}\n        \t\n        });\n    });\n    \n    if(page_id == 1 ){\n        page_id = 1 ;\n    \tapiResult.access_token = msg.payload_content.access_token;\n    } \n\n    var apiResult = {\n        \"page_id\":  page_id,\n        \"user\":     userObj,\n        \"task\":     taskObj,\n        \"detail\":   getpage(page_id)\n\t};\n    msg.payload = apiResult;\n}catch(e){\n    node.warn(e);\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Exception occured while populating page\", data: null, exception: e};\n}\n\n\nreturn msg;\n\nfunction getpage(page_id){\n    var result = get_page_array(page_id) ,\n        detail = result.detail_array ;\n\n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(page_id){\n    var detail_array = msg.detailObj;\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                if(!isEmpty(userObj)){\n                    update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: count}, false);    \n                } \n            }\n        }else{\n            var user_task_obj = return_user_task_obj(detail_array[itr].user_id, detail_array[itr].task_id, detail_array[itr].page_id);\n            if (check_obj(user_task_obj) > 0){\n                 // do count_if check using user_task fields as do in update_user_task\n                current_count_active = user_task_obj.count.active ;\n                current_count_unread = user_task_obj.count.unread ;\n            }else{ // otherwise use defaults\n                 // do count_if check using detail fields as do in update_user_task\n                current_count_active = detail_array[itr].count.active ;\n                current_count_unread = detail_array[itr].count.unread ;\n            }\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id\n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:1, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n\n    if ( create_user_task_flag ) {\n        \n        if(taskObj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, taskObj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(taskObj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(taskObj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(taskObj.parent_id, ancestors_array) ) ancestors_array.push(taskObj.parent_id);\n            }\n        }else{\n            node.warn(\"else_user_task\");     \n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 0,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0} ;\n\n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    \n    return count;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 4328,
        "y": 432.66668701171875,
        "wires": [
            [
                "44d2d7fa.003488"
            ]
        ]
    },
    {
        "id": "5cb2250f.52b26c",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4204.50048828125,
        "y": 338.6667175292969,
        "wires": [
            [
                "3f8ecaa4.829606"
            ]
        ]
    },
    {
        "id": "4c9fdaa7.6734c4",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "user_task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4156.5,
        "y": 251.666748046875,
        "wires": [
            [
                "5cb2250f.52b26c"
            ]
        ]
    },
    {
        "id": "44d2d7fa.003488",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 4450.8330078125,
        "y": 326.6666564941406,
        "wires": [
            [
                "4febf507.2ffb4c"
            ],
            [
                "2444f649.16012a",
                "b1f1b512.a78d28",
                "8f56ba74.942768"
            ]
        ]
    },
    {
        "id": "4febf507.2ffb4c",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 4595.83349609375,
        "y": 241.66665649414062,
        "wires": []
    },
    {
        "id": "2444f649.16012a",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4608.83349609375,
        "y": 342.6666259765625,
        "wires": [
            [
                "f36ffec4.68e8c"
            ]
        ]
    },
    {
        "id": "4c2fa507.e8c12c",
        "type": "cloudant out",
        "z": "19d64182.cdd4de",
        "name": "Update User Task",
        "cloudant": "5e923e83.d5527",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4875.833251953125,
        "y": 351,
        "wires": []
    },
    {
        "id": "b1f1b512.a78d28",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "API Result",
        "x": 4618.8330078125,
        "y": 298.6666564941406,
        "wires": []
    },
    {
        "id": "8f56ba74.942768",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "get_page_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4637.83349609375,
        "y": 396.6666564941406,
        "wires": []
    },
    {
        "id": "1dd3ea1c.8ec786",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "update_get_pages",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n    msg.payload       = {\n        query   : \"table:users AND access_token:\" + params.access_token ,\n        sort    : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1263.5001220703125,
        "y": 297.33336639404297,
        "wires": [
            [
                "729cf817.e61648"
            ]
        ]
    },
    {
        "id": "729cf817.e61648",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1474.8334350585938,
        "y": 372.00008392333984,
        "wires": [
            [
                "77ac6db1.e253e4"
            ],
            [
                "a14c857e.2d83e8"
            ]
        ]
    },
    {
        "id": "77ac6db1.e253e4",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1618.8333740234375,
        "y": 320.33336639404297,
        "wires": []
    },
    {
        "id": "a14c857e.2d83e8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1642.1666259765625,
        "y": 421.33333587646484,
        "wires": [
            [
                "a0956b6f.4f2f18"
            ]
        ]
    },
    {
        "id": "a0956b6f.4f2f18",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"Unable to fetch user with this `access_token`\", data:null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.user_obj    = msg.payload[0] ;\n    msg.payload     = {\n        selector    : {\n            synchronized : {\n                $eq : 0\n            }\n        },\n        query       : \"table:user_task AND user_id:\" + msg.user_obj._id ,\n        sort        : \"_id<string>\" \n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1830.1666259765625,
        "y": 421.0000762939453,
        "wires": [
            [
                "9994ed7c.1d88c",
                "996085b2.1dd758"
            ]
        ]
    },
    {
        "id": "9994ed7c.1d88c",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1984.5,
        "y": 421.00001525878906,
        "wires": [
            [
                "1bb09ae7.bacba5"
            ],
            [
                "76421d92.4e9404"
            ]
        ]
    },
    {
        "id": "1bb09ae7.bacba5",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2105.5001220703125,
        "y": 385.33338928222656,
        "wires": []
    },
    {
        "id": "76421d92.4e9404",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2128.1666259765625,
        "y": 453.33338928222656,
        "wires": [
            [
                "566a2e87.88ddd"
            ]
        ]
    },
    {
        "id": "566a2e87.88ddd",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "user_task",
        "func": "var users_task = msg.payload ,\n    req_body   = msg.payload_content ;\n\nvar filtred_user_task = get_filter_user_task(users_task);\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.filtred_payload = filtred_user_task ;\nmsg.payload = {status: 200, data:null};\nreturn msg;\n\nfunction get_req_user_task(user_task){\n    try{\n        return JSON.parse(user_task);\n    }catch(e){\n        return {} ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_filter_user_task(user_task){\n    var result = [];\n    if(!isEmpty(user_task)){\n        for(var itr = 0; itr < user_task.length; itr++){\n            if(user_task[itr].synchronized === 0){\n                result.push(user_task[itr]);\n            }   \n        }\n    }\n    return result ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2292.8333435058594,
        "y": 453.00000762939453,
        "wires": [
            [
                "d691e444.6ce6e8"
            ]
        ]
    },
    {
        "id": "bada04a.6b80bf8",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "update_task_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4895,
        "y": 411.0000305175781,
        "wires": []
    },
    {
        "id": "996085b2.1dd758",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2000,
        "y": 350,
        "wires": []
    },
    {
        "id": "d691e444.6ce6e8",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2471,
        "y": 454,
        "wires": [
            [
                "833ec246.48e22"
            ],
            [
                "80444140.4b696"
            ]
        ]
    },
    {
        "id": "fcf1c16b.dbc57",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2700,
        "y": 377,
        "wires": [
            [
                "d691e444.6ce6e8"
            ]
        ]
    },
    {
        "id": "afa3f6c0.52fd48",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "api_res",
        "func": "msg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2963,
        "y": 459,
        "wires": [
            [
                "fcf1c16b.dbc57"
            ]
        ]
    },
    {
        "id": "80444140.4b696",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "res",
        "func": "if(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2614.7421875,
        "y": 519.1640625,
        "wires": [
            [
                "be4cae3b.9f8a7"
            ]
        ]
    },
    {
        "id": "be4cae3b.9f8a7",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2755.2421875,
        "y": 515.9609375,
        "wires": []
    },
    {
        "id": "833ec246.48e22",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "create_url",
        "func": "msg.url = msg.req.headers.host + '/master_api_handler?type=get_page&content={\"access_token\":\"' + msg.payload_content.access_token + '\", \"page_id\":' + msg.filtred_payload[msg.counter].page_id + '}';\nmsg.method  = \"GET\";\nnode.warn(msg.url);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2627.5078125,
        "y": 450.5234375,
        "wires": [
            [
                "4f9f1137.08099"
            ]
        ]
    },
    {
        "id": "4f9f1137.08099",
        "type": "http request",
        "z": "19d64182.cdd4de",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2799.5078125,
        "y": 454.5234375,
        "wires": [
            [
                "afa3f6c0.52fd48"
            ]
        ]
    },
    {
        "id": "474671ce.062f3",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "update_get_user_tasks",
        "func": "node.warn(msg.payload_content);\nmsg.payload = {\n    query : \"table:users AND access_token:\" + msg.payload_content.access_token ,\n    sort  : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg ;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1257.7421875,
        "y": 411.66405487060547,
        "wires": [
            [
                "1480fe29.5843d2"
            ]
        ]
    },
    {
        "id": "38beca57.bd1d26",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2170.2421875,
        "y": 535.0625,
        "wires": []
    },
    {
        "id": "1480fe29.5843d2",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1444.7421875,
        "y": 502.2734375,
        "wires": [
            [
                "219f03a1.394c6c"
            ]
        ]
    },
    {
        "id": "219f03a1.394c6c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true , msg: \"Unable to find user with access_token\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.filter_obj      = msg.payload_content.filter ;\n    msg.user_task_list  = msg.payload_content.user_task_list ;\n    msg.user            = msg.payload[0];\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1630.7578125,
        "y": 502.65625,
        "wires": [
            [
                "adeca021.ed0b"
            ]
        ]
    },
    {
        "id": "adeca021.ed0b",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1794.7578125,
        "y": 553.9765625,
        "wires": [
            [
                "106c3fb8.3df21"
            ],
            [
                "bc0a3533.510b68"
            ]
        ]
    },
    {
        "id": "106c3fb8.3df21",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1966.2578125,
        "y": 484.4609375,
        "wires": []
    },
    {
        "id": "bc0a3533.510b68",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "var filter          = msg.filter_obj ,\n    user_task_list  = msg.user_task_list ;\n    user            = msg.user ;\n    \n    msg.payload = {\n        selector    : create_selector(filter),\n        query       : create_filtred_query(user._id, filter)\n    };    \n    node.warn(msg.payload);\nreturn msg;\n\nfunction create_selector(filter){\n    var obj = {};\n    if(\"synchronized\" in filter){\n        if(parseInt(filter.synchronized) === 0){\n            obj.synchronized = {\n               \"$ne\" : 1\n            };\n            delete filter.synchronized ;\n        }\n    }\n    \n    if(\"status\" in filter){\n        if(parseInt(filter.status) === 0){\n            obj.status = {\n               \"$ne\" : 1\n            };\n            delete filter.status ;\n        }\n    }\n    return obj ;\n}\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n\n        if((\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id  ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter < length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1977.2421875,
        "y": 569.1640625,
        "wires": [
            [
                "38beca57.bd1d26",
                "45d34605.bc4cb8"
            ]
        ]
    },
    {
        "id": "45d34605.bc4cb8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2171.242142617704,
        "y": 605.7656131535772,
        "wires": [
            [
                "b2194df9.3a7cd",
                "371e04e4.019fec"
            ]
        ]
    },
    {
        "id": "b2194df9.3a7cd",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "msg.filtred_user_task_list = msg.payload ;\nmsg.payload = {\n    query : \"table:user_task\",\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2340.7421525865802,
        "y": 604.1718702614309,
        "wires": [
            [
                "23fd9507.c7c2ea"
            ]
        ]
    },
    {
        "id": "23fd9507.c7c2ea",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2530.7421875,
        "y": 617.2734375,
        "wires": [
            [
                "3744df0c.4d4c3"
            ]
        ]
    },
    {
        "id": "3744df0c.4d4c3",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate",
        "func": "\nmsg.updated_content = return_user_task_filtred_arr(msg.user_task_list, msg.payload) ;\nmsg.updated_content_length = msg.updated_content.length;\nmsg.res_user_task = [];\nmsg.counter = 0 ;\nmsg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.res_user_task, filtred: msg.filtred_user_task_list};\nreturn msg;\n\n\nfunction return_user_task_filtred_arr(req_user_task_list, user_tasks_list){\n    var selected_arr = [];\n    if(\n        user_tasks_list !== undefined && \n        user_tasks_list !== null &&\n        req_user_task_list !== undefined &&\n        req_user_task_list !== null \n    ){\n        for(var i=0; i< req_user_task_list.length; i++){\n            for(j =0; j<user_tasks_list.length; j++){\n                if(\n                    req_user_task_list[i].user_id == user_tasks_list[j].user_id &&\n                    req_user_task_list[i].task_id == user_tasks_list[j].task_id &&\n                    req_user_task_list[i].page_id == user_tasks_list[j].page_id \n                ){\n                  \n                  \n                    user_tasks_list[j].synchronized = req_user_task_list[i].synchronized ;\n                    user_tasks_list[j].status = req_user_task_list[i].status;\n                    user_tasks_list[j].date_updated = req_user_task_list[i].date_updated;\n                    user_tasks_list[j].count = req_user_task_list[i].count;\n                    selected_arr.push(user_tasks_list[j]);\n                }\n            }\n        }    \n        \n        return selected_arr;\n    }else{\n        return selected_arr ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2688.7421875,
        "y": 618.671875,
        "wires": [
            [
                "7c79b274.444edc"
            ]
        ]
    },
    {
        "id": "7c79b274.444edc",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "updated_content_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2858.5078125,
        "y": 604.0234375,
        "wires": [
            [
                "799d9765.d3b458"
            ],
            [
                "b4f174b6.9e04e8"
            ]
        ]
    },
    {
        "id": "5f5b6b27.a49554",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "counter",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2959.5078125,
        "y": 546.0234375,
        "wires": [
            [
                "7c79b274.444edc"
            ]
        ]
    },
    {
        "id": "799d9765.d3b458",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "    var counter = msg.counter ;\n    msg.payload = msg.updated_content[counter];\n    msg.res_user_task.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3048.5078125,
        "y": 593.0234375,
        "wires": [
            [
                "4baf3c7c.78ec54",
                "5f5b6b27.a49554"
            ]
        ]
    },
    {
        "id": "b4f174b6.9e04e8",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "api_res",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3039.515625,
        "y": 682.546875,
        "wires": [
            [
                "b55562d8.44d3"
            ]
        ]
    },
    {
        "id": "b55562d8.44d3",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 3220.515625,
        "y": 680.546875,
        "wires": []
    },
    {
        "id": "4baf3c7c.78ec54",
        "type": "cloudant out",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3240.515625,
        "y": 625.546875,
        "wires": []
    },
    {
        "id": "371e04e4.019fec",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2351.7578125,
        "y": 659.0546875,
        "wires": []
    },
    {
        "id": "4ff506b2.169578",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "delete_detail",
        "func": "var body = msg.payload.table_data ,\n    token = msg.payload.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.access_token    = token ;\n        msg.detail_id       = body.id ;\n        msg.api_status      = \"API_SUCCESS\";\n        msg.payload         = {\n                query   : \"table:users AND access_token:\" + token ,\n                sort    : \"_id<string>\"\n        };\n        node.warn(msg.payload);\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1296.7578125,
        "y": 634.171875,
        "wires": [
            [
                "aff97560.7d8878"
            ]
        ]
    },
    {
        "id": "aff97560.7d8878",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1542.7423095703125,
        "y": 548.9765625,
        "wires": [
            [
                "c4ac724d.ac859"
            ],
            [
                "7ae112b9.da4dbc"
            ]
        ]
    },
    {
        "id": "c4ac724d.ac859",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1683.7422844916591,
        "y": 503.46093276143085,
        "wires": []
    },
    {
        "id": "7ae112b9.da4dbc",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1705.7423095703125,
        "y": 575.7734375,
        "wires": [
            [
                "5b60dcfd.46ada4"
            ]
        ]
    },
    {
        "id": "5b60dcfd.46ada4",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var user = msg.payload ;\n    \n    if(isEmpty(user)){\n        msg.api_status  = \"API_ERROR\"    ;\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n    }else{\n        msg.user_obj    = user[0];\n        msg.payload     = {\n            query   : \"table:details AND _id:\" + msg.detail_id.toString() ,\n            sort    : \"_id<string>\"\n        };\n    }\n    \nnode.warn(msg.payload);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1875.7579345703125,
        "y": 602.1640625,
        "wires": [
            [
                "87fa1f95.ef692"
            ]
        ]
    },
    {
        "id": "87fa1f95.ef692",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2032.7500827759516,
        "y": 600.9843702614309,
        "wires": [
            [
                "5507605c.5a705"
            ],
            [
                "69913b1d.374e24"
            ]
        ]
    },
    {
        "id": "5507605c.5a705",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2156.7423095703125,
        "y": 569.953125,
        "wires": []
    },
    {
        "id": "69913b1d.374e24",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2174.7579345703125,
        "y": 625.765625,
        "wires": [
            [
                "8a5bd2e0.66aa3"
            ]
        ]
    },
    {
        "id": "8a5bd2e0.66aa3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate detail",
        "func": "var detail = msg.payload ;\n\n    if(isEmpty(detail)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with this id\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.detail_obj      = detail[0] ;\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2374.257883161308,
        "y": 625.1718678921463,
        "wires": [
            [
                "d51b97c1.e41208"
            ]
        ]
    },
    {
        "id": "d51b97c1.e41208",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2538.742264375092,
        "y": 669.9843678921463,
        "wires": [
            [
                "7852346d.81e6fc"
            ],
            [
                "a08f1848.dcc968"
            ]
        ]
    },
    {
        "id": "7852346d.81e6fc",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2675.1668701171875,
        "y": 638.6666870117188,
        "wires": []
    },
    {
        "id": "a08f1848.dcc968",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "isAuthorized",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.user_obj ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.api_status  = \"VALID_CONTENT\";\n    msg.payload     = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        table                           : \"details\",\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n    msg.response    = {status: 200, error: false, msg: \"Record deleted successfully\", data: msg.payload};\n}else{\n    msg.api_status = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.payload = {status: 403, error: false, msg: \"You are not authorized to remove record\", data: null};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2695.8333740234375,
        "y": 696.3333740234375,
        "wires": [
            [
                "1aee4b78.bb91d5"
            ]
        ]
    },
    {
        "id": "1aee4b78.bb91d5",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INVALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2852.8333740234375,
        "y": 696,
        "wires": [
            [
                "ec2fa8e0.84daa8"
            ],
            [
                "670422c7.a356fc",
                "b2066dec.cab4f",
                "6179d3c6.5ce81c",
                "5d47dd54.1cc8a4"
            ]
        ]
    },
    {
        "id": "ec2fa8e0.84daa8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 3038.500071207682,
        "y": 649.333356221517,
        "wires": []
    },
    {
        "id": "670422c7.a356fc",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "save detail to master table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3109.500071207682,
        "y": 711.333371480306,
        "wires": []
    },
    {
        "id": "b2066dec.cab4f",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3053.500071207682,
        "y": 758.333371480306,
        "wires": [
            [
                "aa098852.5faae8"
            ]
        ]
    },
    {
        "id": "aa098852.5faae8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 3211.500081380208,
        "y": 755.0000203450521,
        "wires": []
    },
    {
        "id": "6179d3c6.5ce81c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:details AND to_page_id:\" + detail.page_id ,\n    sort    : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3057.500071207682,
        "y": 816.3332951863607,
        "wires": [
            [
                "f2251761.b07088"
            ]
        ]
    },
    {
        "id": "f2251761.b07088",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3217.166748046875,
        "y": 817,
        "wires": [
            [
                "92d7a796.dba1a8"
            ]
        ]
    },
    {
        "id": "92d7a796.dba1a8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init",
        "func": "var filtered_details = msg.payload ;\n\nmsg.filtredArr = filtered_details || [] ;\nmsg.counter = 0;\nmsg.detail_length = filtered_details.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3379.500081380208,
        "y": 816,
        "wires": [
            [
                "a41eab75.8d4778"
            ]
        ]
    },
    {
        "id": "a41eab75.8d4778",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3553.666819254557,
        "y": 753.3333867390951,
        "wires": [
            [
                "761fffae.c03e"
            ],
            [
                "e14260f2.70e37"
            ]
        ]
    },
    {
        "id": "14ac37c7.408fb8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3631.666819254557,
        "y": 674.3333867390951,
        "wires": [
            [
                "a41eab75.8d4778"
            ]
        ]
    },
    {
        "id": "761fffae.c03e",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3713.666819254557,
        "y": 744.3334172566732,
        "wires": [
            [
                "14ac37c7.408fb8",
                "b96954a9.56ea68"
            ]
        ]
    },
    {
        "id": "e14260f2.70e37",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3703.666819254557,
        "y": 786.3334172566732,
        "wires": [
            [
                "c5c8572a.97eb68"
            ]
        ]
    },
    {
        "id": "c5c8572a.97eb68",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3880.666819254557,
        "y": 790.3334172566732,
        "wires": []
    },
    {
        "id": "b96954a9.56ea68",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Update Detail",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3908.666819254557,
        "y": 712.3333867390951,
        "wires": []
    },
    {
        "id": "5d47dd54.1cc8a4",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:user_task AND page_id:\" + detail.to_page_id + \"user_id:\" + detail.user_id ,\n    sort    : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3057.500071207682,
        "y": 883.6667607625326,
        "wires": [
            [
                "cfb2d119.650ef"
            ]
        ]
    },
    {
        "id": "cfb2d119.650ef",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "msater_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3215.500071207682,
        "y": 881.3333257039388,
        "wires": [
            [
                "d21cc327.892e3"
            ]
        ]
    },
    {
        "id": "d21cc327.892e3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init",
        "func": "var user_tasks = msg.payload ;\n\nmsg.calculated_task = user_tasks || [];\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3378.500071207682,
        "y": 881.0000127156576,
        "wires": [
            [
                "4f69a5e6.d7c3fc"
            ]
        ]
    },
    {
        "id": "4f69a5e6.d7c3fc",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3518.333567301432,
        "y": 879.3333867390951,
        "wires": [
            [
                "8d032ebd.ecdb3"
            ],
            [
                "df98db23.3ac248"
            ]
        ]
    },
    {
        "id": "3d0e140b.8e644c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3579.333567301432,
        "y": 827.3333867390951,
        "wires": [
            [
                "4f69a5e6.d7c3fc"
            ]
        ]
    },
    {
        "id": "8d032ebd.ecdb3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\n\nuser_task_obj.status = 0   ;\nif(user_task_obj.count){\n    if(user_task_obj.count)    user_task_obj.count.active = 0 ;\n    if(user_task_obj.count)    user_task_obj.count.unread = 0 ;\n}\n\nmsg.payload = user_task_obj;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3665.333567301432,
        "y": 871.3334172566732,
        "wires": [
            [
                "3d0e140b.8e644c",
                "5a82b46c.ba9e9c"
            ]
        ]
    },
    {
        "id": "df98db23.3ac248",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3659.333567301432,
        "y": 916.3333867390951,
        "wires": [
            [
                "74b47e08.11124"
            ]
        ]
    },
    {
        "id": "5a82b46c.ba9e9c",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3849.333567301432,
        "y": 870.3333867390951,
        "wires": []
    },
    {
        "id": "74b47e08.11124",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3858.333567301432,
        "y": 914.3333867390951,
        "wires": []
    },
    {
        "id": "ef75de0.d20e52",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "get_task",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`access_token` is required\", data: null};\n}else if(isEmpty(params.task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`task_id` is required\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload      = {\n        query : \"table:task_table AND _id:\"+ params.task_id,\n        sort  : \"_id<string>\"\n    };\n    msg.user_payload = {\n        query : \"table:users AND access_token:\"+ params.access_token,\n        sort  : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1216.140625,
        "y": 539.9882965087891,
        "wires": [
            [
                "81f0cb3.516b438"
            ]
        ]
    },
    {
        "id": "81f0cb3.516b438",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1449.6406105458739,
        "y": 610.1757782883942,
        "wires": [
            [
                "c24953b6.1a077"
            ],
            [
                "d16957ed.4ba5a8"
            ]
        ]
    },
    {
        "id": "c24953b6.1a077",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1582.6288917958739,
        "y": 576.4062430895866,
        "wires": []
    },
    {
        "id": "ade805d1.80d038",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate task",
        "func": "var task_obj = msg.payload ;\n\nif(isEmpty(task_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find task with `task_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj   = task_obj[0];\n    msg.payload    = msg.user_payload ;\n}\n\nreturn msg;\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1771.640625,
        "y": 716.24609375,
        "wires": [
            [
                "4ba0f6d9.9aeea8"
            ]
        ]
    },
    {
        "id": "d16957ed.4ba5a8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1607.1328125,
        "y": 662.0546875,
        "wires": [
            [
                "ade805d1.80d038"
            ]
        ]
    },
    {
        "id": "4ba0f6d9.9aeea8",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1935.3827918060126,
        "y": 714.9218680895866,
        "wires": [
            [
                "7f3d908f.2aec8"
            ],
            [
                "c121601.ca6a2a"
            ]
        ]
    },
    {
        "id": "7f3d908f.2aec8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2075.3828125,
        "y": 673.90625,
        "wires": []
    },
    {
        "id": "129fc626.023cca",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "var user_obj = msg.payload ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: msg.task_obj};\n}\n\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2268.375,
        "y": 773.4921875,
        "wires": [
            [
                "cd584d31.0eeca"
            ]
        ]
    },
    {
        "id": "cd584d31.0eeca",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2426.375,
        "y": 779.4140625,
        "wires": [
            [
                "d35eed94.20aa8"
            ],
            [
                "d35eed94.20aa8"
            ]
        ]
    },
    {
        "id": "d35eed94.20aa8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2618.38671875,
        "y": 776.9062652587891,
        "wires": []
    },
    {
        "id": "2e30714a.35189e",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2289.0156860351562,
        "y": 728.0000610351562,
        "wires": []
    },
    {
        "id": "44c2518e.ef865",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_task",
        "func": "// msg.payload_table = body.table ;\n// msg.payload_data  = body.table_data ;\n// msg.access_token  = body.access_token ;\nvar access_token = msg.access_token ;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            query : \"table:users AND access_token:\" + access_token ,\n            sort  : \"_id<string>\"\n        };\n    }\n    \nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1298.015625,
        "y": 749,
        "wires": [
            [
                "22062247.2620de"
            ]
        ]
    },
    {
        "id": "ed4a8c2e.d5c25",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2167.0156860351562,
        "y": 683.0001831054688,
        "wires": []
    },
    {
        "id": "b44dde1d.d45bb",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2147.0156860351562,
        "y": 730.0000610351562,
        "wires": [
            [
                "2e30714a.35189e"
            ]
        ]
    },
    {
        "id": "5df254a7.85e2cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_user",
        "func": "var req_body        = msg.payload_data ,\n    access_token    = msg.access_token ;\n\nif(isEmpty(access_token)){\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:\"+ req_body.table +\"AND access_token:\"+ access_token +\" AND _id:\" + req_body.user_id ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1295.265625,
        "y": 866.25,
        "wires": [
            [
                "4c52b214.e0522c"
            ]
        ]
    },
    {
        "id": "4c52b214.e0522c",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1442.265625,
        "y": 926.25,
        "wires": [
            [
                "8f8bd939.95d398"
            ],
            [
                "6a0c38b.163e1c8"
            ]
        ]
    },
    {
        "id": "e4a95d10.a73ea",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_short_detail",
        "func": "var body            = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.api_status = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else if(isEmpty(body.detail_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.api_status = {status: 400, error: true, msg: \"`detail_id` is required to update detail\", data: body};\n}else if(isEmpty(body.task_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.api_status = {status: 400, error: true, msg: \"`task_id` is required to update task detail\", data: body};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {\n        query : \"table:details AND _id:\" + body.detail_id ,\n        sort  : \"_id<string>\"\n    };\n    \n    msg.task_payload = {\n        query : \"table:task_table AND _id:\" + body.task_id ,\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1314.140625,
        "y": 1006.5,
        "wires": [
            [
                "dcbb4c21.2dca4"
            ]
        ]
    },
    {
        "id": "6a0c38b.163e1c8",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1595.765625,
        "y": 929.25,
        "wires": [
            [
                "f094fd4b.bd424"
            ]
        ]
    },
    {
        "id": "f094fd4b.bd424",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find user with `access_token` and `user_id`.\", data: req_body};    \n}else{\n    var payload ={\n      _id               : user_obj._id,\n      _rev              : user_obj._rev,\n      table             : user_obj.table,\n      long_url          : user_obj.long_url,\n      access_token      : user_obj.access_token ,\n      security_level    : user_obj.security_level,\n      phone             : Number(req_body.phone) || user_obj.phone ,\n      virtual_phone     : user_obj.virtual_phone,\n      email             : req_body.email || user_obj.email,\n      converstation_id  : user_obj.converstation_id || \"\",\n      firstname         : req_body.firstname || user_obj.firstname,\n      lastname          : req_body.lastname || user_obj.lastname,\n      code              : user_obj.code,\n      password          : user_obj.password,\n      image             : user_obj.image,\n      type              : user_obj.type,\n      device_id         : user_obj.device_id,\n      push_accepted     : user_obj.push_accepted\n    };\n    \n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = payload ;\n    msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1729.765625,
        "y": 928.25,
        "wires": [
            [
                "8053e3c4.6a24c"
            ]
        ]
    },
    {
        "id": "7169c502.95e06c",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2065.765869140625,
        "y": 875.25,
        "wires": []
    },
    {
        "id": "3e3b424c.40376e",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2057.7657470703125,
        "y": 918.25,
        "wires": [
            [
                "da4a7827.5e25d8"
            ]
        ]
    },
    {
        "id": "da4a7827.5e25d8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2237.765869140625,
        "y": 917.25,
        "wires": []
    },
    {
        "id": "8f8bd939.95d398",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1594.62890625,
        "y": 885.41015625,
        "wires": []
    },
    {
        "id": "c121601.ca6a2a",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2095,
        "y": 742,
        "wires": [
            [
                "129fc626.023cca"
            ]
        ]
    },
    {
        "id": "2e3b2403.b34c6c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240.83349609375,
        "y": 1324.000244140625,
        "wires": [
            [
                "88f5fa0c.a83de8"
            ]
        ]
    },
    {
        "id": "88f5fa0c.a83de8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1379.8334045410156,
        "y": 1325.6669184366863,
        "wires": []
    },
    {
        "id": "923207e7.5ed858",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "detail_arr",
        "func": "msg.tempteObj = msg.payload;\n\nif(isEmpty(msg.tempteObj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"unable to populate templates using with this page_id\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:details\",\n        sort: \"_id<string>\"\n    };    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3337.500244140625,
        "y": 339.3333435058594,
        "wires": [
            [
                "93c05f73.a6fa1"
            ]
        ]
    },
    {
        "id": "a359c1b1.2fa55",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3646.5,
        "y": 277,
        "wires": [
            [
                "71044f78.6770a"
            ]
        ]
    },
    {
        "id": "d4a95cf7.4b6d4",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "detail_payload",
        "rules": [
            {
                "t": "move",
                "p": "detail_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2599.500244140625,
        "y": 93.00000762939453,
        "wires": [
            [
                "c1fb5b6e.a4a368"
            ]
        ]
    },
    {
        "id": "b51d09.b17d82f8",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "detail_arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "details_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2993.833251953125,
        "y": 96.66666412353516,
        "wires": [
            [
                "d2b55e61.08c28"
            ]
        ]
    },
    {
        "id": "c4cdcc73.d3fdd",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "login page return again",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 718.8333435058594,
        "y": 1095.0000178019206,
        "wires": []
    },
    {
        "id": "f98b5651.131558",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "menu page return ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1046.8334045410156,
        "y": 929.0000178019206,
        "wires": []
    },
    {
        "id": "bb57deaa.48c82",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "Comes her to log every thing",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 2847.8333435058594,
        "y": 224.3333511352539,
        "wires": []
    },
    {
        "id": "c1fb5b6e.a4a368",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2796.33349609375,
        "y": 96.66666412353516,
        "wires": [
            [
                "b51d09.b17d82f8"
            ]
        ]
    },
    {
        "id": "f36ffec4.68e8c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "save?",
        "func": "var payload = msg.payload ;\nif(isEmpty(payload)){\n    msg.status = \"no_need_to_save\";\n}else{\n    msg.status = \"needtosave\";\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4811.33349609375,
        "y": 238.66668701171875,
        "wires": [
            [
                "abb71f1b.c8ca6"
            ]
        ]
    },
    {
        "id": "abb71f1b.c8ca6",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "needtosave",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 4823.33349609375,
        "y": 294.66668701171875,
        "wires": [
            [
                "4c2fa507.e8c12c"
            ],
            [
                "bada04a.6b80bf8"
            ]
        ]
    },
    {
        "id": "93c05f73.a6fa1",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3480.25,
        "y": 338.484375,
        "wires": [
            [
                "a359c1b1.2fa55"
            ],
            [
                "602e28dd.be4bd8"
            ]
        ]
    },
    {
        "id": "602e28dd.be4bd8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 3633.2421875,
        "y": 344.9609375,
        "wires": []
    },
    {
        "id": "12f5e63c.6ad31a",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 699.8333435058594,
        "y": 733.6667175292969,
        "wires": [
            [
                "f7ec356e.eb9568"
            ],
            [
                "353bd9fe.423a06"
            ]
        ]
    },
    {
        "id": "353bd9fe.423a06",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "",
        "x": 872.8333435058594,
        "y": 738.6667175292969,
        "wires": []
    },
    {
        "id": "8053e3c4.6a24c",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1868.5,
        "y": 927.6666870117188,
        "wires": [
            [
                "7169c502.95e06c",
                "3e3b424c.40376e"
            ],
            [
                "ad31218.908fde"
            ]
        ]
    },
    {
        "id": "ad31218.908fde",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2047.5001932779949,
        "y": 982.9999974568685,
        "wires": []
    },
    {
        "id": "dcbb4c21.2dca4",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1483.8333740234375,
        "y": 1006.3333740234375,
        "wires": [
            [
                "29a95e0f.65b4f2"
            ],
            [
                "8dcda9b.871b158"
            ]
        ]
    },
    {
        "id": "29a95e0f.65b4f2",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1637.5,
        "y": 999.3333740234375,
        "wires": [
            [
                "12398c0f.4fe5a4"
            ]
        ]
    },
    {
        "id": "8dcda9b.871b158",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1617.5000101725261,
        "y": 1041.333351135254,
        "wires": []
    },
    {
        "id": "12398c0f.4fe5a4",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "detail_processing",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to fetch detail using with detail_id\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    var detail_obj = msg.payload[0] ,\n        req_body   = msg.payload_data;\n        \n    //for user_incoming from detail_obj\n    detail_obj.user_incoming.note    = req_body.message ;\n    detail_obj.user_incoming.message = req_body.message ;\n    \n    //for watson_incoming from detail_obj\n    detail_obj.watson_incoming.note    = req_body.message ;\n    detail_obj.watson_incoming.message = req_body.message ;\n        \n    msg.payload = detail_obj;\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1825.5,
        "y": 1037.6666870117188,
        "wires": [
            [
                "3b82e6d8.a4c12a"
            ]
        ]
    },
    {
        "id": "3b82e6d8.a4c12a",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1963.5,
        "y": 1092,
        "wires": [
            [
                "9b0bed40.7d20e",
                "9e1ca0c2.25092"
            ],
            [
                "ef65e1a9.bbe2e"
            ]
        ]
    },
    {
        "id": "ef65e1a9.bbe2e",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2101.50048828125,
        "y": 1137.3333740234375,
        "wires": []
    },
    {
        "id": "9b0bed40.7d20e",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "update_detail_master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2171.5003662109375,
        "y": 1038.6666870117188,
        "wires": []
    },
    {
        "id": "9e1ca0c2.25092",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "task_payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2118.5001220703125,
        "y": 1085.6666259765625,
        "wires": [
            [
                "e522a4aa.0fc048"
            ]
        ]
    },
    {
        "id": "e522a4aa.0fc048",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2272.166748046875,
        "y": 1128,
        "wires": [
            [
                "ca967d4a.7db79"
            ]
        ]
    },
    {
        "id": "ca967d4a.7db79",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "task_processing",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Detail has been updated but Unable to fetch task_obj using with task_id\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    var task_obj = msg.payload[0] ,\n        req_body   = msg.payload_data;\n        \n    //from detail_obj\n    task_obj.task_name  = req_body.task_name ;\n    task_obj.status     = JSON.parse(req_body.task_status) ? 1 : 0 ;\n        \n    msg.payload = task_obj;\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2451.0001220703125,
        "y": 1127,
        "wires": [
            [
                "c33a42cd.fa457"
            ]
        ]
    },
    {
        "id": "c33a42cd.fa457",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2614.3336181640625,
        "y": 1126,
        "wires": [
            [
                "7a9d7433.c56ffc",
                "30975a04.110b06"
            ],
            [
                "47ec97cc.17a398"
            ]
        ]
    },
    {
        "id": "7a9d7433.c56ffc",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2798.166748046875,
        "y": 1094.3333740234375,
        "wires": []
    },
    {
        "id": "47ec97cc.17a398",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2781.166748046875,
        "y": 1184.6666259765625,
        "wires": []
    },
    {
        "id": "30975a04.110b06",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "res",
        "func": "msg.payload = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2779.166748046875,
        "y": 1134.3333740234375,
        "wires": [
            [
                "29c82e4e.f96972"
            ]
        ]
    },
    {
        "id": "29c82e4e.f96972",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2910.1667378743487,
        "y": 1134.6666844685874,
        "wires": []
    },
    {
        "id": "1ed4113a.a9737f",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "formatted_user",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1266,
        "y": 774.3333740234375,
        "wires": [
            [
                "f84567ff.6595b8"
            ]
        ]
    },
    {
        "id": "6f573c03.ac1344",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "formatted_timeout",
        "func": "msg.payload = {\n    query: \"table:timeout\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1273,
        "y": 829.3333740234375,
        "wires": [
            [
                "b5ab4981.56a258"
            ]
        ]
    },
    {
        "id": "574ce932.9a2578",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "formatted_location",
        "func": "msg.payload = {\n    query: \"table:location\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1273,
        "y": 882.3333740234375,
        "wires": [
            [
                "c05da8af.b7a828"
            ]
        ]
    },
    {
        "id": "22c60329.daa0fc",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "formatted_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1262,
        "y": 932.3333740234375,
        "wires": [
            [
                "cca991fe.80f9a"
            ]
        ]
    },
    {
        "id": "cca991fe.80f9a",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1479,
        "y": 929.3333740234375,
        "wires": [
            [
                "9bcc6b3.2099798"
            ]
        ]
    },
    {
        "id": "c05da8af.b7a828",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1479,
        "y": 881.3333740234375,
        "wires": [
            [
                "595e6a66.9c4d54"
            ]
        ]
    },
    {
        "id": "b5ab4981.56a258",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1477,
        "y": 835.3333740234375,
        "wires": [
            [
                "69af1b0a.a11bd4"
            ]
        ]
    },
    {
        "id": "f84567ff.6595b8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1474,
        "y": 780.3333740234375,
        "wires": [
            [
                "ddfd32c0.2b33b"
            ]
        ]
    },
    {
        "id": "ddfd32c0.2b33b",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "var users   = msg.payload , updated_user = [];\n\nif(users === null || users === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!users.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: users};\n}else{\n    for(var i=0; i< users.length; i++){\n        updated_user.push({id : users[i]._id, name: generate_name(users[i]) || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_user};\n}\n\nreturn msg;\n\nfunction generate_name(obj){\n    return (obj.firstname + \" \" + obj.lastname).trim();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1673,
        "y": 779.3333740234375,
        "wires": [
            [
                "79da4549.7e35ac"
            ]
        ]
    },
    {
        "id": "69af1b0a.a11bd4",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "var timeout   = msg.payload , updated_timeout = [];\n\nif(timeout === null || timeout === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!timeout.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: timeout};\n}else{\n    for(var i=0; i< timeout.length; i++){\n        updated_timeout.push({id : timeout[i]._id, name: timeout[i].name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_timeout};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1673,
        "y": 832.3333740234375,
        "wires": [
            [
                "bf385e55.a88eb"
            ]
        ]
    },
    {
        "id": "595e6a66.9c4d54",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "var location   = msg.payload , updated_location = [];\n\nif(location === null || location === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!location.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: location};\n}else{\n    for(var i=0; i< location.length; i++){\n        updated_location.push({id : location[i]._id, name: location[i].location_name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_location};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 879.3333740234375,
        "wires": [
            [
                "a64104c5.38e828"
            ]
        ]
    },
    {
        "id": "9bcc6b3.2099798",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "var tasks_arr = msg.payload , obj = {} ;\n\nif(tasks_arr === null || tasks_arr === undefined){\n    obj.status = 400 ;\n    obj.error  = true ;\n    obj.msg    = \"Unable to get the tasks\";\n    msg.paylod = obj ;\n}else{\n    if(tasks_arr.length){\n        var tasks = [];\n        for(var i=0; i < tasks_arr.length; i++){\n            tasks.push({\n                id           : tasks_arr[i]._id,\n                task_name    : tasks_arr[i].task_name || \"N/A\"     \n            });\n        }\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"Record fecthed successfully\";\n        obj.data   = tasks ;\n        msg.payload = obj ;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is not task present\";\n        msg.paylod = obj ;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1675,
        "y": 929.3333740234375,
        "wires": [
            [
                "d1bc0bc1.fa0bc8"
            ]
        ]
    },
    {
        "id": "d1bc0bc1.fa0bc8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1857,
        "y": 927.3333740234375,
        "wires": []
    },
    {
        "id": "a64104c5.38e828",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1853,
        "y": 880.3333740234375,
        "wires": []
    },
    {
        "id": "bf385e55.a88eb",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1853,
        "y": 830.3333740234375,
        "wires": []
    },
    {
        "id": "79da4549.7e35ac",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1854,
        "y": 777.3333740234375,
        "wires": []
    },
    {
        "id": "a4da1566.6748f8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1662.166748046875,
        "y": 1024.666748046875,
        "wires": []
    },
    {
        "id": "f04eed2.3cdca1",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "get_all_templates",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1264.1666768391929,
        "y": 1029.0000381469727,
        "wires": [
            [
                "28766d61.486022"
            ]
        ]
    },
    {
        "id": "28766d61.486022",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1485.1666259765625,
        "y": 1027.0001220703125,
        "wires": [
            [
                "a4da1566.6748f8"
            ]
        ]
    },
    {
        "id": "562501d2.7b936",
        "type": "http in",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "url": "/master_table",
        "method": "get",
        "swaggerDoc": "",
        "x": 152.8333282470703,
        "y": 206.33334350585938,
        "wires": [
            [
                "b234141a.5646b8"
            ]
        ]
    },
    {
        "id": "3c5f5031.60468",
        "type": "http response",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "x": 548.8333435058594,
        "y": 209.33334350585938,
        "wires": []
    },
    {
        "id": "b234141a.5646b8",
        "type": "cloudant in",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 362.8333435058594,
        "y": 210.33333587646484,
        "wires": [
            [
                "3c5f5031.60468"
            ]
        ]
    },
    {
        "id": "f2def268.f5a43",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "create user_task after creating detail",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4559.833740234375,
        "y": 595.6667022705078,
        "wires": []
    },
    {
        "id": "68767448.15c44c",
        "type": "ibmpush",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "SANDBOX",
        "x": 515.8333435058594,
        "y": 361.99999237060547,
        "wires": []
    },
    {
        "id": "b5103d8d.3294a",
        "type": "inject",
        "z": "a1c7b9eb.d6a108",
        "name": "start",
        "topic": "start",
        "payload": "Start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 136.8333282470703,
        "y": 360.6666488647461,
        "wires": [
            [
                "40372744.b003c8"
            ]
        ]
    },
    {
        "id": "40372744.b003c8",
        "type": "function",
        "z": "a1c7b9eb.d6a108",
        "name": "payload",
        "func": "    msg.payload = {\n        \"message\": {\n            \"alert\": \"Hello World from an SMS message using node-red platoform.\"\n        }\n    };\n    msg.notificationType = 3 ;\n    msg.identifiers= \"89a5847f-3d15-301c-924f-c0b0cf0ac493\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 328.8333435058594,
        "y": 360.6666488647461,
        "wires": [
            [
                "68767448.15c44c",
                "ea96e535.663288"
            ]
        ]
    },
    {
        "id": "ea96e535.663288",
        "type": "debug",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 501.8333435058594,
        "y": 408.33333587646484,
        "wires": []
    },
    {
        "id": "f9c87804.07c708",
        "type": "inject",
        "z": "a1c7b9eb.d6a108",
        "name": "start",
        "topic": "start",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.8333282470703,
        "y": 513.6666488647461,
        "wires": [
            [
                "7fddc6b3.aae708"
            ]
        ]
    },
    {
        "id": "7fddc6b3.aae708",
        "type": "function",
        "z": "a1c7b9eb.d6a108",
        "name": "payload",
        "func": "// url, if set, is used as the url of the request. Must start with http: or https:\n// method, if set, is used as the HTTP method of the request. Must be one of GET, PUT, POST, PATCH or DELETE (default: GET)\n// headers, if set, should be an object containing field/value pairs to be added as request headers\n// payload is sent as the body of the request\n\n\nmsg.url = \"https://mobile.ng.bluemix.net/imfpush/v1/apps/3d321d52-0b21-485a-8669-7e19684b070b/messages\";\nmsg.method = \"POST\";\nmsg.headers = {\n    \"appSecret\": \"26328303-fc96-4379-a53c-7b2dbad74b00\"\n};\nmsg.payload = {\n    message: {\n        alert: \"Hello World from an SMS message using node-red rest api client.\"\n    },\n    notificationType: 3,\n    target: {\n        deviceIds: [\"89a5847f-3d15-301c-924f-c0b0cf0ac493\", \"93ab767a-dc15-3089-9cd0-372ff3403c66\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320.8333435058594,
        "y": 512.0000381469727,
        "wires": [
            [
                "6cf4c046.f7d38",
                "19da16d6.8443d9"
            ]
        ]
    },
    {
        "id": "6cf4c046.f7d38",
        "type": "http request",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 494.8333435058594,
        "y": 511.33336639404297,
        "wires": [
            [
                "9a9c4dd8.debaf"
            ]
        ]
    },
    {
        "id": "9a9c4dd8.debaf",
        "type": "debug",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 673.8333435058594,
        "y": 511.00003814697266,
        "wires": []
    },
    {
        "id": "19da16d6.8443d9",
        "type": "debug",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 488.8333435058594,
        "y": 564.0000839233398,
        "wires": []
    },
    {
        "id": "1f86343.b07bdcc",
        "type": "comment",
        "z": "a1c7b9eb.d6a108",
        "name": "Not Working:- Below flow is not-working with IBM push node. So used Rest Api to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 470.8333435058594,
        "y": 306.6666488647461,
        "wires": []
    },
    {
        "id": "2a43b06.fd3695",
        "type": "comment",
        "z": "a1c7b9eb.d6a108",
        "name": "Working:- Following Flow is working with the rest endpoint and is working well to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 464.6666564941406,
        "y": 461.6666564941406,
        "wires": []
    },
    {
        "id": "9ffc4b8a.05a308",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1598.1666259765625,
        "y": 749.6666870117188,
        "wires": [
            [
                "c83fce28.428bf"
            ],
            [
                "40b1cc72.88c724"
            ]
        ]
    },
    {
        "id": "40b1cc72.88c724",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1722,
        "y": 790.3333740234375,
        "wires": []
    },
    {
        "id": "c83fce28.428bf",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload & verify user",
        "func": "var task_obj = msg.payload_data;\n\nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Invalid access_token, Unable to find user with this access_token.\", data: null};\n}else{\n    \n    var user = msg.payload[0];\n    if(user._id === task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            table                       : task_obj.table, \n            task_name                   : task_obj.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : task_obj.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1772.1666768391929,
        "y": 742.6666437784831,
        "wires": [
            [
                "4ab11ef6.5d901"
            ]
        ]
    },
    {
        "id": "4ab11ef6.5d901",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1951.8334350585938,
        "y": 743.6666870117188,
        "wires": [
            [
                "ed4a8c2e.d5c25",
                "b44dde1d.d45bb"
            ],
            [
                "130267cc.19df08"
            ]
        ]
    },
    {
        "id": "130267cc.19df08",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2138.666748046875,
        "y": 778.3333435058594,
        "wires": []
    },
    {
        "id": "22062247.2620de",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1458.1666259765625,
        "y": 748.3333129882812,
        "wires": [
            [
                "9ffc4b8a.05a308"
            ]
        ]
    },
    {
        "id": "93e62ca5.6291e",
        "type": "comment",
        "z": "505a09c5.621328",
        "name": "Following code referes to \"/api/verfiy\" endpoint. which whill check if verfiy code is valid or not if valid then re-direct to Category screen else re-direct back to login screen",
        "info": "",
        "x": 567.2421875,
        "y": 638.59375,
        "wires": []
    },
    {
        "id": "867a284b.9bfb58",
        "type": "comment",
        "z": "505a09c5.621328",
        "name": "Login `/api/login` flow is following. To check existing number , send verification code, re-direct to verification screen are done by following code.",
        "info": "",
        "x": 503.2421875,
        "y": 76.6015625,
        "wires": []
    },
    {
        "id": "ef28fcd4.2cf89",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1228.6367089152336,
        "y": 1137.5234279073775,
        "wires": [
            [
                "bc8ef36a.41fb7"
            ]
        ]
    },
    {
        "id": "9aef3858.ca7288",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1670.38671875,
        "y": 1134.171875,
        "wires": []
    },
    {
        "id": "80ea7841.d191b8",
        "type": "inject",
        "z": "a1c7b9eb.d6a108",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.625,
        "y": 699.86328125,
        "wires": [
            [
                "61f9abe8.246f44"
            ]
        ]
    },
    {
        "id": "61f9abe8.246f44",
        "type": "function",
        "z": "a1c7b9eb.d6a108",
        "name": "query",
        "func": "msg.payload = {\n    //query   : \"table:users\",\n    selector: {\n        virtual_phone: {\n            \"$regex\": 7696016749\n        }\n    },\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 282.640625,
        "y": 749.0234375,
        "wires": [
            [
                "d1f6368b.872498"
            ]
        ]
    },
    {
        "id": "d1f6368b.872498",
        "type": "cloudant in",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 458.640625,
        "y": 747.0703174360096,
        "wires": [
            [
                "fd2f1781.e91fe8"
            ]
        ]
    },
    {
        "id": "fd2f1781.e91fe8",
        "type": "debug",
        "z": "a1c7b9eb.d6a108",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 633.63671875,
        "y": 752.20703125,
        "wires": []
    },
    {
        "id": "bc8ef36a.41fb7",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1379.1328125,
        "y": 1137.33203125,
        "wires": [
            [
                "ae5bc414.1b17e8"
            ]
        ]
    },
    {
        "id": "ae5bc414.1b17e8",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1530.12890625,
        "y": 1136.7734375,
        "wires": [
            [
                "9aef3858.ca7288"
            ]
        ]
    },
    {
        "id": "ea2bfb04.c0fa08",
        "type": "comment",
        "z": "a1c7b9eb.d6a108",
        "name": "Working:- This endpoint is used to get all records which is in master_table. We need this record while testing the various functionality like, counts and so on,",
        "info": "",
        "x": 570.62890625,
        "y": 128.2265625,
        "wires": []
    },
    {
        "id": "11ecb8ba.24a847",
        "type": "comment",
        "z": "a1c7b9eb.d6a108",
        "name": "Working: This test flows is used to test the search functionality by keyword as google does (Seach by keyword like 12 and so on).",
        "info": "",
        "x": 472.640625,
        "y": 638.2265575639904,
        "wires": []
    },
    {
        "id": "ccf2e209.e5bcb",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2611.390625,
        "y": 412.94140625,
        "wires": [
            [
                "4922b256.fa4e5c"
            ],
            [
                "33a9865a.a4a29a"
            ]
        ]
    },
    {
        "id": "4922b256.fa4e5c",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2806.375,
        "y": 404.42578125,
        "wires": [
            [
                "3fde7ded.61eed2"
            ]
        ]
    },
    {
        "id": "3fde7ded.61eed2",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3009.38671875,
        "y": 403.79296875,
        "wires": []
    },
    {
        "id": "33a9865a.a4a29a",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2749.378876615316,
        "y": 442.75780855119234,
        "wires": [
            []
        ]
    },
    {
        "id": "c723aaf7.ad3a18",
        "type": "http in",
        "z": "6fbb9efc.acecd",
        "name": "",
        "url": "/test_get_page",
        "method": "get",
        "swaggerDoc": "",
        "x": 95,
        "y": 43.05078125,
        "wires": [
            [
                "62471ebc.00405"
            ]
        ]
    },
    {
        "id": "62471ebc.00405",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "get_page_view",
        "func": "var params = msg.payload ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n    msg.req_data = msg.payload;\n    msg.method = \"GET\";\n    msg.url = 'https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?key=[' + params.page_id  + ']';\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 287.625,
        "y": 108.5703125,
        "wires": [
            [
                "bcf05991.8c7788"
            ]
        ]
    },
    {
        "id": "770a6d43.878c84",
        "type": "http request",
        "z": "6fbb9efc.acecd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 613.6328430175781,
        "y": 71.2578125,
        "wires": [
            [
                "96be682a.737af8"
            ]
        ]
    },
    {
        "id": "8cb796bc.4676b8",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "populate_page",
        "func": "var page_data = msg.get_page_view, \n    records = forumlate_data(page_data);\n    \n    msg.payload = records ;\n    return msg;\n\nfunction forumlate_data(db_obj){\n    if(isEmpty(db_obj)){\n        msg.payload = {status: 400, error: true, msg: \"No record found.\", data: null};\n    }else{\n        if(isEmpty(db_obj.rows)){\n            msg.payload = {status: 400, error: true, msg: \"No record found.\", data: null};\n        }else{\n            var res_obj = formulate_page_data(db_obj.rows),\n                user    = formulate_user(msg.user_obj);\n\n            return {\n                page_id : msg.req_data.page_id,\n                user    : user,\n                task    : res_obj.task ,\n                details : res_obj.details\n            };\n        }\n    }\n}\n\nfunction formulate_user(obj){\n    var user = {};\n    if(isEmpty(obj.rows)){\n        return {};\n    }else{\n        for(var i=0; i<obj.rows.length; i++){\n            user.user_id = obj.rows[i].value._id ;\n            user.firstname = obj.rows[i].value.firstname || \"\" ;\n            user.lastname = obj.rows[i].value.lastname || \"\";\n            user.email = obj.rows[i].value.email || \"\";\n            user.phone = obj.rows[i].value.phone || \"\";\n            user.virtual_phone = obj.rows[i].value.virtual_phone || \"\";\n            user.type = obj.rows[i].value.type || {};\n        }\n    }\n    return user;\n}\n\nfunction formulate_page_data(rows){\n    var task_obj = {}, details= [];\n    for(var i=0; i < rows.length; i++){\n        if(rows[i].value.table == \"task_table\"){\n            task_obj = {\n                \"task_id\":\t\t    rows[i].value._id,\n                \"task_name\":\t\trows[i].value.task_name,\n                \"parent_id\":        rows[i].value.parent_id,\n                \"template\": \t\t{\n                    \"header_template\" : formulate_template(rows[i].value.header_template_id),\n                    \"detail_template\" : formulate_template(rows[i].value.detail_template_id),\n                    \"footer_template\" : formulate_template(rows[i].value.footer_template_id)\n                },\n                \"from_page_id\":\t\trows[i].value.from_page_id,\n                \"child_task_id\":    rows[i].value.child_default_task_id,\n                \"date_created\":     rows[i].value.date_created\n            };\n        }\n        \n        if(rows[i].value.table == \"details\"){\n            details.push({\n                \"_id\": \t            rows[i].value._id,\n                \"image\":\t\t    rows[i].value.image,\n                \"to_page_id\": \t    rows[i].value.to_page_id,\n                \"user_id\": \t\t    rows[i].value.user_id,\n                \"task_id\":          rows[i].value.task_id,\n                \"page_id\":          rows[i].value.page_id,\n                \"from_user_id\":     rows[i].value.from_user_id,\n            \t\"user_incoming\":    rows[i].value.user_incoming,\n                \"watson_incoming\":  rows[i].value.watson_incoming,\n                \"type\":             rows[i].value.type,\n                \"date_created\":     rows[i].value.date_created,\n                \"from_user\":        rows[i].value.from_user,\n                \"count\":            rows[i].value.count\n            });\n        }\n    }\n    return {task: task_obj, details: details};\n}\n\nfunction formulate_template(template_id){\n    var template_data = msg.payload;\n    \n    if(isEmpty(template_data.rows)){\n        return template_id;\n    }else{\n        for(var ind=0; ind<template_data.rows.length; ind++){\n            if(template_id == template_data.rows[ind].value._id){\n                return template_data.rows[ind].value;\n            }\n        }\n    }\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1618.6406555175781,
        "y": 68.8203125,
        "wires": [
            [
                "8ffaee3e.2cf29",
                "65e70aa6.d3a114"
            ]
        ]
    },
    {
        "id": "8ffaee3e.2cf29",
        "type": "http response",
        "z": "6fbb9efc.acecd",
        "name": "",
        "x": 1789.6250305175781,
        "y": 32.46484375,
        "wires": []
    },
    {
        "id": "65e70aa6.d3a114",
        "type": "debug",
        "z": "6fbb9efc.acecd",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1809.6367492675781,
        "y": 84,
        "wires": []
    },
    {
        "id": "96be682a.737af8",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "get_user_by_token_view",
        "func": "msg.get_page_view = msg.payload;\nmsg.method = \"GET\";\nmsg.url = 'https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_user_by_token?key=[\"'+ msg.req_data.access_token +'\"]';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 835.6250305175781,
        "y": 70.515625,
        "wires": [
            [
                "87742ee4.6beca"
            ]
        ]
    },
    {
        "id": "87742ee4.6beca",
        "type": "http request",
        "z": "6fbb9efc.acecd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1051.7656555175781,
        "y": 70.75,
        "wires": [
            [
                "30fcfd3a.be93d2"
            ]
        ]
    },
    {
        "id": "30fcfd3a.be93d2",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "template_view",
        "func": "msg.user_obj = msg.payload;\nmsg.method = \"GET\";\nmsg.url = \"https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_templates\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1233.6328430175781,
        "y": 71.51171875,
        "wires": [
            [
                "33843999.9b6d26"
            ]
        ]
    },
    {
        "id": "33843999.9b6d26",
        "type": "http request",
        "z": "6fbb9efc.acecd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1422.0156555175781,
        "y": 70.75,
        "wires": [
            [
                "8cb796bc.4676b8"
            ]
        ]
    },
    {
        "id": "bcf05991.8c7788",
        "type": "switch",
        "z": "6fbb9efc.acecd",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 458.8333435058594,
        "y": 109.66666412353516,
        "wires": [
            [
                "770a6d43.878c84"
            ],
            [
                "f5fcb08c.86bde"
            ]
        ]
    },
    {
        "id": "f5fcb08c.86bde",
        "type": "http response",
        "z": "6fbb9efc.acecd",
        "name": "",
        "x": 596.8333740234375,
        "y": 131.3333282470703,
        "wires": []
    },
    {
        "id": "e44dd183.34921",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "url",
        "func": "var access_token = msg.payload.access_token ,\npage_id      = msg.payload.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/test_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 282.6666564941406,
        "y": 289.6666488647461,
        "wires": [
            [
                "7239a4ab.527fdc"
            ]
        ]
    },
    {
        "id": "39c82b94.dcdc64",
        "type": "http in",
        "z": "6fbb9efc.acecd",
        "name": "",
        "url": "/test_page",
        "method": "get",
        "swaggerDoc": "",
        "x": 97.67446899414062,
        "y": 289.7057101093234,
        "wires": [
            [
                "e44dd183.34921"
            ]
        ]
    },
    {
        "id": "4ca7d9d.58f9128",
        "type": "http response",
        "z": "6fbb9efc.acecd",
        "name": "",
        "x": 982.6665649414062,
        "y": 379.3228988647461,
        "wires": []
    },
    {
        "id": "790758b.20d8da8",
        "type": "http request",
        "z": "6fbb9efc.acecd",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 576.6665344238281,
        "y": 341.6119613647461,
        "wires": [
            [
                "d4cd8997.94a558"
            ]
        ]
    },
    {
        "id": "41a2eb87.d20184",
        "type": "comment",
        "z": "6fbb9efc.acecd",
        "name": "New get_page api endpoint with map view resonse ",
        "info": "",
        "x": 207.67837524414062,
        "y": 236.87757110595703,
        "wires": []
    },
    {
        "id": "6bb8fcf8.84bf44",
        "type": "debug",
        "z": "6fbb9efc.acecd",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 998.6704711914062,
        "y": 286.36193084716797,
        "wires": []
    },
    {
        "id": "d4cd8997.94a558",
        "type": "function",
        "z": "6fbb9efc.acecd",
        "name": "format",
        "func": "var db_records   = msg.payload ;\n    access_token = msg.req_data.access_token ;\n    page_id      = msg.req_data.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users),\n            task_obj        =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);\n        \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  prepare_details\n    \t};\n    } \n}\nreturn msg;\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        for(var d=0; d<detail_data.length; d++){\n            if(check_isDisplay(detail_data[d].display_if_empty)){\n                detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n            }else{\n                detail_data.splice(d, 0);\n            }\n        }\n        msg.detailObj = removeEmptyArrayElements(detailObj);     \n    }\n    \n    return detailObj;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    var obj = {} ;\n    \n    if(isEmpty(id)) return obj;\n    \n    if(isEmpty(arr)){\n        return obj;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                obj = arr[i];\n            }\n        }\n    }    \n\n    return obj;\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n    }\n    return {users: users, templates: templates, details: details, tasks: task_table} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 770.8333129882812,
        "y": 341.6666488647461,
        "wires": [
            [
                "6bb8fcf8.84bf44",
                "4ca7d9d.58f9128"
            ]
        ]
    },
    {
        "id": "7239a4ab.527fdc",
        "type": "switch",
        "z": "6fbb9efc.acecd",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.8333435058594,
        "y": 289.66666412353516,
        "wires": [
            [
                "bfa043b6.6c3d3"
            ],
            [
                "790758b.20d8da8"
            ]
        ]
    },
    {
        "id": "bfa043b6.6c3d3",
        "type": "http response",
        "z": "6fbb9efc.acecd",
        "name": "",
        "x": 545.6665649414062,
        "y": 282.6666488647461,
        "wires": []
    }
]
