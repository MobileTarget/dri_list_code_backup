[
    {
        "id": "5aaca332.83ed4c",
        "type": "tab",
        "label": "Login API "
    },
    {
        "id": "1bc13036.e3b82",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "5e22f743.a6a0b8",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "ecb75f1d.1bfe8",
        "type": "tab",
        "label": "Chatbot Flow"
    },
    {
        "id": "a35e95d3.4f79f8",
        "type": "tab",
        "label": "backup_nodes"
    },
    {
        "id": "d4fc71c6.eee2",
        "type": "tab",
        "label": "working demo's"
    },
    {
        "id": "33a82338.96373c",
        "type": "tab",
        "label": "workaround"
    },
    {
        "id": "bd3a143c.e87078",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "ba4d189b.79c998"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "ba4d189b.79c998",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "e079261f.947b38",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "94340f78.707da",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2ff3abf2.78fcf4",
        "type": "twilio-api",
        "z": "5aaca332.83ed4c",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DoMeNowApp Twilio Service"
    },
    {
        "id": "7bfcbfb0.b23e8",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": ""
    },
    {
        "id": "515a1f24.d62ec",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "292ed10e.c0aa1e",
        "type": "twilio-api",
        "z": "ecb75f1d.1bfe8",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DriList Sms Service for chatbot"
    },
    {
        "id": "ba4d189b.79c998",
        "type": "function",
        "z": "bd3a143c.e87078",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6627c2e.5b9263c",
        "type": "function",
        "z": "e079261f.947b38",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "22848c23.6f9ff4",
        "type": "function",
        "z": "94340f78.707da",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "e355d2e6.ae2c5",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "phone",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "cec4c6e5.f78928"
            ]
        ]
    },
    {
        "id": "64c8860.929b27c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Going to save user if not found in db",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 287,
        "wires": []
    },
    {
        "id": "b5b302a.6e2f",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\n\nmsg.verification_code = rand();\nmsg.access_token = token();\n\n\nif(isEmpty(db_data)) {\n    var userObj = {\n        table       : \"users\",\n        access_token:  msg.access_token,\n        phone       :  parseInt(user_data.phone),\n        virtual_phone: parseInt(user_data.phone),\n        security_level: 0,\n        firstname         : parseInt(user_data.phone) || \"\",\n        lastname          : \"\",\n        code:         msg.verification_code,\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: msg.user_data.device_id || \"\",\n        push_accepted: msg.push_accepted || 1\n    };\n}else {\n    var userObj = db_data[0];\n    \n    userObj.phone           = userObj.phone || parseInt(user_data.phone) ;\n    userObj.virtual_phone   = userObj.virtual_phone || parseInt(user_data.phone) ;\n    userObj.long_url        = userObj.long_url || \"\";\n    userObj.access_token    = msg.access_token ;\n    userObj.security_level  = userObj.security_level;\n    userObj.email           = userObj.email || \"\";\n    userObj.firstname       = userObj.firstname || \"\";\n    userObj.lastname        = userObj.lastname || \"\";\n    userObj.code            = msg.verification_code;\n    userObj.image           = userObj.image || \"\";\n    userObj.device_id       = msg.user_data.device_id || userObj.device_id;\n    userObj.push_accepted   = msg.push_accepted || userObj.push_accepted;\n}\n\n\n\nmsg.security_level = userObj.security_level ;\nmsg.payload = userObj;\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "64c8860.929b27c",
                "236b0354.22847c",
                "822b5d66.8ac45"
            ]
        ]
    },
    {
        "id": "9b820297.38aa",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/login",
        "method": "post",
        "swaggerDoc": "",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e30cf75b.3c38b8",
                "9f3abd51.1122b"
            ]
        ]
    },
    {
        "id": "e30cf75b.3c38b8",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "e355d2e6.ae2c5"
            ]
        ]
    },
    {
        "id": "cec4c6e5.f78928",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by phone",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "13e799d.77bd166"
            ]
        ]
    },
    {
        "id": "13e799d.77bd166",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "b5b302a.6e2f"
            ]
        ]
    },
    {
        "id": "822b5d66.8ac45",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "save user to db",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "82bc720b.688b",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 102,
        "y": 763,
        "wires": [
            [
                "d934be59.31d7e",
                "2bb50a4e.e465a6"
            ]
        ]
    },
    {
        "id": "d934be59.31d7e",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 327,
        "y": 764,
        "wires": [
            [
                "53591a00.2eb7c8"
            ]
        ]
    },
    {
        "id": "53591a00.2eb7c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. access_token",
        "func": "if(isEmpty(msg.request_data.access_token)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.code)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`code` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.device_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`device_id` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.push_accepted)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`push_accepted` is required to fullfil request\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.access_token = msg.request_data.access_token; \n    msg.payload = {\n        query: \"table: users AND access_token:\"+ msg.request_data.access_token\n    };    \n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 527,
        "y": 764,
        "wires": [
            [
                "6e9ce6fa.adc298"
            ]
        ]
    },
    {
        "id": "236b0354.22847c",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "security_level",
        "property": "security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "93b10df0.8c22c"
            ],
            [
                "682abb6d.98ae74"
            ]
        ]
    },
    {
        "id": "682abb6d.98ae74",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. return menu page",
        "func": "//node.warn(\"comes in this case.....\");\nvar response = {\n    \"page_id\":      2,\n    \"access_token\": msg.access_token\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 673,
        "y": 442,
        "wires": [
            [
                "e7e8f1c1.5fdeb",
                "c9076904.e68eb8"
            ]
        ]
    },
    {
        "id": "c9076904.e68eb8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 933,
        "y": 480,
        "wires": []
    },
    {
        "id": "3d8a6f38.8353d",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by token",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 908.9999694824219,
        "y": 802.0000305175781,
        "wires": [
            [
                "cd6b4c5.0a66ab"
            ]
        ]
    },
    {
        "id": "cd6b4c5.0a66ab",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 209,
        "y": 844,
        "wires": [
            [
                "589646ee.f417c8"
            ]
        ]
    },
    {
        "id": "589646ee.f417c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].virtual_phone).length == 4){\n        if(request_data.code == 1234){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].virtual_phone).length > 7 &&  String(db_data[0].virtual_phone).length <= 12){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 844,
        "wires": [
            [
                "95e69443.affee8"
            ]
        ]
    },
    {
        "id": "d2d9371d.8c8668",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 989,
        "y": 1004,
        "wires": []
    },
    {
        "id": "95e69443.affee8",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 249,
        "y": 924,
        "wires": [
            [
                "6844749e.b18e1c"
            ],
            [
                "4be9133b.06943c"
            ]
        ]
    },
    {
        "id": "9ad2cef2.8181e",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  2,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 759,
        "y": 944,
        "wires": [
            [
                "d2d9371d.8c8668",
                "2e62384d.25baa8"
            ]
        ]
    },
    {
        "id": "b83750a7.3dda8",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "update security level",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 779,
        "y": 884,
        "wires": []
    },
    {
        "id": "6844749e.b18e1c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0] ,\n    body    = msg.request_data ;\n\ndb_data.security_level = 1 ;\ndb_data.device_id = body.device_id ;\ndb_data.push_accepted = parseInt(body.push_accepted) || 1 ;\n\nmsg.payload = db_data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 924,
        "wires": [
            [
                "9ad2cef2.8181e",
                "b83750a7.3dda8"
            ]
        ]
    },
    {
        "id": "4be9133b.06943c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 1004,
        "wires": [
            [
                "d2d9371d.8c8668",
                "42ea84ba.4a481c"
            ]
        ]
    },
    {
        "id": "9f3abd51.1122b",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 269,
        "y": 142.99999237060547,
        "wires": []
    },
    {
        "id": "2bb50a4e.e465a6",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326,
        "y": 703,
        "wires": []
    },
    {
        "id": "e7e8f1c1.5fdeb",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "menu page",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 934,
        "y": 429,
        "wires": []
    },
    {
        "id": "93b10df0.8c22c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "11. return verify page & ac",
        "func": "var req_body = msg.user_data ;\nif(msg.user_data.phone){\n  \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"access_token\": msg.access_token,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "9b48d0d1.3a54"
            ]
        ]
    },
    {
        "id": "9b48d0d1.3a54",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "8c93eeec.15939"
            ],
            [
                "8e617e0a.63d52"
            ]
        ]
    },
    {
        "id": "8c93eeec.15939",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = \"Your verification code for the DoMeNow app is : \" + code;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "316ae0bc.6e9f3",
                "e2bc87de.c17e78",
                "130f89b6.e85346"
            ]
        ]
    },
    {
        "id": "e2bc87de.c17e78",
        "type": "twilio out",
        "z": "5aaca332.83ed4c",
        "service": "_ext_",
        "twilio": "2ff3abf2.78fcf4",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "316ae0bc.6e9f3",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "5e5d801a.231d",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "130f89b6.e85346",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "5e5d801a.231d"
            ]
        ]
    },
    {
        "id": "8e617e0a.63d52",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "d3dc7932.f1f3a8",
                "3495d52.1d45a2a"
            ]
        ]
    },
    {
        "id": "d3dc7932.f1f3a8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "3495d52.1d45a2a",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "7c9bd36a.800dfc",
        "type": "http in",
        "z": "1bc13036.e3b82",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 85,
        "y": 131.00001525878906,
        "wires": [
            [
                "6ee54ff6.df69e"
            ]
        ]
    },
    {
        "id": "6ee54ff6.df69e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Handler",
        "func": "var req = msg.payload;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    // if(!(\"api\" in req)){\n    //     msg.api_response = \"API_ERROR\";\n    //     msg.payload = {status: 400, error: true, msg: \"Body must must be wrapped with `api` key.\", data: null};\n    // }else{\n    //     msg.req_body = req.api;\n    // }\n    msg.req_body = populate_content(req.app) ;\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    return obj.api;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 245.00001525878906,
        "y": 248.00001525878906,
        "wires": [
            [
                "7d44e24.4d6b11c"
            ]
        ]
    },
    {
        "id": "7d44e24.4d6b11c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 371.0000305175781,
        "y": 389.0000305175781,
        "wires": [
            [
                "25d70d09.b4fa42"
            ],
            [
                "863d36a6.9affc8"
            ]
        ]
    },
    {
        "id": "25d70d09.b4fa42",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 525,
        "y": 266.00001525878906,
        "wires": []
    },
    {
        "id": "863d36a6.9affc8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate body",
        "func": "var body = msg.req_body;\n\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n    msg.access_token  = body.access_token ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 548,
        "y": 530.0000305175781,
        "wires": [
            [
                "2da8026d.28dc2e"
            ]
        ]
    },
    {
        "id": "2da8026d.28dc2e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 668,
        "y": 673.0000305175781,
        "wires": [
            [
                "a2ccf1f4.33b25"
            ],
            [
                "d6ab12c2.6dc92"
            ]
        ]
    },
    {
        "id": "a2ccf1f4.33b25",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 784,
        "y": 590.0000152587891,
        "wires": []
    },
    {
        "id": "d6ab12c2.6dc92",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail_to_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_group_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_to_groups",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_into_group",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 14,
        "x": 815.0001831054688,
        "y": 940.0001220703125,
        "wires": [
            [
                "5a40e3c0.6a7c7c"
            ],
            [
                "7a1fa12a.ae0fc"
            ],
            [
                "af77daa4.7a3808"
            ],
            [
                "1ea39368.4d2cbd"
            ],
            [
                "910f835e.b1997"
            ],
            [
                "8047b1c2.00b14"
            ],
            [
                "b43c0e6e.e29ac"
            ],
            [
                "f22f6e7b.b09f7"
            ],
            [
                "d5a7251d.86fb18"
            ],
            [
                "408043d6.f202ec"
            ],
            [
                "239a4a3b.ed4ef6"
            ],
            [
                "2c021dd8.471292"
            ],
            [
                "6ba779a9.034fd8"
            ],
            [
                "9e907e9.bafc48"
            ]
        ]
    },
    {
        "id": "5a40e3c0.6a7c7c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 158.00003051757812,
        "wires": [
            [
                "8340ddf2.852ea"
            ]
        ]
    },
    {
        "id": "9e907e9.bafc48",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1327.0003204345703,
        "y": 1932.000750541687,
        "wires": [
            [
                "4925e8a7.371308"
            ]
        ]
    },
    {
        "id": "4925e8a7.371308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1501.0004119873047,
        "y": 1931.0007524490356,
        "wires": []
    },
    {
        "id": "fc1044e8.8cfd28",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = isEmpty(msg.child_task_obj) ? null : msg.child_task_obj,\n    timeout             = isEmpty(msg.timeout_obj) ? null : msg.timeout_obj ,\n    location            = isEmpty(msg.location_obj) ? null : msg.location_obj,\n    user                = isEmpty(msg.user_obj) ? null : msg.user_obj,\n    task                = isEmpty(msg.task_obj) ? null : msg.task_obj,\n    user_arr            = msg.users_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id ? [task._id] : null ;\ndetail.intent_task_id                   = task._id ;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = task.child_default_task_id ? return_page_id(form_data.page_id) : 0;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\"private\": \"private\"};\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\n//as per discussion with client on 11th August evening and on Google doc(DoMeNow) Item 8.0 there is not need of \n//detail.watson_incoming messages. so just commneted here may be nedded in future.\n// detail.watson_incoming                  = { \n//                                             message :   \"Watson response to : \" + form_data.note,\n//                                             response : {},\n                                            \n//                                         } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return item[0] ;\n    }else{\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2599.0006408691406,
        "y": 126.62107467651367,
        "wires": [
            [
                "27237117.a1f3ce",
                "72b3a1c3.d8c1",
                "3a83b028.174ce",
                "d4893bd6.73baf8",
                "b9ef6f80.eb9b1",
                "aa6e064d.f28708"
            ]
        ]
    },
    {
        "id": "27237117.a1f3ce",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2832.0001678466797,
        "y": 275.6211438179016,
        "wires": [
            [
                "76034db8.945264"
            ],
            [
                "fb3e5d3b.f550e"
            ]
        ]
    },
    {
        "id": "76034db8.945264",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3029.000175476074,
        "y": 255.62113344669342,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "fb3e5d3b.f550e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    user_obj            = msg.user_obj ? msg.user_obj[0]: {} ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : user_obj._id || detail.user_id,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || \"private\",\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3050.000175476074,
        "y": 297.6211334466934,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "aa1ef719.92f148",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3254.000762939453,
        "y": 256.6211395263672,
        "wires": [
            [
                "f667d3d1.e4d44",
                "4aaf74bf.3f4cac",
                "79a95d3b.fee184"
            ],
            [
                "f667d3d1.e4d44"
            ]
        ]
    },
    {
        "id": "f667d3d1.e4d44",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3446.000778198242,
        "y": 300.62116146087646,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "183d69a0.d38bf6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3722.1968307495117,
        "y": 294.62118434906006,
        "wires": [
            [
                "65c98f5a.2f37d"
            ],
            [
                "36a38d76.bf4c62"
            ]
        ]
    },
    {
        "id": "7894a745.f32498",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3825.1970748901367,
        "y": 189.62118339538574,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "65c98f5a.2f37d",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n    msg.payload = null;\n    msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3935.197090148926,
        "y": 289.04706382751465,
        "wires": [
            [
                "7894a745.f32498",
                "3216a994.9589e6",
                "277523b2.49c11c"
            ]
        ]
    },
    {
        "id": "36a38d76.bf4c62",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3865.1971588134766,
        "y": 352.6211853027344,
        "wires": [
            [
                "90317658.28beb8",
                "7cad6d6c.a42054"
            ]
        ]
    },
    {
        "id": "799f9f2c.20ce4",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2429.031234741211,
        "y": 96.0468807220459,
        "wires": [
            [
                "236b74f3.1c448c"
            ],
            [
                "fc1044e8.8cfd28"
            ]
        ]
    },
    {
        "id": "90317658.28beb8",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4072.196762084961,
        "y": 335.04700660705566,
        "wires": []
    },
    {
        "id": "2e78e0d1.6e91c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var payload         = msg.payload ,\n    task            = msg.task_obj , \n    user            = msg.user_obj, \n    task_id         = msg.task_id; \n    access_token    = msg.access_token;\n    page_id         = msg.page_id;\n    detail          = msg.details_obj;\n\nif(isEmpty(payload.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to populate records from cloudant views\", data: null};\n}else{\n    var db_records  = populate_records(payload.rows),\n        task_obj    = populate_obj(db_records.tasks, task_id),\n        user        = populate_user(db_records.users, access_token);\n    \n    if(isEmpty(task_obj)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n    }else if(isEmpty(user)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n    }else{\n        msg.api_status      = \"API_SUCCESS\";\n        msg.user_obj        = user ;\n        msg.task_obj        = task_obj ;\n        msg.templates_arr   = db_records.templates;\n        msg.details_arr     = db_records.details;\n        msg.users_arr       = db_records.users ;\n        msg.child_task_obj  = task_obj.child_default_task_id ? populate_obj(db_records.tasks, task_obj.child_default_task_id) : null ;\n        msg.timeout_obj     = task_obj.timeout_id ? populate_obj(db_records.timeouts, task_obj.timeout_id) : null;\n        msg.location_obj    = task_obj.location_id ? populate_obj(db_records.locations, task_obj.location_id): null;\n    }\n}\n\nreturn msg;\n\nfunction populate_records(list){\n    var task_arr = [], detail_arr = [], user_arr = [], templates_arr = [], location_arr = [], timeout_arr = [];\n    \n    for(var itr in list){\n        var records = list[itr].value;\n        if(records.table == \"task_table\"){\n            task_arr.push(records);\n        }\n        \n        if(records.table == \"details\"){\n            detail_arr.push(records);\n        }\n        \n        if(records.table == \"users\"){\n            user_arr.push(records);\n        }\n        \n        if(records.table == \"templates\"){\n            templates_arr.push(records);\n        }\n        \n        if(records.table == \"location\"){\n            location_arr.push(records);\n        }\n        \n        if(records.table == \"timeout\"){\n            timeout_arr.push(records);\n        }\n    }\n    var obj = {tasks: task_arr, details: detail_arr, users: user_arr, templates: templates_arr, locations: location_arr, timeouts: timeout_arr};\n    return obj;\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    \n    for(var itr in list){\n        if(id == list[itr]._id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    if(isEmpty(access_token)) return obj;\n    \n    for(var itr in users){\n        if(access_token == users[itr].access_token){\n            obj = users[itr];\n        }\n    }\n    \n    return obj;\n}\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2301.0312271118164,
        "y": 132.04687309265137,
        "wires": [
            [
                "799f9f2c.20ce4"
            ]
        ]
    },
    {
        "id": "236b74f3.1c448c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2562.0312423706055,
        "y": 66.04689884185791,
        "wires": []
    },
    {
        "id": "8340ddf2.852ea",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var access_token = msg.req_body.access_token ;\nvar table_data = msg.req_body.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_id = table_data.task_id ; \n    msg.access_token = access_token ;\n    msg.page_id = table_data.page_id  ;\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1592.031265258789,
        "y": 130.0468978881836,
        "wires": [
            [
                "855a021b.8aaaa"
            ]
        ]
    },
    {
        "id": "34f7000c.78479",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 1,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4422.198173522949,
        "y": 288.04705238342285,
        "wires": [
            [
                "b85632f.f6942d",
                "60ebc840.c4c168"
            ]
        ]
    },
    {
        "id": "7cad6d6c.a42054",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4039.1967544555664,
        "y": 389.0470190048218,
        "wires": [
            [
                "f49286a3.60bd48"
            ]
        ]
    },
    {
        "id": "f49286a3.60bd48",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4212.198379516602,
        "y": 388.0470218658447,
        "wires": [
            [
                "34f7000c.78479"
            ]
        ]
    },
    {
        "id": "855a021b.8aaaa",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1777,
        "y": 131.0000114440918,
        "wires": [
            [
                "ebd20539.3bd978"
            ],
            [
                "c8e697b5.8cbfb8"
            ]
        ]
    },
    {
        "id": "ebd20539.3bd978",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1975,
        "y": 101.0000114440918,
        "wires": []
    },
    {
        "id": "b85632f.f6942d",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "User Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4678.0007400512695,
        "y": 262.00021052360535,
        "wires": []
    },
    {
        "id": "7936c18d.ddbd1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4307.165946960449,
        "y": 195.00018692016602,
        "wires": []
    },
    {
        "id": "4aaf74bf.3f4cac",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Optional Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3458.9696044921875,
        "y": 188.57428121566772,
        "wires": []
    },
    {
        "id": "72b3a1c3.d8c1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2804.9692420959473,
        "y": 20,
        "wires": []
    },
    {
        "id": "3a83b028.174ce",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2851.9689178466797,
        "y": 232.5742688179016,
        "wires": [
            [
                "d099693.f745198"
            ]
        ]
    },
    {
        "id": "d099693.f745198",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 3028.968925476074,
        "y": 212.57425844669342,
        "wires": []
    },
    {
        "id": "dc6e47ae.829f28",
        "type": "http in",
        "z": "5e22f743.a6a0b8",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "b86a2cb5.013be"
            ]
        ]
    },
    {
        "id": "b86a2cb5.013be",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    var obj = populate_content(req.app) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `app` param json.\", data: null};\n    }else{\n        msg.req_params = obj.data.api;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "d1f9a02e.3a168"
            ]
        ]
    },
    {
        "id": "d1f9a02e.3a168",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "e21a6625.bbee68"
            ],
            [
                "194125ed.652ada"
            ]
        ]
    },
    {
        "id": "e21a6625.bbee68",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 598.7656173706055,
        "y": 204.75000381469727,
        "wires": []
    },
    {
        "id": "194125ed.652ada",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    if(!checkObj(params.content)){\n        msg.payload_type = params.type ;\n        msg.payload_content = params.content;\n    }else{\n        var obj = populate_content(params.content) ;\n        if(obj.error){\n          msg.api_response = \"API_ERROR\";\n          msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n        }else{\n            msg.payload_type    = params.type ;\n            msg.payload_content = obj.data ;\n        }\n    }\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}\n\nfunction checkObj(obj){\n    if(typeof obj == \"string\") return true;\n    else return false ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "fac0f585.2f5b08"
            ]
        ]
    },
    {
        "id": "fac0f585.2f5b08",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "bd921431.7fd498"
            ],
            [
                "b40ce815.147eb8"
            ]
        ]
    },
    {
        "id": "bd921431.7fd498",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 872.7656364440918,
        "y": 245.7500057220459,
        "wires": []
    },
    {
        "id": "b40ce815.147eb8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data_for_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_assistant_by_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_users_groups",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 9,
        "x": 753.7656707763672,
        "y": 649.7500228881836,
        "wires": [
            [
                "a86b54c1.473c78"
            ],
            [
                "4151b7c3.f7cfa8"
            ],
            [
                "fe339820.cb4b28"
            ],
            [
                "a68f3e81.95d52"
            ],
            [
                "6cc2848f.b7b8bc"
            ],
            [
                "dfc9e242.d78f4"
            ],
            [
                "e718dba4.a1d948"
            ],
            [
                "645bcdba.991044"
            ],
            [
                "65c0dc87.cb51f4"
            ]
        ]
    },
    {
        "id": "96c3c68.c7d7338",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2286.015869140625,
        "y": 425.00006103515625,
        "wires": []
    },
    {
        "id": "af77daa4.7a3808",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_task",
        "func": "var access_token = msg.access_token ;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            query : \"table:users AND access_token:\" + access_token ,\n            sort  : \"_id<string>\"\n        };\n    }\n    \nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1280.015625,
        "y": 403.0000305175781,
        "wires": [
            [
                "71cf9c70.c94964"
            ]
        ]
    },
    {
        "id": "e46a487a.d682b8",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2146.015869140625,
        "y": 368.0001525878906,
        "wires": []
    },
    {
        "id": "3ed49608.46eeba",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2130.015869140625,
        "y": 425.0000305175781,
        "wires": [
            [
                "96c3c68.c7d7338"
            ]
        ]
    },
    {
        "id": "1ea39368.4d2cbd",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_user",
        "func": "var req_body        = msg.payload_data ,\n    access_token    = msg.access_token ;\n\nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:\"+ req_body.table +\"AND access_token:\"+ access_token +\" AND _id:\" + req_body._id ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1284.265625,
        "y": 530.25,
        "wires": [
            [
                "1c62297c.51d5f7"
            ]
        ]
    },
    {
        "id": "1c62297c.51d5f7",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1434.2656860351562,
        "y": 555.25,
        "wires": [
            [
                "d5520305.66f6a"
            ],
            [
                "580ba2f4.08d5ec"
            ]
        ]
    },
    {
        "id": "910f835e.b1997",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_short_detail",
        "func": "var body            = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else if(isEmpty(body.detail_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`detail_id` is required to update detail\", data: body};\n}else if(isEmpty(body.page_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is required to update task detail\", data: body};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload_content = {\n        access_token : access_token,\n        content: body\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1306.1407470703125,
        "y": 725.5000610351562,
        "wires": [
            [
                "3f0f1c5b.139264"
            ]
        ]
    },
    {
        "id": "580ba2f4.08d5ec",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1587.7656860351562,
        "y": 558.25,
        "wires": [
            [
                "7098655a.6d389c"
            ]
        ]
    },
    {
        "id": "7098655a.6d389c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find user with `access_token` and `user_id`.\", data: req_body};    \n}else{\n    user_obj.firstname  = req_body.firstname ;\n    user_obj.lastname   = req_body.lastname  ;\n    user_obj.email      = req_body.email     ;\n    user_obj.phone      = req_body.phone     ;\n    //user_obj.image      = req_body.image     ;\n    user_obj.timezone   = req_body.timezone  ;\n    \n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = user_obj ;\n    \n    msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1729.7656936645508,
        "y": 591.2500123977661,
        "wires": [
            [
                "ab068161.d3be6"
            ]
        ]
    },
    {
        "id": "db602985.e84178",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2056.765937805176,
        "y": 562.2500123977661,
        "wires": []
    },
    {
        "id": "464e533f.20e15c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2048.765866597493,
        "y": 605.2500149408976,
        "wires": [
            [
                "92ee4dcb.6a568",
                "a8a5a4a.1688658"
            ]
        ]
    },
    {
        "id": "92ee4dcb.6a568",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2202.765998840332,
        "y": 605.2500381469727,
        "wires": []
    },
    {
        "id": "d5520305.66f6a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1586.6289672851562,
        "y": 514.41015625,
        "wires": []
    },
    {
        "id": "65c0dc87.cb51f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1214.8338928222656,
        "y": 1137.0002999305725,
        "wires": [
            [
                "226565c.1ddb69a"
            ]
        ]
    },
    {
        "id": "226565c.1ddb69a",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1353.8338012695312,
        "y": 1138.6669742266338,
        "wires": []
    },
    {
        "id": "42ea84ba.4a481c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "login page return again",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 718.8333435058594,
        "y": 1095.0000178019206,
        "wires": []
    },
    {
        "id": "2e62384d.25baa8",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "menu page return ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1046.8334045410156,
        "y": 929.0000178019206,
        "wires": []
    },
    {
        "id": "6e9ce6fa.adc298",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 699.8333435058594,
        "y": 733.6667175292969,
        "wires": [
            [
                "3d8a6f38.8353d"
            ],
            [
                "6c013f75.c043a"
            ]
        ]
    },
    {
        "id": "6c013f75.c043a",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "",
        "x": 872.8333435058594,
        "y": 738.6667175292969,
        "wires": []
    },
    {
        "id": "ab068161.d3be6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1868.5000686645508,
        "y": 590.6666994094849,
        "wires": [
            [
                "db602985.e84178",
                "464e533f.20e15c"
            ],
            [
                "16048eac.d74bc1"
            ]
        ]
    },
    {
        "id": "3f0f1c5b.139264",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1475.83349609375,
        "y": 725.3334350585938,
        "wires": [
            [
                "64cc674e.592e58"
            ],
            [
                "3686ccd8.9cc104"
            ]
        ]
    },
    {
        "id": "e44c9b58.0a1a98",
        "type": "http in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "url": "/master_table",
        "method": "get",
        "swaggerDoc": "",
        "x": 152.8333282470703,
        "y": 206.33334350585938,
        "wires": [
            [
                "1f200840.541168"
            ]
        ]
    },
    {
        "id": "e9dd080d.c61978",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 578.8333740234375,
        "y": 208.33334350585938,
        "wires": []
    },
    {
        "id": "1f200840.541168",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 362.8333435058594,
        "y": 210.33333587646484,
        "wires": [
            [
                "e9dd080d.c61978"
            ]
        ]
    },
    {
        "id": "84a08fd8.07adc",
        "type": "ibmpush",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "18ABCF10-329C-4D7E-AD4E-F6434DC7A158",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 515.8333435058594,
        "y": 361.99999237060547,
        "wires": []
    },
    {
        "id": "6b0b4ee5.9c82a",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "Start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 136.8333282470703,
        "y": 360.6666488647461,
        "wires": [
            [
                "7145a6de.9551d8"
            ]
        ]
    },
    {
        "id": "7145a6de.9551d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "    msg.payload = \"This is a demo pushnotificaiton. Please Ignore Thanks.\";\n    msg.notificationType = \"device_id\";\n    msg.identifiers= \"89a5847f-3d15-301c-924f-c0b0cf0ac493,\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 328.8333435058594,
        "y": 360.6666488647461,
        "wires": [
            [
                "84a08fd8.07adc",
                "d62af99d.3e01e8"
            ]
        ]
    },
    {
        "id": "d62af99d.3e01e8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 501.8333435058594,
        "y": 408.33333587646484,
        "wires": []
    },
    {
        "id": "dc4d3aa5.486358",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.8333282470703,
        "y": 513.6666488647461,
        "wires": [
            [
                "c1967280.e7e2f"
            ]
        ]
    },
    {
        "id": "c1967280.e7e2f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "// url, if set, is used as the url of the request. Must start with http: or https:\n// method, if set, is used as the HTTP method of the request. Must be one of GET, PUT, POST, PATCH or DELETE (default: GET)\n// headers, if set, should be an object containing field/value pairs to be added as request headers\n// payload is sent as the body of the request\n\n\nmsg.url = \"https://mobile.ng.bluemix.net/imfpush/v1/apps/3d321d52-0b21-485a-8669-7e19684b070b/messages\";\nmsg.method = \"POST\";\nmsg.headers = {\n    \"appSecret\": \"26328303-fc96-4379-a53c-7b2dbad74b00\"\n};\nmsg.payload = {\n    message: {\n        alert: \"Hello World from an SMS message using node-red rest api client.\"\n    },\n    notificationType: 3,\n    target: {\n        deviceIds: [\"89a5847f-3d15-301c-924f-c0b0cf0ac493\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320.8333435058594,
        "y": 512.0000381469727,
        "wires": [
            [
                "87ead1cb.2c652",
                "bcfdb917.35d468"
            ]
        ]
    },
    {
        "id": "87ead1cb.2c652",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 494.8333435058594,
        "y": 511.33336639404297,
        "wires": [
            [
                "8426d48b.796de8"
            ]
        ]
    },
    {
        "id": "8426d48b.796de8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 673.8333435058594,
        "y": 511.00003814697266,
        "wires": []
    },
    {
        "id": "bcfdb917.35d468",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 488.8333435058594,
        "y": 564.0000839233398,
        "wires": []
    },
    {
        "id": "c4de788b.6c71e8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Not Working:- Below flow is not-working with IBM push node. So used Rest Api to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 470.8333435058594,
        "y": 306.6666488647461,
        "wires": []
    },
    {
        "id": "943900a.56612",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working:- Following Flow is working with the rest endpoint and is working well to send push notification to particular device.",
        "info": "Below flow is notworking with IBM push so used Rest Api to send push notification to particular device.",
        "x": 464.6666564941406,
        "y": 461.6666564941406,
        "wires": []
    },
    {
        "id": "c10eb2f7.4f475",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1580.1666259765625,
        "y": 403.6667175292969,
        "wires": [
            [
                "c15cd6e0.e7c778"
            ],
            [
                "175f2640.7b875a"
            ]
        ]
    },
    {
        "id": "175f2640.7b875a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1704,
        "y": 444.3334045410156,
        "wires": []
    },
    {
        "id": "c15cd6e0.e7c778",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload & verify user",
        "func": "var task_obj = msg.payload_data;\n\nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Invalid access_token, Unable to find user with this access_token.\", data: null};\n}else{\n    \n    var user = msg.payload[0];\n    \n    if(user._id === task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            table                       : task_obj.table, \n            task_name                   : task_obj.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : task_obj.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1754.1666768391929,
        "y": 396.6666742960613,
        "wires": [
            [
                "df43328c.e54dc"
            ]
        ]
    },
    {
        "id": "df43328c.e54dc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1926.8336944580078,
        "y": 396.6666660308838,
        "wires": [
            [
                "e46a487a.d682b8",
                "3ed49608.46eeba"
            ],
            [
                "97975b91.8cf308"
            ]
        ]
    },
    {
        "id": "97975b91.8cf308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2125.6669921875,
        "y": 475.33331298828125,
        "wires": []
    },
    {
        "id": "71cf9c70.c94964",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1440.1666259765625,
        "y": 402.3333435058594,
        "wires": [
            [
                "c10eb2f7.4f475"
            ]
        ]
    },
    {
        "id": "bfd24bae.86b5d8",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Following code referes to \"/api/verfiy\" endpoint. which whill check if verfiy code is valid or not if valid then re-direct to Category screen else re-direct back to login screen",
        "info": "",
        "x": 567.2421875,
        "y": 638.59375,
        "wires": []
    },
    {
        "id": "aa4a7047.22dfa",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Login `/api/login` flow is following. To check existing number , send verification code, re-direct to verification screen are done by following code.",
        "info": "",
        "x": 503.2421875,
        "y": 76.6015625,
        "wires": []
    },
    {
        "id": "fe339820.cb4b28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1188.6367492675781,
        "y": 399.52345848083496,
        "wires": [
            [
                "7a96b596.327adc"
            ]
        ]
    },
    {
        "id": "7ecc3796.ce8288",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1630.3867591023445,
        "y": 396.1719055734575,
        "wires": []
    },
    {
        "id": "b640bb8a.0d1a78",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 131.625,
        "y": 699.86328125,
        "wires": [
            [
                "f14031a7.d2127"
            ]
        ]
    },
    {
        "id": "f14031a7.d2127",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "query",
        "func": "msg.payload = {\n    //query   : \"table:users\",\n    selector: {\n        virtual_phone: {\n            \"$regex\": 7696016749\n        }\n    },\n    sort: \"_id<string>\"\n};\n\n\nnode.log(\"Log\");\nnode.warn(\"Warning\");\nnode.error(\"Error\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 282.640625,
        "y": 749.0234375,
        "wires": [
            [
                "27a7ea4.0427116"
            ]
        ]
    },
    {
        "id": "27a7ea4.0427116",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 458.640625,
        "y": 747.0703174360096,
        "wires": [
            [
                "c051cc99.0d468"
            ]
        ]
    },
    {
        "id": "c051cc99.0d468",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 643.63671875,
        "y": 752.20703125,
        "wires": []
    },
    {
        "id": "7a96b596.327adc",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1339.1328528523445,
        "y": 399.3320618234575,
        "wires": [
            [
                "9d835ace.95af38"
            ]
        ]
    },
    {
        "id": "9d835ace.95af38",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1490.1289466023445,
        "y": 398.7734680734575,
        "wires": [
            [
                "7ecc3796.ce8288"
            ]
        ]
    },
    {
        "id": "e64d7a99.c0ee48",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working:- This endpoint is used to get all records which is in master_table. We need this record while testing the various functionality like, counts and so on,",
        "info": "",
        "x": 570.62890625,
        "y": 128.2265625,
        "wires": []
    },
    {
        "id": "a6006a6b.5e62c8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Working: This test flows is used to test the search functionality by keyword as google does (Seach by keyword like 12 and so on).",
        "info": "",
        "x": 472.640625,
        "y": 638.2265575639904,
        "wires": []
    },
    {
        "id": "d4893bd6.73baf8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2805.359630584717,
        "y": 104.51562023162842,
        "wires": [
            [
                "d62930a9.21f02"
            ],
            [
                "f71aaf5f.47b0e"
            ]
        ]
    },
    {
        "id": "d62930a9.21f02",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2993.343761444092,
        "y": 61.999996185302734,
        "wires": [
            [
                "56701aa1.5fe244"
            ]
        ]
    },
    {
        "id": "56701aa1.5fe244",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3207.3554916381836,
        "y": 62.367183685302734,
        "wires": []
    },
    {
        "id": "f71aaf5f.47b0e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2935.3476638793945,
        "y": 116.33201789855957,
        "wires": [
            []
        ]
    },
    {
        "id": "d5fe17cb.0cff78",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "url",
        "func": "var access_token = msg.payload.access_token ,\npage_id      = msg.payload.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://37924750-e42d-41f1-b52e-f70ee3d5e012-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 287.6666564941406,
        "y": 87.66665774956334,
        "wires": [
            [
                "aaa1ac9b.a6f43"
            ]
        ]
    },
    {
        "id": "2ea0fa8a.ee9776",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/test_page",
        "method": "get",
        "swaggerDoc": "",
        "x": 102.67446899414062,
        "y": 87.70571899414062,
        "wires": [
            [
                "d5fe17cb.0cff78"
            ]
        ]
    },
    {
        "id": "58dd2405.685fdc",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1406.6666107177734,
        "y": 174.322904586792,
        "wires": []
    },
    {
        "id": "64c6f779.f34ee8",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 581.6665344238281,
        "y": 139.61197024956334,
        "wires": [
            [
                "6ca781dd.6c20f"
            ]
        ]
    },
    {
        "id": "100815fe.57d97a",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "New get_page api endpoint with map view resonse ",
        "info": "",
        "x": 212.67837524414062,
        "y": 34.87757999077428,
        "wires": []
    },
    {
        "id": "ffed475a.8056c8",
        "type": "debug",
        "z": "d4fc71c6.eee2",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 1432.6705169677734,
        "y": 81.36193656921387,
        "wires": []
    },
    {
        "id": "f5002ded.ccc75",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "format",
        "func": "var db_records   = msg.db_records ,\n    counts       = msg.count_objs ,\n    access_token = msg.req_data.access_token ,\n    page_id      = msg.req_data.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users),\n            task_obj        =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);\n        \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  prepare_details\n    \t};\n    } \n}\nreturn msg;\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        for(var d=0; d<detail_data.length; d++){\n            if(check_isDisplay(detail_data[d].display_if_empty)){\n                detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n            }else{\n                detail_data.splice(d, 0);\n            }\n        }\n        msg.detailObj = removeEmptyArrayElements(detailObj);     \n    }\n    \n    return detailObj;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    var obj = {} ;\n    \n    if(isEmpty(id)) return obj;\n    \n    if(isEmpty(arr)){\n        return obj;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                obj = arr[i];\n            }\n        }\n    }    \n\n    return obj;\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n    }\n    return {users: users, templates: templates, details: details, tasks: task_table} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1194.8333702087402,
        "y": 138.666654586792,
        "wires": [
            [
                "ffed475a.8056c8",
                "58dd2405.685fdc"
            ]
        ]
    },
    {
        "id": "aaa1ac9b.a6f43",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 423.8333435058594,
        "y": 87.6666730083524,
        "wires": [
            [
                "ee2e5570.96b418"
            ],
            [
                "64c6f779.f34ee8"
            ]
        ]
    },
    {
        "id": "ee2e5570.96b418",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 550.6665649414062,
        "y": 80.66665774956334,
        "wires": []
    },
    {
        "id": "a86b54c1.473c78",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1205,
        "y": 199.83982849121094,
        "wires": [
            [
                "aa8e7501.202a68"
            ]
        ]
    },
    {
        "id": "aa8e7501.202a68",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1485.9961547851562,
        "y": 62.76952362060547,
        "wires": [
            [
                "4fe8c497.83a2ac"
            ],
            [
                "3e8369c8.233d56"
            ]
        ]
    },
    {
        "id": "4fe8c497.83a2ac",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1628.0078125,
        "y": 33,
        "wires": []
    },
    {
        "id": "3e8369c8.233d56",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1624.6171875,
        "y": 97.8515625,
        "wires": [
            [
                "debbb61b.960a88"
            ]
        ]
    },
    {
        "id": "debbb61b.960a88",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1760.7838745117188,
        "y": 97.85157775878906,
        "wires": [
            [
                "f2f1d34c.27bd3"
            ],
            [
                "1588c1f9.35643e"
            ]
        ]
    },
    {
        "id": "f2f1d34c.27bd3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1887.6170959472656,
        "y": 90.8515625,
        "wires": []
    },
    {
        "id": "1588c1f9.35643e",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1918.6170654296875,
        "y": 149.796875,
        "wires": [
            [
                "9dc55849.0108d8"
            ]
        ]
    },
    {
        "id": "3a122834.a215b8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "format",
        "func": "var db_records              = msg.db_records ,\n    counts                  = msg.payload ,\n    access_token            = msg.payload_content.access_token ,\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [],\n    page_id                 = msg.payload_content.page_id ;\n\n//msg.updated_user_task = []; //this will hold the user_task is not present in database.\nmsg.updated_user_task = {}; //this will hold the user_task is not present in database.\nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.isUpdateUserTask = false; \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    // var result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n    //     detail = result.detail_array ;\n    \n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    \n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_obj.user_tasks); \n\n            if( isEmpty(isUserTaskExits)){ //check if already user_task is not present for that user. if not then do the following steps\n                populate_ancestors(details[loop].page_id, db_obj.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                populate_decendents(details[loop].page_id, db_obj.details); //calculating sub childs _id with current requested page_id\n     \n                msg.updated_user_task = {   // create user_task record if user_task is not present in database \n                    table           : \"user_task\",\n                \ttask_id \t\t: task_obj._id,\n                \tuser_id\t\t\t: user_obj.user_id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tsynchronized    : 1,\n                    status          : 0, \n                \tdate_updated\t: null,\t\n                \tparent_id\t\t: task_obj._id,\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent_counts_array,\n                \tcount_status\t: {\n                \t   active       : 1,\n                \t   unread       : 0,\n                \t},\n                \tcount\t\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0,\n                \t},\n                \tcount_if\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0\n                \t},\n                \ttemplates\t\t: {},\n                \ttimeout\t\t\t: {},\n                \tcreatedAt       : new Date().getTime()\n                };\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n                \n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                details[loop].count.active = detail_count.active; \n                details[loop].count.unread = detail_count.unread;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n    if(!isEmpty(msg.updated_user_task))  msg.isUpdateUserTask = true; \n    \n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n    \n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    \n    if(isEmpty(obj)) return {};\n    if(isEmpty(user_tasks)) return {};\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj.user_id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            return user_tasks[loop];\n        }\n    }\n    \n    return {};\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id);\n                }\n                if(!isEmpty(task_arr[index].parent_id)) {\n                    populate_ancestors( task_arr[index].parent_id, db_obj.tasks, \"parent_id\"); \n                }\n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, db_obj.tasks ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id);\n                        populate_ancestors( task_arr[itr].parent_id, db_obj.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr, type){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id);\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_obj.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else if(\"dri_main\" in detail.type){\n            if( \"dri_main\" in user_obj.type){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return true;\n        }\n    }\n}\n// function get_page_array(detail_array){\n    \n//     for(var itr = 0 ; itr < detail_array.length; itr++){\n//         var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n//         if(detail_array[itr].to_page_id){\n//             count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n//             if(check_obj(count) > 0){\n//                 current_count_active = count.active ;\n//                 current_count_unread = count.unread ;\n                \n//                 if(!isEmpty(user_obj)){\n//                     update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n//                 } \n//             }\n//         }else{\n//             current_count_active = detail_array[itr].count.active ;\n//             current_count_unread = detail_array[itr].count.unread ;\n//         }\n//         active = active + current_count_active ;\n//         unread = unread + current_count_unread ;\n        \n//         if(detail_array[itr].count){\n//             detail_array[itr].count.active = active ;\n//             detail_array[itr].count.unread = unread ;\n//         }\n//     }\n\n//     return {\n//         detail_array :   detail_array,\n//     };\n// }\n\n// function update_user_task_record(obj, update_parent){\n\n//     var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n//         create_user_task_flag = true, ancestors_array= [];\n    \n//     if (check_obj(user_task_obj) > 0){\n    \t\n//     \tif (user_task_obj.user_id == obj.user_id){\n//     \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n//     \t} \n    \t\n//     \tuser_task_obj.synchronized          = obj.synch ;\n//         user_task_obj.date_updated          = new Date().toJSON();\n\n//         if(!user_task_obj.update_read){\n//             if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n//                 user_task_obj.count.unread += 1 ;  \n//             }\n//         }\n    \n//         if(!user_task_obj.update_active){\n//             if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n//                 user_task_obj.count.active += 1 ;  \n//             }\n//         }\n    \n//         if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n\n//     }\n    \n//     if ( create_user_task_flag ) {\n        \n//         if(task_obj.parent_id){\n//             var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n//             if(check_obj(if_user_task) > 0){\n//                 ancestors_array = if_user_task.ancestors ;    \n\n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n//                     ancestors_array.push(task_obj.parent_id);\n//                 }\n//             }else{\n                \n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n//             }\n//         }\n        \n//         msg.updated_user_task = {\n//             table           : \"user_task\",\n//         \ttask_id \t\t: obj.task_id,\n//         \tuser_id\t\t\t: obj.user_id,\n//         \tpage_id         : parseInt(page_id),\n//         \tupdate_read     : 0,\n//         \tupdate_active   : 0, \n//         \tsynchronized    : 1,\n//             status          : 0, \n//         \tdate_updated\t: null,\t\n//         \tparent_id\t\t: obj.task_id,\n//         \tancestors       : ancestors_array, \n//         \tcount_status\t: {\n//         \t   active       : 1,\n//         \t   unread       : 0,\n//         \t},\n//         \tcount\t\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0,\n//         \t},\n//         \tcount_if\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0\n//         \t},\n//         \ttemplates\t\t: {},\n//         \ttimeout\t\t\t: {},\n//         \tcreatedAt       : new Date().getTime()\n//         };\n//     }else{\n//         msg.updated_user_task = user_task_obj ;\n//     }\n    \n//     msg.isUpdateUserTask = true ;\n// }\n\n// function return_user_task_obj(user_id, task_id){\n//     var obj = {}, user_task_arr = db_obj.user_tasks ;\n//     if(user_task_arr !== null && user_task_arr !== undefined){\n//         for(var i=0; i< user_task_arr.length; i++){\n//             if(\n//                 user_task_arr[i].user_id        == user_id &&\n//                 user_task_arr[i].task_id        == task_id \n//             ){\n//                     obj = user_task_arr[i];\n//             }\n//         }\n//     }\n//     return obj ;\n// }\n\n\n// function get_sub_child_count(to_page_id){\n//     var count = {active:0, unread: 0}, details = db_obj.details;\n    \n//     for(var itr = 0; itr < details.length; itr++){\n//         if(to_page_id == details[itr].page_id){\n//             if(details[itr].count_status){\n//                 count.active += details[itr].count_status.active ;\n//                 count.unread += details[itr].count_status.unread ;\n//             }\n//         }\n//     }\n//     return count;\n// }\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else if(\n                    (\"dri_main\" in detail_data[d].type) && (\"dri_main\" in user_obj.type) \n                ){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n\n                    if( check_isDisplay(detail_data[d].display_if_empty) && \n                        (\"public\" in detail_data[d].type) \n                    ){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2431.784008026123,
        "y": 146.85156059265137,
        "wires": [
            [
                "88651594.c6f868",
                "8f00693.57a2a98"
            ]
        ]
    },
    {
        "id": "1edbee6.07e3a12",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Bulk delete Api endpoint ",
        "info": "",
        "x": 137.640625,
        "y": 214.4375,
        "wires": []
    },
    {
        "id": "b7cef2a8.52021",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/bulk_delete",
        "method": "post",
        "swaggerDoc": "",
        "x": 116.625,
        "y": 263.80859375,
        "wires": [
            [
                "73cab5ca.cd4a5c"
            ]
        ]
    },
    {
        "id": "73cab5ca.cd4a5c",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "delete_detail",
        "func": "var body = msg.payload.table_data,\n    token = msg.payload.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/bulk_delete\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 295.765625,
        "y": 263.75,
        "wires": [
            [
                "d952cdf3.3c419"
            ]
        ]
    },
    {
        "id": "50bcb927.87ee88",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 608.6328125,
        "y": 316.6796875,
        "wires": [
            [
                "99fc1f33.fffac"
            ]
        ]
    },
    {
        "id": "99fc1f33.fffac",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n               \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 818.12890625,
        "y": 316.24609375,
        "wires": [
            [
                "f8f0ffa1.94802"
            ]
        ]
    },
    {
        "id": "fb7ff8d7.3b4cb8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1118.125,
        "y": 271.1484375,
        "wires": []
    },
    {
        "id": "d952cdf3.3c419",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 430.62890625,
        "y": 263.66796875,
        "wires": [
            [
                "c6e12c55.6d9b6"
            ],
            [
                "50bcb927.87ee88"
            ]
        ]
    },
    {
        "id": "c6e12c55.6d9b6",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 567.62890625,
        "y": 258.14453125,
        "wires": []
    },
    {
        "id": "f8f0ffa1.94802",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 990.375,
        "y": 316.6796875,
        "wires": [
            [
                "fb7ff8d7.3b4cb8"
            ],
            [
                "2b91f6a2.a6914a"
            ]
        ]
    },
    {
        "id": "fc9b1532.533208",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1419.515625,
        "y": 348.75,
        "wires": []
    },
    {
        "id": "88651594.c6f868",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "isUpdateUserTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2587.8833770751953,
        "y": 148.92577934265137,
        "wires": [
            [
                "38dfbf7e.14c96",
                "5c26a1e3.6989c"
            ],
            [
                "e2be2d17.4c36"
            ]
        ]
    },
    {
        "id": "2b91f6a2.a6914a",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1135.640625,
        "y": 349.18359375,
        "wires": [
            [
                "6ed42918.79f7c8"
            ]
        ]
    },
    {
        "id": "6ed42918.79f7c8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1294.62890625,
        "y": 348.9921875,
        "wires": [
            [
                "fc9b1532.533208"
            ]
        ]
    },
    {
        "id": "945454dc.62c3c8",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 107.5078125,
        "y": 1222.5234375,
        "wires": [
            [
                "5d46a223.4bf9ec"
            ],
            [
                "ec526330.9060b"
            ]
        ]
    },
    {
        "id": "5d46a223.4bf9ec",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 248.50778742134662,
        "y": 1177.0078077614307,
        "wires": []
    },
    {
        "id": "ec526330.9060b",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 270.5078125,
        "y": 1249.3203125,
        "wires": [
            [
                "108ef0ea.5be14f"
            ]
        ]
    },
    {
        "id": "108ef0ea.5be14f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate",
        "func": "var user = msg.payload ;\n    \n    if(isEmpty(user)){\n        msg.api_status  = \"API_ERROR\"    ;\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n    }else{\n        msg.user_obj    = user[0];\n        msg.payload     = {\n            query   : \"table:details AND _id:\" + msg.detail_id.toString() ,\n            sort    : \"_id<string>\"\n        };\n    }\n    \nnode.warn(msg.payload);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 440.5234375,
        "y": 1275.7109375,
        "wires": [
            [
                "c626eec2.d2c67"
            ]
        ]
    },
    {
        "id": "c626eec2.d2c67",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 597.5155857056391,
        "y": 1274.5312452614307,
        "wires": [
            [
                "afde8207.43e19"
            ],
            [
                "b4b55fa3.d298b"
            ]
        ]
    },
    {
        "id": "afde8207.43e19",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 721.5078125,
        "y": 1243.5,
        "wires": []
    },
    {
        "id": "b4b55fa3.d298b",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 739.5234375,
        "y": 1299.3125,
        "wires": [
            [
                "c7cd7581.62b9d8"
            ]
        ]
    },
    {
        "id": "c7cd7581.62b9d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate detail",
        "func": "var detail = msg.payload ;\n\n    if(isEmpty(detail)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with this id\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.detail_obj      = detail[0] ;\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 939.0233860909957,
        "y": 1298.7187428921463,
        "wires": [
            [
                "ed597d2e.ed605"
            ]
        ]
    },
    {
        "id": "ed597d2e.ed605",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1103.5077673047795,
        "y": 1343.5312428921463,
        "wires": [
            [
                "c832864c.844d58"
            ],
            [
                "80aa258b.6bb758"
            ]
        ]
    },
    {
        "id": "c832864c.844d58",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1239.932373046875,
        "y": 1312.2135620117188,
        "wires": []
    },
    {
        "id": "80aa258b.6bb758",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "isAuthorized",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.user_obj ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.api_status  = \"VALID_CONTENT\";\n    msg.payload     = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        table                           : \"details\",\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n    msg.response    = {status: 200, error: false, msg: \"Record deleted successfully\", data: msg.payload};\n}else{\n    msg.api_status = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.payload = {status: 403, error: false, msg: \"You are not authorized to remove record\", data: null};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260.598876953125,
        "y": 1369.8802490234375,
        "wires": [
            [
                "7ff59a77.7e46c4"
            ]
        ]
    },
    {
        "id": "7ff59a77.7e46c4",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INVALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1417.598876953125,
        "y": 1369.546875,
        "wires": [
            [
                "10b82be8.af3a14"
            ],
            [
                "585a302e.f8fe2",
                "eeeb889.e793a78",
                "6a2fcf5f.b8779",
                "d91862fc.186ac"
            ]
        ]
    },
    {
        "id": "10b82be8.af3a14",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1603.2655741373696,
        "y": 1322.880231221517,
        "wires": []
    },
    {
        "id": "585a302e.f8fe2",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "save detail to master table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1664.2655741373696,
        "y": 1384.8802464803061,
        "wires": []
    },
    {
        "id": "eeeb889.e793a78",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1618.2655741373696,
        "y": 1431.8802464803061,
        "wires": [
            [
                "123ac489.3e240b"
            ]
        ]
    },
    {
        "id": "6a2fcf5f.b8779",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:details AND to_page_id:\" + detail.page_id ,\n    sort    : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1622.2655741373696,
        "y": 1489.8801701863608,
        "wires": [
            [
                "4a3dad50.0cfca4"
            ]
        ]
    },
    {
        "id": "d91862fc.186ac",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:user_task AND page_id:\" + detail.to_page_id + \"user_id:\" + detail.user_id ,\n    sort    : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1622.2655741373696,
        "y": 1557.2136357625327,
        "wires": [
            [
                "76572607.960a18"
            ]
        ]
    },
    {
        "id": "76572607.960a18",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "msater_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1780.2655741373696,
        "y": 1554.880200703939,
        "wires": [
            [
                "9b15458d.7f0d98"
            ]
        ]
    },
    {
        "id": "4a3dad50.0cfca4",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1781.9322509765625,
        "y": 1490.546875,
        "wires": [
            [
                "645e6746.f59ca8"
            ]
        ]
    },
    {
        "id": "123ac489.3e240b",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1776.2655843098955,
        "y": 1428.5468953450522,
        "wires": []
    },
    {
        "id": "645e6746.f59ca8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "init",
        "func": "var filtered_details = msg.payload ;\n\nmsg.filtredArr = filtered_details || [] ;\nmsg.counter = 0;\nmsg.detail_length = filtered_details.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1944.2655843098955,
        "y": 1489.546875,
        "wires": [
            [
                "8a77c6aa.3bc948"
            ]
        ]
    },
    {
        "id": "9b15458d.7f0d98",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "init",
        "func": "var user_tasks = msg.payload ;\n\nmsg.calculated_task = user_tasks || [];\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1943.2655741373696,
        "y": 1554.5468877156577,
        "wires": [
            [
                "916a3af6.52d878"
            ]
        ]
    },
    {
        "id": "7e6032e9.a5fd8c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2196.4323221842446,
        "y": 1347.8802617390952,
        "wires": [
            [
                "8a77c6aa.3bc948"
            ]
        ]
    },
    {
        "id": "8a77c6aa.3bc948",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2118.4323221842446,
        "y": 1426.8802617390952,
        "wires": [
            [
                "cb980983.a4a188"
            ],
            [
                "4e8cb128.4756c"
            ]
        ]
    },
    {
        "id": "cb980983.a4a188",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2278.4323221842446,
        "y": 1417.8802922566733,
        "wires": [
            [
                "7e6032e9.a5fd8c",
                "f1a67446.f82a78"
            ]
        ]
    },
    {
        "id": "4e8cb128.4756c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2268.4323221842446,
        "y": 1459.8802922566733,
        "wires": [
            [
                "4cdfbc8e.00ca14"
            ]
        ]
    },
    {
        "id": "66441bc4.713884",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2144.0990702311196,
        "y": 1500.8802617390952,
        "wires": [
            [
                "916a3af6.52d878"
            ]
        ]
    },
    {
        "id": "916a3af6.52d878",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2083.0990702311196,
        "y": 1552.8802617390952,
        "wires": [
            [
                "28b99801.59c338"
            ],
            [
                "d1dbaf6e.b1993"
            ]
        ]
    },
    {
        "id": "28b99801.59c338",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\n\nuser_task_obj.status = 0   ;\nif(user_task_obj.count){\n    if(user_task_obj.count)    user_task_obj.count.active = 0 ;\n    if(user_task_obj.count)    user_task_obj.count.unread = 0 ;\n}\n\nmsg.payload = user_task_obj;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2230.0990702311196,
        "y": 1544.8802922566733,
        "wires": [
            [
                "66441bc4.713884",
                "d1123192.f8bc9"
            ]
        ]
    },
    {
        "id": "d1dbaf6e.b1993",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2224.0990702311196,
        "y": 1589.8802617390952,
        "wires": [
            [
                "da68b9e4.e66ba8"
            ]
        ]
    },
    {
        "id": "da68b9e4.e66ba8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2423.0990702311196,
        "y": 1587.8802617390952,
        "wires": []
    },
    {
        "id": "d1123192.f8bc9",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2414.0990702311196,
        "y": 1543.8802617390952,
        "wires": []
    },
    {
        "id": "4cdfbc8e.00ca14",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2445.4323221842446,
        "y": 1463.8802922566733,
        "wires": []
    },
    {
        "id": "f1a67446.f82a78",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "Update Detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2463.4323221842446,
        "y": 1385.8802617390952,
        "wires": []
    },
    {
        "id": "4a384ee1.48bc5",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Delete Records old flow  this is for only reference purpose... check latter",
        "info": "",
        "x": 321.2578125,
        "y": 1072.0390482842927,
        "wires": []
    },
    {
        "id": "7a1fa12a.ae0fc",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_detail",
        "func": "var body = msg.req_body.table_data,\n    token = msg.req_body.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/delete_view_data\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1285.0000381469727,
        "y": 290.0000476837158,
        "wires": [
            [
                "2f5e4f46.787e"
            ]
        ]
    },
    {
        "id": "2f5e4f46.787e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1535.8632583618164,
        "y": 270.9179935455322,
        "wires": [
            [
                "ad69ce11.40c27"
            ],
            [
                "d07942b5.0e4be"
            ]
        ]
    },
    {
        "id": "ad69ce11.40c27",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1706.8632583618164,
        "y": 227.39455604553223,
        "wires": []
    },
    {
        "id": "d07942b5.0e4be",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1747.8671646118164,
        "y": 285.9297122955322,
        "wires": [
            [
                "9896f35d.a07e1"
            ]
        ]
    },
    {
        "id": "9896f35d.a07e1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n              \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if(details[i].page_id === to_page_id){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1957.3632583618164,
        "y": 285.4961185455322,
        "wires": [
            [
                "fe7e63dc.d9f8e"
            ]
        ]
    },
    {
        "id": "fe7e63dc.d9f8e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2139.6096000671387,
        "y": 286.9297275543213,
        "wires": [
            [
                "529712dd.73ea7c"
            ],
            [
                "df3a22ee.0c8c9"
            ]
        ]
    },
    {
        "id": "529712dd.73ea7c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2309.3596000671387,
        "y": 263.3984775543213,
        "wires": []
    },
    {
        "id": "df3a22ee.0c8c9",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2329.8752250671387,
        "y": 310.4336338043213,
        "wires": [
            [
                "1b4af4f1.9977bb"
            ]
        ]
    },
    {
        "id": "1b4af4f1.9977bb",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2497.8637657165527,
        "y": 306.242262840271,
        "wires": [
            [
                "a784b7dc.0735d8"
            ]
        ]
    },
    {
        "id": "a784b7dc.0735d8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2622.7504844665527,
        "y": 306.000075340271,
        "wires": []
    },
    {
        "id": "1e20dcaa.071803",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Set to inital record bulk delete api end point",
        "info": "",
        "x": 184.8333282470703,
        "y": 353.33333587646484,
        "wires": []
    },
    {
        "id": "cf92c0e1.826f8",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/set_initial_record",
        "method": "get",
        "swaggerDoc": "",
        "x": 121.83332824707031,
        "y": 417.33333587646484,
        "wires": [
            [
                "84898545.221598"
            ]
        ]
    },
    {
        "id": "84898545.221598",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 307.8333435058594,
        "y": 417.6666488647461,
        "wires": []
    },
    {
        "id": "6d6fcf66.e01cf",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/update_get_user_tasks",
        "method": "get",
        "swaggerDoc": "",
        "x": 149.8333282470703,
        "y": 564.3333969116211,
        "wires": [
            [
                "568b4aa8.59a3e4"
            ]
        ]
    },
    {
        "id": "15575bf5.8031e4",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "Update_get_user_tasks api endpoint",
        "info": "",
        "x": 166.8333282470703,
        "y": 508.00003814697266,
        "wires": []
    },
    {
        "id": "4496d043.7ea7d",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 643.8333129882812,
        "y": 590.0000228881836,
        "wires": []
    },
    {
        "id": "568b4aa8.59a3e4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "msg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 364.8333435058594,
        "y": 563.6666641235352,
        "wires": [
            [
                "beb1d4bf.1d6628"
            ]
        ]
    },
    {
        "id": "beb1d4bf.1d6628",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 509.8333435058594,
        "y": 562.3333511352539,
        "wires": [
            [
                "1cabd420.3f4fdc"
            ],
            [
                "4496d043.7ea7d"
            ]
        ]
    },
    {
        "id": "1cabd420.3f4fdc",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/update_get_user_tasks?include_docs=true",
        "tls": "",
        "x": 672.6666412353516,
        "y": 524.6667098999023,
        "wires": [
            [
                "479bd6bb.90c898"
            ]
        ]
    },
    {
        "id": "479bd6bb.90c898",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "node.warn(new Date().getTime());\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            filtred_result      = populate_filtred_result(filter, db_record.user_tasks),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: filtred_result};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n    for(var i = 0; i<all_tasks.length; i++){\n        for(var j=0; j<task_list.length; j++){\n            if(\n                task_list[j].user_id == all_tasks[i].user_id &&\n                task_list[j].task_id == all_tasks[i].task_id &&\n                task_list[j].page_id == all_tasks[i].page_id     \n            ){\n                all_tasks[i].synchronized = task_list[j].synchronized ;\n                all_tasks[i].status = task_list[j].status;\n                all_tasks[i].date_updated = task_list[j].date_updated;\n                all_tasks[i].count = task_list[j].count;\n                \n                update_task.push(all_tasks[i]);   \n            }\n        }\n    }\n    return update_task;\n}\n\nfunction populate_filtred_result(filter, user_tasks){\n    var obj = {}, filtred_res1 = [], filtred_res2 = [], filtred_res3 = [],filtred_res4 = [];\n    \n    if((\"synchronized\" in filter)){\n        obj.synchronized = parseInt(filter.synchronized) ;\n    }else{\n        obj.synchronized = 0;\n    }\n    \n    if((\"status\" in filter)){\n        obj.status = parseInt(filter.status) ;\n    }else{\n        obj.status = 0;\n    }\n\n    for(var itr = 0; itr<user_tasks.length; itr++ ){\n        if(\n            (obj.synchronized === user_tasks[itr].synchronized) &&\n            (obj.status === user_tasks[itr].status)\n        ){\n            filtred_res1.push([itr]);\n        }\n    }\n    \n    if(\"user_id\" in filter){\n        for(var i = 0; i<filtred_res1.length; i++ ){\n            if( filter.user_id === filtred_res1[i].user_id ){\n                filtred_res2.push(filtred_res1[i]);\n            }\n        }   \n    }else{\n        filtred_res2 = filtred_res1 ;\n    }\n    \n    if(\"task_id\" in filter){\n        for(var j = 0; j<filtred_res2.length; j++ ){\n            if( filter.task_id === filtred_res2[j].task_id ){\n                filtred_res3.push(filtred_res2[j]);\n            }\n        }   \n    }else{\n        filtred_res3 = filtred_res2 ;\n    }\n    \n    if(\"page_id\" in filter){\n        for(var k = 0; k<filtred_res3.length; k++ ){\n            if( filter.page_id == filtred_res3[k].page_id ){\n                filtred_res4.push(filtred_res3[k]);\n            }\n        }   \n    }else{\n        filtred_res4 = filtred_res3 ;\n    }\n    \n    return filtred_res4;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"users\"){\n            users.push(rows[i].doc);   \n        }\n        \n        if(rows[i].doc.table == \"user_task\"){\n            user_tasks.push(rows[i].doc);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 834.8333740234375,
        "y": 514.0000381469727,
        "wires": [
            [
                "4ce4b83e.91dff8"
            ]
        ]
    },
    {
        "id": "73d6e71f.b127e8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1287.3333129882812,
        "y": 529.6666870117188,
        "wires": []
    },
    {
        "id": "4ce4b83e.91dff8",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 987.1666641235352,
        "y": 528.6666641235352,
        "wires": [
            [
                "1d385bf3.c3a0a4"
            ]
        ]
    },
    {
        "id": "1d385bf3.c3a0a4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "res",
        "func": "node.warn(new Date().getTime());\nif(isEmpty(msg.payload)){\n    msg.payload = msg.api_response;    \n}else{\n    msg.payload = msg.api_response;    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1130.8336563110352,
        "y": 514.3333892822266,
        "wires": [
            [
                "73d6e71f.b127e8"
            ]
        ]
    },
    {
        "id": "76d401a5.8d604",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/update_get_pages",
        "method": "get",
        "swaggerDoc": "",
        "x": 133.8333282470703,
        "y": 743.3334045410156,
        "wires": [
            [
                "b74602d2.33c1e"
            ]
        ]
    },
    {
        "id": "b74602d2.33c1e",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "msg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token;\n\n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 338.6666259765625,
        "y": 743.6667175292969,
        "wires": [
            [
                "1e9ec567.e9154b"
            ]
        ]
    },
    {
        "id": "1e9ec567.e9154b",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 483.6666259765625,
        "y": 742.3334045410156,
        "wires": [
            [
                "984e746c.732d28"
            ],
            [
                "c0e69252.f324c"
            ]
        ]
    },
    {
        "id": "984e746c.732d28",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 646.4999237060547,
        "y": 704.6667633056641,
        "wires": [
            [
                "72b609df.95c6a8"
            ]
        ]
    },
    {
        "id": "c0e69252.f324c",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 617.6665954589844,
        "y": 770.0000762939453,
        "wires": []
    },
    {
        "id": "72b609df.95c6a8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "node.warn(msg.payload_content);\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    access_token    = body.access_token;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user with access_token\", data: null};\n        }else if( isEmpty(user_tasks) ){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, msg: \"Unable to find user_task for this user.\", data: null};\n        }else{\n            msg.api_status = \"API_SUCCESS\";\n            msg.payload = {status: 200, error:false, msg: \"Record fetched successfully\", data: populated_pages(user_tasks, db_record)};\n        }    \n    }\n    \nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [];\n    \n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(task_obj){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n    return pages;\n}\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_record.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    for(var i =0; i<users.length; i++){\n        if(access_token === users[i].access_token){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 802.6665954589844,
        "y": 705.6667175292969,
        "wires": [
            [
                "e3dc961d.bf3698"
            ]
        ]
    },
    {
        "id": "e3dc961d.bf3698",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 940.1666870117188,
        "y": 706.6667327880859,
        "wires": [
            [
                "5bcfdeec.0998e"
            ],
            [
                "5bcfdeec.0998e"
            ]
        ]
    },
    {
        "id": "5bcfdeec.0998e",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1095,
        "y": 703.3333892822266,
        "wires": []
    },
    {
        "id": "27582250.728d9e",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 149,
        "y": 1799,
        "wires": [
            [
                "24e6c2ab.1046ae"
            ]
        ]
    },
    {
        "id": "24e6c2ab.1046ae",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true , msg: \"Unable to find user with access_token\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.filter_obj      = msg.payload_content.filter ;\n    msg.user_task_list  = msg.payload_content.user_task_list ;\n    msg.user            = msg.payload[0];\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 338.015625,
        "y": 1802.3828125,
        "wires": [
            [
                "c21a6975.582b48"
            ]
        ]
    },
    {
        "id": "c21a6975.582b48",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 498.015625,
        "y": 1802.703125,
        "wires": [
            [
                "2dd4d4e3.b8dbdc"
            ],
            [
                "b7c124b.484a0d8"
            ]
        ]
    },
    {
        "id": "2dd4d4e3.b8dbdc",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 624.515625,
        "y": 1782.1875,
        "wires": []
    },
    {
        "id": "b7c124b.484a0d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var filter          = msg.filter_obj ,\n    user_task_list  = msg.user_task_list ;\n    user            = msg.user ;\n    \n    msg.payload = {\n        selector    : create_selector(filter),\n        query       : create_filtred_query(user._id, filter)\n    };    \n    node.warn(msg.payload);\nreturn msg;\n\nfunction create_selector(filter){\n    var obj = {};\n    if(\"synchronized\" in filter){\n        if(parseInt(filter.synchronized) === 0){\n            obj.synchronized = {\n               \"$ne\" : 1\n            };\n            delete filter.synchronized ;\n        }\n    }\n    \n    if(\"status\" in filter){\n        if(parseInt(filter.status) === 0){\n            obj.status = {\n               \"$ne\" : 1\n            };\n            delete filter.status ;\n        }\n    }\n    return obj ;\n}\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n\n        if((\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id  ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter < length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 631.5000448822962,
        "y": 1840.8906368464227,
        "wires": [
            [
                "e63f5c36.1b918",
                "eaad3e71.213df"
            ]
        ]
    },
    {
        "id": "e63f5c36.1b918",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 824.5000448822962,
        "y": 1806.7890743464227,
        "wires": []
    },
    {
        "id": "eaad3e71.213df",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 825.5,
        "y": 1877.4921875,
        "wires": [
            [
                "713f5100.31481",
                "69cf1450.119e7c"
            ]
        ]
    },
    {
        "id": "713f5100.31481",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.filtred_user_task_list = msg.payload ;\nmsg.payload = {\n    query : \"table:user_task\",\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 995.0000099688764,
        "y": 1875.8984446078537,
        "wires": [
            [
                "8402ad22.266e7"
            ]
        ]
    },
    {
        "id": "69cf1450.119e7c",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1006.0156698822962,
        "y": 1930.7812618464227,
        "wires": []
    },
    {
        "id": "8402ad22.266e7",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1185.0000448822962,
        "y": 1889.0000118464227,
        "wires": [
            [
                "200ed7d6.de5db8"
            ]
        ]
    },
    {
        "id": "200ed7d6.de5db8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "populate",
        "func": "\nmsg.updated_content = return_user_task_filtred_arr(msg.user_task_list, msg.payload) ;\nmsg.updated_content_length = msg.updated_content.length;\nmsg.res_user_task = [];\nmsg.counter = 0 ;\nmsg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.res_user_task, filtred: msg.filtred_user_task_list};\nreturn msg;\n\n\nfunction return_user_task_filtred_arr(req_user_task_list, user_tasks_list){\n    var selected_arr = [];\n    if(\n        user_tasks_list !== undefined && \n        user_tasks_list !== null &&\n        req_user_task_list !== undefined &&\n        req_user_task_list !== null \n    ){\n        for(var i=0; i< req_user_task_list.length; i++){\n            for(j =0; j<user_tasks_list.length; j++){\n                if(\n                    req_user_task_list[i].user_id == user_tasks_list[j].user_id &&\n                    req_user_task_list[i].task_id == user_tasks_list[j].task_id &&\n                    req_user_task_list[i].page_id == user_tasks_list[j].page_id \n                ){\n                  \n                  \n                    user_tasks_list[j].synchronized = req_user_task_list[i].synchronized ;\n                    user_tasks_list[j].status = req_user_task_list[i].status;\n                    user_tasks_list[j].date_updated = req_user_task_list[i].date_updated;\n                    user_tasks_list[j].count = req_user_task_list[i].count;\n                    selected_arr.push(user_tasks_list[j]);\n                }\n            }\n        }    \n        \n        return selected_arr;\n    }else{\n        return selected_arr ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1343.0000448822962,
        "y": 1890.3984493464227,
        "wires": [
            [
                "176eb4.c8a4b14c"
            ]
        ]
    },
    {
        "id": "176eb4.c8a4b14c",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "updated_content_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1512.7656698822962,
        "y": 1875.7500118464227,
        "wires": [
            [
                "381525b1.e82e9a"
            ],
            [
                "863308b0.32b6f8"
            ]
        ]
    },
    {
        "id": "177d3f8a.b2fa4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1613.7656698822962,
        "y": 1817.7500118464227,
        "wires": [
            [
                "176eb4.c8a4b14c"
            ]
        ]
    },
    {
        "id": "381525b1.e82e9a",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "    var counter = msg.counter ;\n    msg.payload = msg.updated_content[counter];\n    msg.res_user_task.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1702.7656698822962,
        "y": 1864.7500118464227,
        "wires": [
            [
                "bc638e37.2cc24",
                "177d3f8a.b2fa4"
            ]
        ]
    },
    {
        "id": "bc638e37.2cc24",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1894.7734823822962,
        "y": 1897.2734493464227,
        "wires": []
    },
    {
        "id": "5ea52549.22d8dc",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1874.7734823822962,
        "y": 1952.2734493464227,
        "wires": []
    },
    {
        "id": "863308b0.32b6f8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "api_res",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1693.7734823822962,
        "y": 1954.2734493464227,
        "wires": [
            [
                "5ea52549.22d8dc"
            ]
        ]
    },
    {
        "id": "3f7c61b4.51a60e",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "update_get_user_tasks",
        "func": "node.warn(msg.payload_content);\nmsg.payload = {\n    query : \"table:users AND access_token:\" + msg.payload_content.access_token ,\n    sort  : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg ;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 176.33334350585938,
        "y": 1741,
        "wires": [
            [
                "27582250.728d9e"
            ]
        ]
    },
    {
        "id": "abbb9024.4ca85",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Workign examples for updated_get_user_tasks",
        "info": "",
        "x": 253.1666717529297,
        "y": 1675.333371480306,
        "wires": []
    },
    {
        "id": "8e018173.609bf",
        "type": "comment",
        "z": "d4fc71c6.eee2",
        "name": "updated_get_pages api_endpoint ",
        "info": "",
        "x": 152.8333282470703,
        "y": 682.3333307902018,
        "wires": []
    },
    {
        "id": "d4d803af.d9c42",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_task",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`access_token` is required\", data: null};\n}else if(isEmpty(params.task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`task_id` is required\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload      = {\n        query : \"table:task_table AND _id:\"+ params.task_id,\n        sort  : \"_id<string>\"\n    };\n    msg.user_payload = {\n        query : \"table:users AND access_token:\"+ params.access_token,\n        sort  : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 144.66665649414062,
        "y": 2144.33349609375,
        "wires": [
            [
                "d281dffd.2baed"
            ]
        ]
    },
    {
        "id": "d281dffd.2baed",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 335.1666564941406,
        "y": 2137.52099609375,
        "wires": [
            [
                "768a3b12.83bf24"
            ],
            [
                "f59f79a0.eba5b8"
            ]
        ]
    },
    {
        "id": "768a3b12.83bf24",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 512.1549232900145,
        "y": 2056.7514426745474,
        "wires": []
    },
    {
        "id": "bab8b5f3.d705f8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate task",
        "func": "var task_obj = msg.payload ;\n\nif(isEmpty(task_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find task with `task_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj   = task_obj[0];\n    msg.payload    = msg.user_payload ;\n}\n\nreturn msg;\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 701.1666564941406,
        "y": 2196.591293334961,
        "wires": [
            [
                "ebb674e1.618798"
            ]
        ]
    },
    {
        "id": "f59f79a0.eba5b8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 536.6588439941406,
        "y": 2142.399887084961,
        "wires": [
            [
                "bab8b5f3.d705f8"
            ]
        ]
    },
    {
        "id": "ebb674e1.618798",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 864.9088233001532,
        "y": 2195.2670676745474,
        "wires": [
            [
                "5daf80cb.3c64e"
            ],
            [
                "3469ff7b.30bdd"
            ]
        ]
    },
    {
        "id": "5daf80cb.3c64e",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1004.9088439941406,
        "y": 2154.251449584961,
        "wires": []
    },
    {
        "id": "3469ff7b.30bdd",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1024.5260314941406,
        "y": 2222.345199584961,
        "wires": [
            [
                "60120015.1ac7d"
            ]
        ]
    },
    {
        "id": "d514f1cb.f49c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_user",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195.52603149414062,
        "y": 2254.6785736083984,
        "wires": [
            [
                "a2de0fbf.4dce"
            ]
        ]
    },
    {
        "id": "bd0f0c10.47bf4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_timeout",
        "func": "msg.payload = {\n    query: \"table:timeout\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 202.52603149414062,
        "y": 2309.6785736083984,
        "wires": [
            [
                "b0c3a762.714008"
            ]
        ]
    },
    {
        "id": "164ea165.fa154f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_location",
        "func": "msg.payload = {\n    query: \"table:location\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 202.52603149414062,
        "y": 2362.6785736083984,
        "wires": [
            [
                "32f369b9.0462d6"
            ]
        ]
    },
    {
        "id": "9a1d4f7f.cf1a8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "formatted_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 191.52603149414062,
        "y": 2412.6785736083984,
        "wires": [
            [
                "2e8dad28.6edec2"
            ]
        ]
    },
    {
        "id": "2e8dad28.6edec2",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 408.5260314941406,
        "y": 2409.6785736083984,
        "wires": [
            [
                "3bc0b2fe.375bfe"
            ]
        ]
    },
    {
        "id": "32f369b9.0462d6",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 408.5260314941406,
        "y": 2361.6785736083984,
        "wires": [
            [
                "e2013cde.02abd"
            ]
        ]
    },
    {
        "id": "b0c3a762.714008",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 406.5260314941406,
        "y": 2315.6785736083984,
        "wires": [
            [
                "23220fd3.dee81"
            ]
        ]
    },
    {
        "id": "a2de0fbf.4dce",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 403.5260314941406,
        "y": 2260.6785736083984,
        "wires": [
            [
                "d2a5b1bf.3bcf7"
            ]
        ]
    },
    {
        "id": "d2a5b1bf.3bcf7",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var users   = msg.payload , updated_user = [];\n\nif(users === null || users === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!users.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: users};\n}else{\n    for(var i=0; i< users.length; i++){\n        updated_user.push({id : users[i]._id, name: generate_name(users[i]) || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_user};\n}\n\nreturn msg;\n\nfunction generate_name(obj){\n    return (obj.firstname + \" \" + obj.lastname).trim();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 602.5260314941406,
        "y": 2259.6785736083984,
        "wires": [
            [
                "d52254c9.2072a8"
            ]
        ]
    },
    {
        "id": "23220fd3.dee81",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var timeout   = msg.payload , updated_timeout = [];\n\nif(timeout === null || timeout === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!timeout.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: timeout};\n}else{\n    for(var i=0; i< timeout.length; i++){\n        updated_timeout.push({id : timeout[i]._id, name: timeout[i].name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_timeout};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 602.5260314941406,
        "y": 2312.6785736083984,
        "wires": [
            [
                "e3c68472.575f88"
            ]
        ]
    },
    {
        "id": "e2013cde.02abd",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var location   = msg.payload , updated_location = [];\n\nif(location === null || location === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!location.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: location};\n}else{\n    for(var i=0; i< location.length; i++){\n        updated_location.push({id : location[i]._id, name: location[i].location_name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_location};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 599.5260314941406,
        "y": 2359.6785736083984,
        "wires": [
            [
                "b0e471fd.0234"
            ]
        ]
    },
    {
        "id": "3bc0b2fe.375bfe",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "response",
        "func": "var tasks_arr = msg.payload , obj = {} ;\n\nif(tasks_arr === null || tasks_arr === undefined){\n    obj.status = 400 ;\n    obj.error  = true ;\n    obj.msg    = \"Unable to get the tasks\";\n    msg.paylod = obj ;\n}else{\n    if(tasks_arr.length){\n        var tasks = [];\n        for(var i=0; i < tasks_arr.length; i++){\n            tasks.push({\n                id           : tasks_arr[i]._id,\n                task_name    : tasks_arr[i].task_name || \"N/A\"     \n            });\n        }\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"Record fecthed successfully\";\n        obj.data   = tasks ;\n        msg.payload = obj ;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is not task present\";\n        msg.paylod = obj ;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 604.5260314941406,
        "y": 2409.6785736083984,
        "wires": [
            [
                "f1a493cb.58877"
            ]
        ]
    },
    {
        "id": "f1a493cb.58877",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 786.5260314941406,
        "y": 2407.6785736083984,
        "wires": []
    },
    {
        "id": "b0e471fd.0234",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 782.5260314941406,
        "y": 2360.6785736083984,
        "wires": []
    },
    {
        "id": "e3c68472.575f88",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 782.5260314941406,
        "y": 2310.6785736083984,
        "wires": []
    },
    {
        "id": "d52254c9.2072a8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 783.5260314941406,
        "y": 2257.6785736083984,
        "wires": []
    },
    {
        "id": "771df157.950d7",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 591.6927795410156,
        "y": 2505.011947631836,
        "wires": []
    },
    {
        "id": "11c42f25.e3acd1",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_all_templates",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 193.69270833333348,
        "y": 2509.3452377319336,
        "wires": [
            [
                "8c020fec.32453"
            ]
        ]
    },
    {
        "id": "8c020fec.32453",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 414.6926574707031,
        "y": 2507.3453216552734,
        "wires": [
            [
                "771df157.950d7"
            ]
        ]
    },
    {
        "id": "60120015.1ac7d",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "var user_obj = msg.payload ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: msg.task_obj};\n}\n\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1197.9010314941406,
        "y": 2253.837387084961,
        "wires": [
            [
                "6f7cad47.422774"
            ]
        ]
    },
    {
        "id": "6f7cad47.422774",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1355.9010314941406,
        "y": 2259.759262084961,
        "wires": [
            [
                "c79894c3.f330f8"
            ],
            [
                "c79894c3.f330f8"
            ]
        ]
    },
    {
        "id": "c79894c3.f330f8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1547.9127502441406,
        "y": 2257.25146484375,
        "wires": []
    },
    {
        "id": "4151b7c3.f7cfa8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate",
        "func": "var access_token = msg.payload_content.access_token,\n    task_id      = msg.payload_content.task_id;\nif(isEmpty(access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`access_token` is mising.\", data: null};\n}else if(isEmpty(task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`task_id` is mising.\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.5002632141113,
        "y": 325.0000801086426,
        "wires": [
            [
                "93323a2d.829028"
            ]
        ]
    },
    {
        "id": "e885a60f.39cf88",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_data_for_task endpoint",
        "info": "",
        "x": 1253.500171661377,
        "y": 263.3333988189697,
        "wires": []
    },
    {
        "id": "93323a2d.829028",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1343.500242869059,
        "y": 323.00006230672204,
        "wires": [
            [
                "e9ae4e21.cd3d3"
            ],
            [
                "ee274f1a.c70b3"
            ]
        ]
    },
    {
        "id": "e9ae4e21.cd3d3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1471.500242869059,
        "y": 282.6667493184408,
        "wires": []
    },
    {
        "id": "ee274f1a.c70b3",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_task_related_data?include_docs=true",
        "tls": "",
        "x": 1492.5002326965332,
        "y": 333.66675186157227,
        "wires": [
            [
                "f5476dc3.4f83d"
            ]
        ]
    },
    {
        "id": "f5476dc3.4f83d",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar payload = msg.payload ,\n    task_id = msg.payload_content.task_id;\n\nif(isEmpty(payload.rows)){\n    msg.payload     = {status: 400, error: true, msg: \"Unable to populate view to get_data_for_task.\", data: null};\n    return msg;\n}else{\n    msg.payload = {status:200, error:true, msg: \"Record fetched successfully.\", data: populate_db_record(payload.rows)};\n    return msg;\n}\n\n\nfunction populate_db_record(rows){\n    var template = [], task_table = [], timeout=[], location=[], users=[], task_obj={}; \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"template\"){\n            template.push(rows[i].doc);\n        }\n        \n        if(rows[i].doc.table == \"task_table\"){\n            if(rows[i].doc.page_id == task_id){\n                task_obj = rows[i].doc ;\n            }else{\n                task_table.push({\n                    id          : rows[i].doc._id,\n                    task_name   : rows[i].doc.task_name\n                });\n            }\n        }\n        \n        if(rows[i].doc.table == \"timeout\"){\n            timeout.push({\n                id     : rows[i].doc._id,\n                name   : rows[i].doc.name\n            });\n        }\n        \n        if(rows[i].doc.table == \"location\"){\n            location.push({\n                id          : rows[i].doc._id,\n                name        : rows[i].doc.location_name\n            });\n        }\n        \n        if(rows[i].doc.table == \"users\"){\n            users.push({\n                id          : rows[i].doc._id,\n                name        : formulate_name(rows[i].doc)\n            });\n        }\n    }\n    \n    return {\n      formatted_template: template,\n      formatted_task    : task_table,\n      formatted_timeout : timeout,\n      formatted_location: location,\n      formatted_user    : users,\n      task_obj          : task_obj\n    };\n}\n\nfunction formulate_name(obj){\n    var str = \"\";\n    if(obj.firstname){\n        str += obj.firstname;\n    }\n    \n    if(obj.lastname){\n        str += \" \"+ obj.lastname ;\n    }\n    \n    if(!str){\n        str = \"Anynomous User\";\n    }\n    \n    return str;\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1662.500242869059,
        "y": 328.33343633015954,
        "wires": [
            [
                "26c6644a.ea800c"
            ]
        ]
    },
    {
        "id": "26c6644a.ea800c",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1836.333724975586,
        "y": 325.0000982284546,
        "wires": []
    },
    {
        "id": "ca803de8.82ae6",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Reapted Api endpoint to update particular task_table info",
        "info": "",
        "x": 286.8333435058594,
        "y": 1992.0000178019206,
        "wires": []
    },
    {
        "id": "d9dd2b5.cb3f5d8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "update_get_pages",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n    msg.payload       = {\n        query   : \"table:users AND access_token:\" + params.access_token ,\n        sort    : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 127.66665649414062,
        "y": 2767.33349609375,
        "wires": [
            [
                "92b38fc2.3708"
            ]
        ]
    },
    {
        "id": "92b38fc2.3708",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 318.0000305175781,
        "y": 2718.0002059936523,
        "wires": [
            [
                "73eda7b1.f82868"
            ],
            [
                "374c6459.763c0c"
            ]
        ]
    },
    {
        "id": "374c6459.763c0c",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 485.3331604003906,
        "y": 2752.3334579467773,
        "wires": [
            [
                "5744ef65.7ed2a"
            ]
        ]
    },
    {
        "id": "5744ef65.7ed2a",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"Unable to fetch user with this `access_token`\", data:null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.user_obj    = msg.payload[0] ;\n    msg.payload     = {\n        selector    : {\n            synchronized : {\n                $eq : 0\n            }\n        },\n        query       : \"table:user_task AND user_id:\" + msg.user_obj._id ,\n        sort        : \"_id<string>\" \n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 673.3331604003906,
        "y": 2752.000198364258,
        "wires": [
            [
                "6df6df9c.41a06"
            ]
        ]
    },
    {
        "id": "6df6df9c.41a06",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 827.6665344238281,
        "y": 2752.0001373291016,
        "wires": [
            [
                "dceac883.3e6748"
            ],
            [
                "28dd4f85.72d67"
            ]
        ]
    },
    {
        "id": "dceac883.3e6748",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 948.6666564941406,
        "y": 2716.333511352539,
        "wires": []
    },
    {
        "id": "28dd4f85.72d67",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 971.3331604003906,
        "y": 2784.333511352539,
        "wires": [
            [
                "89cd6387.39ee7"
            ]
        ]
    },
    {
        "id": "89cd6387.39ee7",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "user_task",
        "func": "var users_task = msg.payload ,\n    req_body   = msg.payload_content ;\n\nvar filtred_user_task = get_filter_user_task(users_task);\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.filtred_payload = filtred_user_task ;\nmsg.payload = {status: 200, data:null};\nreturn msg;\n\nfunction get_req_user_task(user_task){\n    try{\n        return JSON.parse(user_task);\n    }catch(e){\n        return {} ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_filter_user_task(user_task){\n    var result = [];\n    if(!isEmpty(user_task)){\n        for(var itr = 0; itr < user_task.length; itr++){\n            if(user_task[itr].synchronized === 0){\n                result.push(user_task[itr]);\n            }   \n        }\n    }\n    return result ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1135.9998779296875,
        "y": 2784.000129699707,
        "wires": [
            [
                "3697c09f.d9bd3"
            ]
        ]
    },
    {
        "id": "3697c09f.d9bd3",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1314.1665344238281,
        "y": 2785.0001220703125,
        "wires": [
            [
                "920491d3.eb46f"
            ],
            [
                "76a6a51c.1da2dc"
            ]
        ]
    },
    {
        "id": "920491d3.eb46f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "create_url",
        "func": "msg.url = msg.req.headers.host + '/master_api_handler?type=get_page&content={\"access_token\":\"' + msg.payload_content.access_token + '\", \"page_id\":' + msg.filtred_payload[msg.counter].page_id + '}';\nmsg.method  = \"GET\";\nnode.warn(msg.url);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1470.6743469238281,
        "y": 2781.5235595703125,
        "wires": [
            [
                "d6ac9b76.903ad8"
            ]
        ]
    },
    {
        "id": "1eafd07d.b0dec",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1543.1665344238281,
        "y": 2708.0001220703125,
        "wires": [
            [
                "3697c09f.d9bd3"
            ]
        ]
    },
    {
        "id": "d6ac9b76.903ad8",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1642.6743469238281,
        "y": 2785.5235595703125,
        "wires": [
            [
                "737c4f71.55406"
            ]
        ]
    },
    {
        "id": "737c4f71.55406",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "api_res",
        "func": "msg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1806.1665344238281,
        "y": 2790.0001220703125,
        "wires": [
            [
                "1eafd07d.b0dec"
            ]
        ]
    },
    {
        "id": "7a18fc40.dc34d4",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1598.4087219238281,
        "y": 2846.9610595703125,
        "wires": []
    },
    {
        "id": "76a6a51c.1da2dc",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "res",
        "func": "if(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1457.9087219238281,
        "y": 2850.1641845703125,
        "wires": [
            [
                "7a18fc40.dc34d4"
            ]
        ]
    },
    {
        "id": "73eda7b1.f82868",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 467.6666564941406,
        "y": 2686,
        "wires": []
    },
    {
        "id": "12796874.e0f828",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_page endpoint",
        "info": "",
        "x": 1231.1666870117188,
        "y": 139.33334350585938,
        "wires": []
    },
    {
        "id": "771c1033.a7ba8",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "Updated_get_pages api endpoint",
        "info": "",
        "x": 165.8333282470703,
        "y": 2662.666748046875,
        "wires": []
    },
    {
        "id": "bc9467d8.a9ed48",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/test_endpoint",
        "method": "get",
        "swaggerDoc": "",
        "x": 107.83332824707031,
        "y": 868.6666870117188,
        "wires": [
            [
                "b1f9df36.a3892"
            ]
        ]
    },
    {
        "id": "b1f9df36.a3892",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "validation",
        "func": "node.warn(new Date().getTime());\nmsg.payload_content = JSON.parse(msg.payload.content);\n\nvar access_token    = msg.payload_content.access_token,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else if(isEmpty(user_task_list)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"Please provide `user_task_list` to get updated user_task_list\", data: null};\n    }else{\n        var filters = [ '\"' + filter.user_id + '\"', '\"' + filter.task_id + '\"', filter.page_id, filter.synchronized, filter.status], \n            str     = \"[\" + filters.toString() + \"]\";\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/test_view?key=' + str;\n    }\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 305.8333435058594,
        "y": 866.6666641235352,
        "wires": [
            [
                "b40b21b0.28b26"
            ]
        ]
    },
    {
        "id": "16353d92.751962",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 590.6666259765625,
        "y": 954.6666717529297,
        "wires": []
    },
    {
        "id": "b40b21b0.28b26",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 456.6666564941406,
        "y": 927,
        "wires": [
            [
                "3907b5b6.54888a"
            ],
            [
                "16353d92.751962"
            ]
        ]
    },
    {
        "id": "3907b5b6.54888a",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 619.4999542236328,
        "y": 889.3333587646484,
        "wires": [
            [
                "7064c05f.907b1"
            ]
        ]
    },
    {
        "id": "7064c05f.907b1",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "\nvar body            = msg.payload_content,\n    payload         = msg.payload,\n    filter          = msg.payload_content.filter,\n    user_task_list  = msg.payload_content.user_task_list;\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find record with provided filter.\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        var db_record           = populate_records(payload.rows),\n            updated_tasks       = populate_updated_task(user_task_list, db_record.user_tasks);\n        \n        msg.payload = {\"docs\": updated_tasks};    \n        msg.api_response = {status: 200, error: false, msg: \"Record updated successfully\", data: updated_tasks, filtred: db_record.user_tasks};\n    }\n    \nnode.warn(msg);\nreturn msg;\n\nfunction populate_updated_task(task_list, all_tasks){\n    var update_task = [];\n    for(var i = 0; i<all_tasks.length; i++){\n        for(var j=0; j<task_list.length; j++){\n            if(\n                task_list[j].user_id == all_tasks[i].user_id &&\n                task_list[j].task_id == all_tasks[i].task_id &&\n                task_list[j].page_id == all_tasks[i].page_id     \n            ){\n                all_tasks[i].synchronized = task_list[j].synchronized ;\n                all_tasks[i].status = task_list[j].status;\n                all_tasks[i].date_updated = task_list[j].date_updated;\n                all_tasks[i].count = task_list[j].count;\n                \n                update_task.push(all_tasks[i]);   \n            }\n        }\n    }\n    return update_task;\n}\n\nfunction populate_records(rows){\n    var users = [], user_tasks = [];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"user_task\"){\n            user_tasks.push(rows[i].value);\n        }\n    }\n    \n    return {users: users, user_tasks: user_tasks};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 781.6666870117188,
        "y": 878.6666870117188,
        "wires": [
            [
                "1ece94a7.4ef5db"
            ]
        ]
    },
    {
        "id": "6c43ddbb.e339e4",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1388.3334884643555,
        "y": 849.6667404174805,
        "wires": []
    },
    {
        "id": "fe6451d6.1afb1",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1083.1668090820312,
        "y": 850.6667175292969,
        "wires": [
            [
                "f741b12b.e0b8f"
            ]
        ]
    },
    {
        "id": "f741b12b.e0b8f",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = msg.api_response;    \n}else{\n    msg.payload = msg.api_response;    \n}\nnode.warn(new Date().getTime());\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1237.833854675293,
        "y": 850.3334274291992,
        "wires": [
            [
                "6c43ddbb.e339e4"
            ]
        ]
    },
    {
        "id": "1ece94a7.4ef5db",
        "type": "switch",
        "z": "d4fc71c6.eee2",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 931.8333740234375,
        "y": 878.0000915527344,
        "wires": [
            [
                "fe6451d6.1afb1"
            ],
            [
                "79fbcb17.5a3ca4"
            ]
        ]
    },
    {
        "id": "d39b545.c0a0ca8",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 1234.0000305175781,
        "y": 933.3333740234375,
        "wires": []
    },
    {
        "id": "79fbcb17.5a3ca4",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "log",
        "func": "node.warn(new Date().getTime());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1064.5000305175781,
        "y": 934.6666870117188,
        "wires": [
            [
                "d39b545.c0a0ca8"
            ]
        ]
    },
    {
        "id": "16048eac.d74bc1",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2039.5003128051758,
        "y": 650.0000123977661,
        "wires": []
    },
    {
        "id": "3686ccd8.9cc104",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1609.5001322428386,
        "y": 760.3334121704102,
        "wires": []
    },
    {
        "id": "64cc674e.592e58",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_short_details",
        "tls": "",
        "x": 1627.5001220703125,
        "y": 714.666748046875,
        "wires": [
            [
                "bfab0f04.e55c1"
            ]
        ]
    },
    {
        "id": "bfab0f04.e55c1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload,\n    access_token    = msg.payload_content.access_token,\n    req_body        = msg.payload_content.content;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to fetch record via using views\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        user_obj   = populate_user(db_records.users, access_token),\n        detail_obj = populate_details(db_records.details, req_body.detail_id),\n        task_obj   = populate_task(db_records.tasks_arr, req_body.page_id);\n        \n        if(isEmpty(user_obj)){\n            msg.statusCode = 400 ;\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, error: true, msg: \"Invalid `access_token`. Please retry after logout.\", data: null};\n        }else{\n            if(user_obj._id == detail_obj.user_id){\n                //update detail_obj\n                detail_obj.display_if_empty         = req_body.display_if_empty;\n                detail_obj.user_incoming.note       = req_body.message ;\n                detail_obj.user_incoming.message    = req_body.message ;\n                detail_obj.type                     = req_body.type;\n         \n                //update task_obj \n                task_obj.display_if_empty = req_body.display_if_empty;\n                task_obj.task_name        = req_body.message ;\n                task_obj.type             = req_body.type;\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.payload = {\n                    docs: [detail_obj, task_obj]\n                };\n            }else{\n                msg.statusCode = 401 ;\n                msg.api_status = \"API_ERROR\";\n                msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n            }\n        }\n}   \n\nreturn msg;\n\nfunction populate_user(users, access_token){\n    var user = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token == access_token){\n            user = users[i];\n        }\n    }\n    return user;\n}\n\nfunction populate_details(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id == detail_id){\n            obj = details[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_task(tasks, page_id){\n    var obj = {};\n    for(var i=0; i<tasks.length; i++){\n        if((tasks[i].page_id == page_id) && (tasks[i].table == \"task_table\") ){\n            obj = tasks[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_records(rows){\n    var users = [], details = [], tasks=[];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table == \"task_table\"){\n            tasks.push(rows[i].value);\n        }\n    }\n    return {users: users, details:details, tasks_arr:tasks };\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1808.8334655761719,
        "y": 754.3334121704102,
        "wires": [
            [
                "db8b90a6.16022"
            ]
        ]
    },
    {
        "id": "a89ee394.95a9d",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2091.8336181640625,
        "y": 816.666748046875,
        "wires": []
    },
    {
        "id": "db8b90a6.16022",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1969.8334655761719,
        "y": 787.3334121704102,
        "wires": [
            [
                "b250faeb.be6e78"
            ],
            [
                "a89ee394.95a9d"
            ]
        ]
    },
    {
        "id": "b250faeb.be6e78",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2108.83349609375,
        "y": 759.666748046875,
        "wires": [
            [
                "affb5a04.b9f238"
            ]
        ]
    },
    {
        "id": "affb5a04.b9f238",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Unable to update provided documents\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: true, msg: \"Record updated successfully.\", data: msg.payload};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2258.8336181640625,
        "y": 759.33349609375,
        "wires": [
            [
                "3edc137a.66ec4c"
            ]
        ]
    },
    {
        "id": "3edc137a.66ec4c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2444.1666946411133,
        "y": 741.6667327880859,
        "wires": []
    },
    {
        "id": "1233f5ae.b7f3fa",
        "type": "inject",
        "z": "a35e95d3.4f79f8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 103.83332824707031,
        "y": 908.3333409627279,
        "wires": [
            [
                "97a8d9aa.b30298"
            ]
        ]
    },
    {
        "id": "97a8d9aa.b30298",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "func": "node.log(\"This node is used to log info\", \"john macathy\");\nnode.warn(\"This is used for Warning messages\");\nnode.error(\"This is used to show error messages\");\nmsg.payload = \"Final output.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 264.8333435058594,
        "y": 907.6666844685873,
        "wires": [
            [
                "12376bc4.d80914"
            ]
        ]
    },
    {
        "id": "12376bc4.d80914",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 434.8333435058594,
        "y": 908.6666844685873,
        "wires": []
    },
    {
        "id": "d9f7ff8c.cadfe",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/save_device_ids",
        "method": "post",
        "swaggerDoc": "",
        "x": 123.83332824707031,
        "y": 1095.0001878738403,
        "wires": [
            [
                "378378f1.1892b8"
            ]
        ]
    },
    {
        "id": "378378f1.1892b8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "var payload = msg.payload;\n\nmsg.payload = {\n  first_name: payload.f_name,\n  last_name : payload.l_name,\n  device_id : payload.device_id,\n  push_accepted: true\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 321.8333435058594,
        "y": 1095.6667550404868,
        "wires": [
            [
                "b5adf29f.1c45c",
                "f1df8fd4.19498"
            ]
        ]
    },
    {
        "id": "b5adf29f.1c45c",
        "type": "cloudant out",
        "z": "d4fc71c6.eee2",
        "name": "",
        "cloudant": "",
        "database": "devcie_details",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 529.8333435058594,
        "y": 1057.333459854126,
        "wires": []
    },
    {
        "id": "f1df8fd4.19498",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 496.83331298828125,
        "y": 1111.3335030873618,
        "wires": []
    },
    {
        "id": "a68f3e81.95d52",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "update_get_pages ",
        "func": "var access_token = msg.payload_content.access_token;\n\nif(isEmpty(access_token)){\n    //msg.api_status = \"API_ERROR\";\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload    = {status: 400, error: true, msg: \"`access_token` is mising.\", data: msg.payload_content};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1221.8334045410156,
        "y": 528.6667461395264,
        "wires": [
            [
                "2bd3da91.104616"
            ]
        ]
    },
    {
        "id": "aee26cf5.06819",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1533.833885192871,
        "y": 494.66678047180176,
        "wires": []
    },
    {
        "id": "2bd3da91.104616",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1397.833641052246,
        "y": 529.0001544952393,
        "wires": [
            [
                "aee26cf5.06819"
            ],
            [
                "448d2c48.319d14"
            ]
        ]
    },
    {
        "id": "448d2c48.319d14",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "updated_get_pages View",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 1592.833755493164,
        "y": 573.3334875106812,
        "wires": [
            [
                "55683dea.d34ba4"
            ]
        ]
    },
    {
        "id": "4107fbed.f0bb14",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "var body            = msg.payload_content,\n    payload         = msg.db_get_page,\n    counts          = msg.payload ,\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [],\n    page_id         = body.page_id ;\n    access_token    = body.access_token;\n    \n    msg.updated_user_task = {}; //this will hold the user_task is not present in database.\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.api_status          = \"API_SUCCESS\";\n        msg.update_my_user_task = false;\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n        }else{\n            msg.api_status = \"API_SUCCESS\";\n\n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            if(isEmpty(body.user_task_list)){\n                msg.isUpdateUserTasks = false;\n            }else{\n               msg.method  = \"GET\";\n               msg.url     = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task?key=[\"' + user_obj._id +'\"]';\n               msg.isUpdateUserTasks = true;\n            }\n\n            msg.api_response = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n        }    \n    }\n\nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [] , req_page = {};\n\n    if(!isEmpty(page_id)){\n        var task = populate_taskobj(page_id, db_obj.tasks);\n        if(!isEmpty(task)){\n            var single_detail     =  populate_details(task._id, db_obj.details),\n            single_prepare_task   =  formulate_task(task, db_obj),\n            single_prepare_detail =  formulate_details(single_detail);\n\n            req_page = {\n               page_id : page_id,\n               user    : user_obj || {},\n               task    : single_prepare_task,\n               detail  : getpage(single_prepare_detail)\n            };\n        }\n    }\n\n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n        \n    return {req_page : req_page, pages: pages};\n}\n\nfunction getpage(details){\n // var  result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n//       detail = result.detail_array ;\n   var   result  = populate_counts(details),\n         detail  = result.detail_array;\n         \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    \n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_record.user_tasks); \n\n            if( isEmpty(isUserTaskExits) ){ //check if already user_task is not present for that user. if not then do the following steps\n                populate_ancestors(details[loop].page_id, db_record.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                populate_decendents(details[loop].page_id, db_record.details); //calculating sub childs _id with current requested page_id\n     \n                msg.updated_user_task = {   // create user_task record if user_task is not present in database \n                  table           : \"user_task\",\n                \ttask_id \t\t    : details[loop].task_id[0],\n                \tuser_id\t\t\t : user_obj._id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tsynchronized    : 1,\n                  status          : 0, \n                \tdate_updated\t : null,\t\n                \tparent_id\t\t : details[loop].task_id[0],\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent_counts_array,\n                \tcount_status\t : {\n                \t   active       : 1,\n                \t   unread       : 0,\n                \t},\n                \tcount\t\t\t    : {\n                \t    active      : 1,\n                \t    unread      : 0,\n                \t},\n                \tcount_if\t\t    : {\n                \t    active      : 1,\n                \t    unread      : 0\n                \t},\n                \ttemplates\t\t : {},\n                \ttimeout\t\t\t : {},\n                \tcreatedAt       : new Date().getTime()\n                };\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n                \n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                msg.updated_user_task = {};\n                var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                details[loop].count.active = detail_count.active; \n                details[loop].count.unread = detail_count.unread;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n\n    if(!isEmpty(msg.updated_user_task))  msg.update_my_user_task = true;\n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n\n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    if(isEmpty(obj)) return {};\n    if(isEmpty(user_tasks)) return {};\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == obj.user_id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            return user_tasks[loop];\n        }\n    }\n    \n    return {};\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id);\n                }\n                populate_ancestors( task_arr[index].parent_id, db_record.tasks, \"parent_id\"); \n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, ancestor_conts_array ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id);\n                        populate_ancestors( task_arr[itr].parent_id, db_record.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id);\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_record.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            if(user_obj.data){\n                 var obj2 = detail.type ,\n                     obj1 = user_obj.data.groups;\n                return Object.keys( obj1 ).every( function( prop ) {\n             \t\treturn obj2.hasOwnProperty( prop );\n             \t});\n            }else{\n                return true;\n            }\n        }\n    }\n}\n\n//function get_page_array(detail_array){\n//    \n//    for(var itr = 0 ; itr < detail_array.length; itr++){\n//        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n//        \n//        if(detail_array[itr].to_page_id){\n//            count = get_sub_child_count(detail_array[itr].to_page_id);\n//            \n//            if(check_obj(count) > 0){\n//                current_count_active = count.active ;\n//                current_count_unread = count.unread ;\n//            }\n//        }else{\n//            current_count_active = detail_array[itr].count.active ;\n//            current_count_unread = detail_array[itr].count.unread ;\n//        }\n//        active = active + current_count_active ;\n//        unread = unread + current_count_unread ;\n//        \n//        if(detail_array[itr].count){\n//            detail_array[itr].count.active = active ;\n//            detail_array[itr].count.unread = unread ;\n//        }\n//    }\n//\n//    return {\n//        detail_array :   detail_array,\n//    };\n//}\n//\n//function get_sub_child_count(to_page_id){\n//    var count = {active:0, unread: 0}, details = db_record.details;\n//    \n//    for(var itr = 0; itr < details.length; itr++){\n//        if(to_page_id == details[itr].page_id){\n//            if(details[itr].count_status){\n//                count.active += details[itr].count_status.active ;\n//                count.unread += details[itr].count_status.unread ;\n//            }\n//        }\n//    }\n//    return count;\n//}\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            // node.warn(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n            // node.warn(detail_data);\n            \n            for(var d=0; d<detail_data.length; d++){\n                \n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n                        //node.warn(\"comes in public case\");\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n                        if((\"admin\" in user_obj.type)){\n                        //    node.warn(\"comes in admin case\");\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction hasSameProps( obj1, obj2 ) {\n    var isExists = false;\n    \n    if(!isEmpty(obj1)){\n        obj1 = obj1.groups ;\n        isExists = Object.keys( obj1 ).every( function( prop ) {\n     \t\treturn obj2.hasOwnProperty( prop );\n     \t});    \n    }\n \treturn isExists;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    // node.warn(\"id >>>>>>>>>>>>>>>>>>>>\");\n    // node.warn(id);\n    // node.warn(arr);\n    \n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    for(var i =0; i<users.length; i++){\n        if(access_token === users[i].access_token){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else if(d === \"false\"){\n        return false;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2131.0007705688477,
        "y": 572.6668214797974,
        "wires": [
            [
                "2cc174c1.6bacdc"
            ]
        ]
    },
    {
        "id": "f19e5754.210198",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2567.833972930908,
        "y": 672.0001649856567,
        "wires": []
    },
    {
        "id": "6acadba6.de4814",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "isUpdateUserTasks",
        "property": "isUpdateUserTasks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2331.500747680664,
        "y": 534.333399772644,
        "wires": [
            [
                "2e9f2b10.8a15d4"
            ]
        ]
    },
    {
        "id": "2e9f2b10.8a15d4",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2518.5011138916016,
        "y": 535.6667737960815,
        "wires": [
            [
                "70475134.b5a74"
            ]
        ]
    },
    {
        "id": "70475134.b5a74",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "payload",
        "func": "var content          = msg.payload_content;\n    users_all_task   = simplfyUserTask(msg.payload);\n\nvar updated_user_task = populate_updated_user_task(content.user_task_list, users_all_task);\n\nif(!isEmpty(updated_user_task)){\n    msg.payload = { \"docs\": updated_user_task };   \n}else{\n    var obj = [];\n    for(var i=0; i<content.user_task_list.length; i++){\n        obj.push({\n            table           : \"user_task\",\n        \ttask_id \t\t: content.user_task_list[i].task_id,\n        \tuser_id\t\t\t: content.user_task_list[i].user_id,\n        \tpage_id         : parseInt(content.user_task_list[i].page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 1, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: content.user_task_list[i].task_id,\n        \tancestors       : content.user_task_list[i].ancestors, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : content.user_task_list[i].unread,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        });\n    }\n    msg.payload = { \"docs\": obj };   \n}\n\nreturn msg;\n\nfunction simplfyUserTask(user_task){\n    if(isEmpty(user_task)){\n        return [];\n    }else{\n        var d = [], rows = user_task.rows;\n        for(var i=0; i<rows.length; i++){\n            d.push(rows[i].value);\n        }\n        return d;\n    }    \n}\n\nfunction populate_updated_user_task(user_task_list, users_all_task){\n\n    if(!isEmpty(user_task_list) && !isEmpty(user_task_list)){\n        var user_task = [];\n\n        for(var i=0; i<users_all_task.length; i++){\n            for(j=0; j<user_task_list.length; j++){\n                if(\n                    (users_all_task[i].user_id == user_task_list[j].user_id) &&\n                    (users_all_task[i].task_id == user_task_list[j].task_id) &&\n                    (users_all_task[i].page_id == user_task_list[j].page_id)  \n                ){\n                    users_all_task[i].synchronized = 1 ;\n                    users_all_task[i].status       = 1 ;\n                    users_all_task[i].count.unread = user_task_list[j].unread ;\n                    users_all_task[i].date_updated = new Date().getTime();\n                    \n                    //push to new array which is going to update into db.\n                    user_task.push(users_all_task[i]);\n                }\n            }\n        }\n        return user_task ;\n    }else{\n        return null;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2678.834243774414,
        "y": 535.3334608078003,
        "wires": [
            [
                "76e5d666.571e88",
                "c4b54b65.01a2b8"
            ]
        ]
    },
    {
        "id": "c4b54b65.01a2b8",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2858.1683654785156,
        "y": 530.0001773834229,
        "wires": [
            [
                "b4d044f3.6326c8"
            ]
        ]
    },
    {
        "id": "b4d044f3.6326c8",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3075.1674575805664,
        "y": 507.66681480407715,
        "wires": []
    },
    {
        "id": "7e6d9628.c836b8",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "Updated_get_pages endpoint",
        "info": "",
        "x": 1252.7656860351562,
        "y": 487.2500616709392,
        "wires": []
    },
    {
        "id": "41f6d315.284eac",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 82.66667175292969,
        "y": 2991.3334312438965,
        "wires": [
            [
                "8df59faa.2db1d"
            ]
        ]
    },
    {
        "id": "e3c921b6.2d7ae",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "get_page endpoint (working endpoint plz do not delete)",
        "info": "",
        "x": 218.83335876464844,
        "y": 2930.826946258545,
        "wires": []
    },
    {
        "id": "8df59faa.2db1d",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 252.66282653808594,
        "y": 2990.2629404067993,
        "wires": [
            [
                "1208319.200eece"
            ],
            [
                "f3b8c901.7aa0e8"
            ]
        ]
    },
    {
        "id": "1208319.200eece",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 394.6744842529297,
        "y": 2960.493416786194,
        "wires": []
    },
    {
        "id": "f3b8c901.7aa0e8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 391.2838592529297,
        "y": 3025.344979286194,
        "wires": [
            [
                "aa7190ec.ef92e"
            ]
        ]
    },
    {
        "id": "aa7190ec.ef92e",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 527.4505462646484,
        "y": 3025.344994544983,
        "wires": [
            [
                "4d3a8f6b.41c2e"
            ],
            [
                "406ebbbb.20da84"
            ]
        ]
    },
    {
        "id": "4d3a8f6b.41c2e",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 654.2837677001953,
        "y": 3018.344979286194,
        "wires": []
    },
    {
        "id": "406ebbbb.20da84",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 685.2837371826172,
        "y": 3077.290291786194,
        "wires": [
            [
                "849d12d9.9e1da"
            ]
        ]
    },
    {
        "id": "849d12d9.9e1da",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "format",
        "func": "var db_records   = msg.payload ;\n    access_token = msg.payload_content.access_token ;\n    page_id      = msg.payload_content.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.updated_user_task = null ;\n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    var result = get_page_array(details) ,\n        detail = result.detail_array ;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                \n                if(!isEmpty(user_obj)){\n                    update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n                } \n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n\n    if ( create_user_task_flag ) {\n        \n        if(task_obj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(task_obj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n            }\n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {}, user_task_arr = db_obj.user_tasks ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        == user_id &&\n                user_task_arr[i].task_id        == task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_obj.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n                    if(check_isDisplay(detail_data[d].display_if_empty)){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].task_id == id){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 879.4505157470703,
        "y": 3077.344979286194,
        "wires": [
            [
                "f8042c51.d3228"
            ]
        ]
    },
    {
        "id": "f8042c51.d3228",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "updated_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1009.5494842529297,
        "y": 3077.419198036194,
        "wires": [
            [
                "9fc4ab8b.fbafd8",
                "62fb6e1b.6c97b"
            ],
            [
                "9fc4ab8b.fbafd8"
            ]
        ]
    },
    {
        "id": "62fb6e1b.6c97b",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1161.5416717529297,
        "y": 3035.657479286194,
        "wires": [
            [
                "cd711d60.19ff3"
            ]
        ]
    },
    {
        "id": "9fc4ab8b.fbafd8",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1150.2838592529297,
        "y": 3078.001229286194,
        "wires": []
    },
    {
        "id": "cd711d60.19ff3",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "update_user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1346.5494842529297,
        "y": 3035.317635536194,
        "wires": []
    },
    {
        "id": "6ca781dd.6c20f",
        "type": "change",
        "z": "d4fc71c6.eee2",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 748.8333778381348,
        "y": 140.00001907348633,
        "wires": [
            [
                "2e5e2993.c71836"
            ]
        ]
    },
    {
        "id": "2e5e2993.c71836",
        "type": "http request",
        "z": "d4fc71c6.eee2",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 920.8333435058594,
        "y": 141.000018119812,
        "wires": [
            [
                "f6db4f52.f5f3e"
            ]
        ]
    },
    {
        "id": "f6db4f52.f5f3e",
        "type": "change",
        "z": "d4fc71c6.eee2",
        "name": "counts",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "count_objs",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1061.8333587646484,
        "y": 139.33333206176758,
        "wires": [
            [
                "f5002ded.ccc75"
            ]
        ]
    },
    {
        "id": "3f0b1978.18eed6",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 2275.333583831787,
        "y": 149.6666660308838,
        "wires": [
            [
                "3a122834.a215b8"
            ]
        ]
    },
    {
        "id": "9dc55849.0108d8",
        "type": "change",
        "z": "5e22f743.a6a0b8",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2103.3336181640625,
        "y": 148.6666669845581,
        "wires": [
            [
                "3f0b1978.18eed6"
            ]
        ]
    },
    {
        "id": "76e5d666.571e88",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "bulk payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2835.167282104492,
        "y": 475.99999713897705,
        "wires": []
    },
    {
        "id": "8f00693.57a2a98",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2595.8334884643555,
        "y": 235.00004196166992,
        "wires": []
    },
    {
        "id": "49ac873d.cc2de8",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 143.83333587646484,
        "y": 84.00003051757812,
        "wires": [
            [
                "83cd7147.7005b"
            ]
        ]
    },
    {
        "id": "83cd7147.7005b",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "just a function node",
        "func": "msg.payload = \"Test Node\";\nnode.warn(\"Just to check a logs.\");\n\nvar cloneObj = Object.assign({}, msg);\nmsg.payload = {\n    msgObject : cloneObj\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 334.8333435058594,
        "y": 83.00003242492676,
        "wires": [
            [
                "8007e56a.746888"
            ]
        ]
    },
    {
        "id": "4875e436.7a2cfc",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 755.8333339691162,
        "y": 86.33335304260254,
        "wires": []
    },
    {
        "id": "8007e56a.746888",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "http://mastersoftwaretechnologies.com/roger_project/log.php",
        "tls": "",
        "x": 558.8333549499512,
        "y": 78.33334922790527,
        "wires": [
            [
                "4875e436.7a2cfc"
            ]
        ]
    },
    {
        "id": "6cc2848f.b7b8bc",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_all_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1212.8333435058594,
        "y": 714.9999923706055,
        "wires": [
            [
                "5026614f.73353"
            ]
        ]
    },
    {
        "id": "5026614f.73353",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "all_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1380.8333740234375,
        "y": 712.6667098999023,
        "wires": [
            [
                "9d1db335.cafd3"
            ]
        ]
    },
    {
        "id": "9d1db335.cafd3",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var response = msg.payload ;\n\nif(!isEmpty(response)){\n    msg.payload = {status:200, msg: \"Record fectehed successfully.\", data: response};\n}else{\n    msg.statusCode = 400;\n    msg.payload = {status:400, msg: \"Error while fetching record..\", data: response};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.833381652832,
        "y": 712.666708946228,
        "wires": [
            [
                "82810bd4.435928"
            ]
        ]
    },
    {
        "id": "82810bd4.435928",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1688.8334045410156,
        "y": 709.9999923706055,
        "wires": []
    },
    {
        "id": "8047b1c2.00b14",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_detail_to_task",
        "func": "var content         = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(content.detail_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`detaik_id`is missing\", data: content};\n}else if(isEmpty(content.task_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`task_id`is missing\", data: content};\n}else if(isEmpty(access_token)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`access_token`is missing\", data: content};\n}else{\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task\";\n    msg.method  = \"GET\";\n}\n\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 850.3333740234375,
        "wires": [
            [
                "b009fcf1.982cd"
            ]
        ]
    },
    {
        "id": "418ae6bc.5f2e38",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1968.500244140625,
        "y": 853.6667852401733,
        "wires": []
    },
    {
        "id": "b009fcf1.982cd",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1488.5000076293945,
        "y": 848.0000267028809,
        "wires": [
            [
                "647749b5.f11ce8"
            ]
        ]
    },
    {
        "id": "647749b5.f11ce8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_data",
        "func": "var content         = msg.payload_data,\n    access_token    = msg.access_token,\n    db_records      = msg.payload;\n\nif(isEmpty(db_records.rows)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to fetch data via using cloudant view 'add_detail_to_task'\", data: null};\n}else{\n    var records     = populate_record(db_records.rows),\n        detail_obj  = populate_details(records.details, content.detail_id),\n        user_obj    = populate_user(records.users, access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`access_token` is not valid.\", data: null};\n    }else if(isEmpty(detail_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`detail_id` is not valid.\", data: null};\n    }else{\n\n        if(isEmpty(detail_obj.task_id)){\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"`detail_obj` doesn't contains task_id. please check it once.\", data: null};\n        }\n        else if(Object.prototype.toString.call(detail_obj.task_id) !== \"[object Array]\"){\n            detail_obj.task_id = detail_obj.task_id.push(task_id);    \n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Invalid detail.task_id. Plesae check details_obj once.\", data: null};\n        }else{\n            msg.statusCode     = 200;\n            detail_obj.task_id.push(content.task_id);    \n            msg.payload        = detail_obj;\n        }\n    }\n}\nreturn msg;\n\nfunction populate_user(arr, token){\n    if(isEmpty(token)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].access_token == token){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_details(arr, id){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]._id == id){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_record(list){\n    var users = [],details=[], sorted_detail=[];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, details: sorted_detail} ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1657.8333435058594,
        "y": 891.6666641235352,
        "wires": [
            [
                "ced53a41.ba8868"
            ]
        ]
    },
    {
        "id": "ced53a41.ba8868",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1824.8333435058594,
        "y": 892.0000076293945,
        "wires": [
            [
                "418ae6bc.5f2e38"
            ],
            [
                "d674a9dd.e79dd8",
                "fb340adc.026378"
            ]
        ]
    },
    {
        "id": "fb340adc.026378",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1990.8336181640625,
        "y": 907.3334197998047,
        "wires": []
    },
    {
        "id": "d674a9dd.e79dd8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var data = msg.payload ;\n\nmsg.payload = {status: 200, msg: \"Record updated successfully.\", data: data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1982.8333435058594,
        "y": 964.0000076293945,
        "wires": [
            [
                "b1560562.e65e68"
            ]
        ]
    },
    {
        "id": "b1560562.e65e68",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2118.8334045410156,
        "y": 965.3333511352539,
        "wires": []
    },
    {
        "id": "6823a1ed.2beed",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 90.66666412353516,
        "y": 3154.000196456909,
        "wires": [
            [
                "6d834958.2ab618"
            ]
        ]
    },
    {
        "id": "6d834958.2ab618",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 362.6628189086914,
        "y": 3156.9296951293945,
        "wires": [
            [
                "5fcf5e8b.16a77"
            ],
            [
                "2a2db810.f39038"
            ]
        ]
    },
    {
        "id": "5fcf5e8b.16a77",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 504.67447662353516,
        "y": 3127.160171508789,
        "wires": []
    },
    {
        "id": "2a2db810.f39038",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 501.28385162353516,
        "y": 3192.011734008789,
        "wires": [
            [
                "1ed36759.7ca5d9"
            ]
        ]
    },
    {
        "id": "1ed36759.7ca5d9",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 637.4505386352539,
        "y": 3192.011749267578,
        "wires": [
            [
                "a5c8c451.8dd208"
            ],
            [
                "56100971.4884d8"
            ]
        ]
    },
    {
        "id": "a5c8c451.8dd208",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 764.2837600708008,
        "y": 3185.011734008789,
        "wires": []
    },
    {
        "id": "56100971.4884d8",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 795.2837295532227,
        "y": 3243.957046508789,
        "wires": [
            [
                "97b08421.6d4cb8"
            ]
        ]
    },
    {
        "id": "114bda8.f52b426",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "get_page endpoint (working backup)",
        "info": "",
        "x": 168.8333511352539,
        "y": 3102.493681907654,
        "wires": []
    },
    {
        "id": "c3c3e7d0.a83368",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 1152.0002479553223,
        "y": 3243.826837539673,
        "wires": [
            [
                "d01bac02.b8db9"
            ]
        ]
    },
    {
        "id": "97b08421.6d4cb8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980.0002822875977,
        "y": 3242.826838493347,
        "wires": [
            [
                "c3c3e7d0.a83368"
            ]
        ]
    },
    {
        "id": "d01bac02.b8db9",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "format",
        "func": "var db_records   = msg.db_records ,\n    counts       = msg.payload ,\n    access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n    \nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.isUpdateUserTask = false; \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    var result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n        detail = result.detail_array ;\n    \n    // var result = populate_active_unread_count(details),\n    //     detail = result.detail_array;\n \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(detail_array){\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(check_obj(count) > 0){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                \n                if(!isEmpty(user_obj)){\n                    update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n                } \n            }\n        }else{\n            current_count_active = detail_array[itr].count.active ;\n            current_count_unread = detail_array[itr].count.unread ;\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        if(detail_array[itr].count){\n            detail_array[itr].count.active = active ;\n            detail_array[itr].count.unread = unread ;\n        }\n    }\n\n    return {\n        detail_array :   detail_array,\n    };\n}\n\nfunction update_user_task_record(obj, update_parent){\n\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true, ancestors_array= [];\n    \n    if (check_obj(user_task_obj) > 0){\n    \t\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n\n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n\n    }\n    \n    if ( create_user_task_flag ) {\n        \n        if(task_obj.parent_id){\n            var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n            if(check_obj(if_user_task) > 0){\n                ancestors_array = if_user_task.ancestors ;    \n\n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n                    ancestors_array.push(task_obj.parent_id);\n                }\n            }else{\n                \n                if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n            }\n        }\n        \n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: obj.task_id,\n        \tancestors       : ancestors_array, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n    \n    msg.isUpdateUserTask = true ;\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {}, user_task_arr = db_obj.user_tasks ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        == user_id &&\n                user_task_arr[i].task_id        == task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = db_obj.details;\n    \n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            if(details[itr].count_status){\n                count.active += details[itr].count_status.active ;\n                count.unread += details[itr].count_status.unread ;\n            }\n        }\n    }\n    return count;\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else if(\n                    (\"dri_main\" in detail_data[d].type) && (\"dri_main\" in user_obj.type) \n                ){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n\n                    if( check_isDisplay(detail_data[d].display_if_empty) && \n                        (\"public\" in detail_data[d].type) \n                    ){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.4506721496582,
        "y": 3241.0117321014404,
        "wires": [
            [
                "cd54bcc.47f374",
                "17932363.55781d"
            ]
        ]
    },
    {
        "id": "cd54bcc.47f374",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "isUpdateUserTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1438.5496406555176,
        "y": 3241.0859508514404,
        "wires": [
            [
                "29a2fdae.42e632",
                "504a6c18.1737d4"
            ],
            [
                "29a2fdae.42e632"
            ]
        ]
    },
    {
        "id": "504a6c18.1737d4",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1566.833381652832,
        "y": 3178.826835632324,
        "wires": [
            [
                "1f15beca.c55611",
                "877ee55c.a35e38"
            ]
        ]
    },
    {
        "id": "29a2fdae.42e632",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1610.2843437194824,
        "y": 3239.667984008789,
        "wires": []
    },
    {
        "id": "1f15beca.c55611",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1780.833501815796,
        "y": 3175.1601905822754,
        "wires": []
    },
    {
        "id": "877ee55c.a35e38",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1785.8334999084473,
        "y": 3214.160186767578,
        "wires": []
    },
    {
        "id": "17932363.55781d",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1472.5001525878906,
        "y": 3329.160213470459,
        "wires": []
    },
    {
        "id": "e2be2d17.4c36",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "x": 2739.500160217285,
        "y": 194.66665649414062,
        "wires": []
    },
    {
        "id": "dfc9e242.d78f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_all_assistants",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1233.5,
        "y": 790.0000076293945,
        "wires": [
            [
                "bf9ada8f.bb0c98"
            ]
        ]
    },
    {
        "id": "ee2d685e.0c3c58",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1723.5004272460938,
        "y": 794.3333396911621,
        "wires": []
    },
    {
        "id": "bf9ada8f.bb0c98",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1424.5000038146973,
        "y": 790.6666736602783,
        "wires": [
            [
                "a9573ce4.de2d5"
            ]
        ]
    },
    {
        "id": "a9573ce4.de2d5",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var payload = msg.payload,\n    payload_content = msg.req_params;\n\nif(isUserAuthenticated(payload, payload_content.access_token)){\n    var filter      = payload_content.content.filters,\n        isGroupUsers= payload_content.content.group_users,\n        result      = [], \n        type        = null;\n        \n    if(!isEmpty(isGroupUsers)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(payload[itr].data){\n                if(filter in payload[itr].data.groups){\n                    result.push(payload[itr]);\n                }\n            }\n        }\n    }else if(!isEmpty(filter)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(filter in payload[itr].type){\n                result.push(payload[itr]);\n            }\n        }\n    }else{\n        type = \"add_assistant\";\n        for(var itr in payload){\n            result.push({\n                user_id     : payload[itr]._id,\n                first_name  : payload[itr].firstname,\n                last_name   : payload[itr].lastname,\n                type        : payload[itr].type,\n                data        : payload[itr].data,\n                phone       : payload[itr].virtual_phone\n            });\n        }\n    }\n    msg.statusCode  = 200;\n    msg.payload     = {status: 200, msg: \"Record fecthed successfully.\", record: {type: type, result:result}};\n}else{\n    msg.statusCode  = 400;\n    msg.payload     = {status: 200, msg: \"`access_token` is invalid\", record: []};          \n}\n\nreturn msg;\n\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1593.1667594909668,
        "y": 792.000006198883,
        "wires": [
            [
                "ee2d685e.0c3c58"
            ]
        ]
    },
    {
        "id": "b43c0e6e.e29ac",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistants",
        "func": "var access_token = msg.access_token ,\n    payload      = msg.payload_data ;\n\n\nif(isEmpty(access_token)){\n    msg.API_ERROR  = \"API_ERROR\";\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`access_token` is missing\", data: null};\n}else if(isEmpty(payload.number)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`User number` is missing to add as assistants\", data: null};\n}else{\n    msg.API_ERROR  = \"API_SUCCESS\";\n    msg.payload    = {\n        query : \"table:users\",\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1289.5000305175781,
        "y": 981.0000381469727,
        "wires": [
            [
                "6be264e8.9c21ec"
            ]
        ]
    },
    {
        "id": "de63dc2b.8b5da",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1587.5000534057617,
        "y": 945.3334074020386,
        "wires": []
    },
    {
        "id": "6be264e8.9c21ec",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1449.833381652832,
        "y": 980.6667442321777,
        "wires": [
            [
                "de63dc2b.8b5da"
            ],
            [
                "f447ca2.b3ac138"
            ]
        ]
    },
    {
        "id": "f447ca2.b3ac138",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1609.8333892822266,
        "y": 995.3334121704102,
        "wires": [
            [
                "d6ab8f0a.e368"
            ]
        ]
    },
    {
        "id": "d6ab8f0a.e368",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token = msg.access_token ,\n    req_body     = msg.payload_data ,\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to fetch all users\", data: []};\n}else{\n    if(isUserAuthenticated(payload, access_token)){\n        var user_obj = isUserExits(payload, req_body.number);\n        if( isEmpty(user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Entred phone number doesn't exits in database.\", data: []};    \n        }else{\n\n            if((\"virtual_group\" in user_obj.type)){\n                msg.API_ERROR   = \"API_ERROR\";\n                msg.statusCode  = 400;\n                msg.payload     = {status: 400, msg: \"User already added into this group\", data: []};    \n            }else{\n                msg.API_ERROR   = \"API_SUCCESS\";\n                user_obj.type.virtual_group  = \"virtual_group\";\n                msg.payload             = user_obj ;\n                msg.api_response        =  {status: 200, msg: \"User added into group successfully\", data: user_obj};\n            }\n        }\n    }else{\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n    }\n}\nreturn msg;\n\nfunction isUserExits(users, number){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == parseInt(number)){\n            obj = users[itr];\n        }\n    }\n    return obj ;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1770.833396911621,
        "y": 1063.6667051315308,
        "wires": [
            [
                "9b02b6e0.6589a8"
            ]
        ]
    },
    {
        "id": "9b02b6e0.6589a8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1927.833408355713,
        "y": 1065.333370923996,
        "wires": [
            [
                "1aee5fb3.c2032",
                "17f6f0f5.e8e08f"
            ],
            [
                "f4598763.13ee78"
            ]
        ]
    },
    {
        "id": "f4598763.13ee78",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2092.8332920074463,
        "y": 1125.0000414848328,
        "wires": []
    },
    {
        "id": "1aee5fb3.c2032",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2117.833293914795,
        "y": 1006.6667041778564,
        "wires": []
    },
    {
        "id": "17f6f0f5.e8e08f",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2107.8333435058594,
        "y": 1054.0000076293945,
        "wires": [
            [
                "2ddd3c2d.d3aba4"
            ]
        ]
    },
    {
        "id": "2ddd3c2d.d3aba4",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2253.8334045410156,
        "y": 1056.333351135254,
        "wires": []
    },
    {
        "id": "e718dba4.a1d948",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_assistant_by_id",
        "func": "var params = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1247.1666564941406,
        "y": 870.3333206176758,
        "wires": [
            [
                "d17d7dcd.7e31a"
            ]
        ]
    },
    {
        "id": "2218aa.f99e9756",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1577.166763305664,
        "y": 842.6668014526367,
        "wires": []
    },
    {
        "id": "d17d7dcd.7e31a",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1429.5001678466797,
        "y": 870.3333849906921,
        "wires": [
            [
                "2218aa.f99e9756"
            ],
            [
                "245b5261.dbd88e"
            ]
        ]
    },
    {
        "id": "245b5261.dbd88e",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1596.1667594909668,
        "y": 891.3333864212036,
        "wires": [
            [
                "6a004a62.0a6034"
            ]
        ]
    },
    {
        "id": "6a004a62.0a6034",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var params       = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1759.1666564941406,
        "y": 893.0000076293945,
        "wires": [
            [
                "4f9f41e9.cd2b3"
            ]
        ]
    },
    {
        "id": "4f9f41e9.cd2b3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1897.1667785644531,
        "y": 893.000093460083,
        "wires": []
    },
    {
        "id": "f22f6e7b.b09f7",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_assistant",
        "func": "var access_token = msg.access_token;\n    user_data    = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_data` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1303.1667938232422,
        "y": 1128.3333778381348,
        "wires": [
            [
                "fbc9d9ee.646bc8"
            ]
        ]
    },
    {
        "id": "fbc9d9ee.646bc8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1468.6667175292969,
        "y": 1130.666708946228,
        "wires": [
            [
                "2da7884a.8e2688"
            ],
            [
                "7f739e74.47a5a"
            ]
        ]
    },
    {
        "id": "2da7884a.8e2688",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1616.3333129882812,
        "y": 1103.0001254081726,
        "wires": []
    },
    {
        "id": "7f739e74.47a5a",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1635.333309173584,
        "y": 1151.6667103767395,
        "wires": [
            [
                "6ce77516.2a0b0c"
            ]
        ]
    },
    {
        "id": "6ce77516.2a0b0c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var user_data    = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_data.user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        user_obj.firstname = user_data.first_name;\n        user_obj.lastname  = user_data.last_name;\n        user_obj.email     = user_data.email;\n        user_obj.device_id = user_data.deviceId;\n        user_obj.push_accepted = user_data.push_accepted;\n        msg.payload = user_obj;\n        msg.api_response = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1793.8334007263184,
        "y": 1206.6667137145996,
        "wires": [
            [
                "fb59f203.9f2f"
            ]
        ]
    },
    {
        "id": "fb59f203.9f2f",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1941.8333435058594,
        "y": 1208.0000076293945,
        "wires": [
            [
                "f4598763.13ee78"
            ],
            [
                "6592bd8f.ec7434",
                "ac1fc897.22f068"
            ]
        ]
    },
    {
        "id": "6592bd8f.ec7434",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2113.833293914795,
        "y": 1185.0000476837158,
        "wires": []
    },
    {
        "id": "ac1fc897.22f068",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"updated user_paylaod \");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_resposne;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2102.8333435058594,
        "y": 1232.333351135254,
        "wires": [
            [
                "ed80efa5.97463"
            ]
        ]
    },
    {
        "id": "ed80efa5.97463",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2269.8333435058594,
        "y": 1228.6666641235352,
        "wires": []
    },
    {
        "id": "d5a7251d.86fb18",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_assistant",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1299.5,
        "y": 1284,
        "wires": [
            [
                "4bb56912.8fefc8"
            ]
        ]
    },
    {
        "id": "4bb56912.8fefc8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1490.333251953125,
        "y": 1290,
        "wires": [
            [
                "833797ef.08e588"
            ],
            [
                "e93c0294.21bb5"
            ]
        ]
    },
    {
        "id": "833797ef.08e588",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1637.9998474121094,
        "y": 1262.3334164619446,
        "wires": []
    },
    {
        "id": "e93c0294.21bb5",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1656.999843597412,
        "y": 1311.0000014305115,
        "wires": [
            [
                "6f803e00.6ce044"
            ]
        ]
    },
    {
        "id": "6f803e00.6ce044",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n    \nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, body.id);\n    if( isEmpty(user_obj) ){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"User doesn't exists in database.\", data: []};    \n    }else{\n\n        if( !isExistsIngroup(body, user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"User doesn't exits in this group\", data: []};    \n        }else{\n            msg.API_ERROR   = \"API_SUCCESS\";\n            delete user_obj.data.groups[body.group_id];\n            msg.payload             = user_obj ;\n            msg.api_response        =  {status: 200, msg: \"User removed successfully.\", data: user_obj};\n        }\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n}\n    \nreturn msg;\n\nfunction isExistsIngroup(group, user){\n    var group_id = group.group_id ,\n        user_group = user.data.groups ;\n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1817.5000305175781,
        "y": 1339.333381652832,
        "wires": [
            [
                "4fa2c52f.da0f8c"
            ]
        ]
    },
    {
        "id": "4fa2c52f.da0f8c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1950,
        "y": 1341.6666259765625,
        "wires": [
            [
                "d3c981ad.a37fe",
                "3c39a2d7.282fde"
            ],
            [
                "5d7cbcb.3699944"
            ]
        ]
    },
    {
        "id": "5d7cbcb.3699944",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2114.9998836517334,
        "y": 1401.3332965373993,
        "wires": []
    },
    {
        "id": "d3c981ad.a37fe",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2139.999885559082,
        "y": 1282.999959230423,
        "wires": []
    },
    {
        "id": "3c39a2d7.282fde",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2129.9999351501465,
        "y": 1330.333262681961,
        "wires": [
            [
                "a90df879.2e92a8"
            ]
        ]
    },
    {
        "id": "a90df879.2e92a8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2275.9999961853027,
        "y": 1332.6666061878204,
        "wires": []
    },
    {
        "id": "408043d6.f202ec",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_group_detail",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else if(isEmpty(data.name)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_name` is missing\", record: []};\n}else if(isEmpty(data.owner_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_owner_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.5000457763672,
        "y": 1401.0000581741333,
        "wires": [
            [
                "19fbd9bf.7d9396"
            ]
        ]
    },
    {
        "id": "a2e9c193.c847",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1642.5001029968262,
        "y": 1399.000117301941,
        "wires": []
    },
    {
        "id": "19fbd9bf.7d9396",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1487.8334274291992,
        "y": 1414.0002794265747,
        "wires": [
            [
                "a2e9c193.c847"
            ],
            [
                "1d17c334.e9a03d"
            ]
        ]
    },
    {
        "id": "1d17c334.e9a03d",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1663.8334350585938,
        "y": 1444.0001192092896,
        "wires": [
            [
                "3cfbf703.f02c58"
            ]
        ]
    },
    {
        "id": "3cfbf703.f02c58",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Invalid `access_token`. Plesae check it once.\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload     = {\n        table       : \"group_table\",\n        owner_id    : data.owner_id,\n        group_name  : data.name\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1822.8333625793457,
        "y": 1443.000228881836,
        "wires": [
            [
                "4b7b045e.90d4bc"
            ]
        ]
    },
    {
        "id": "4b7b045e.90d4bc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1958.5000381469727,
        "y": 1442.0000648498535,
        "wires": [
            [
                "5d7cbcb.3699944"
            ],
            [
                "581140d.29885c",
                "c7e65ff.722c8a"
            ]
        ]
    },
    {
        "id": "581140d.29885c",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2134.500045776367,
        "y": 1446.6667289733887,
        "wires": []
    },
    {
        "id": "c7e65ff.722c8a",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2124.500030517578,
        "y": 1499.0000381469727,
        "wires": [
            [
                "982ca065.fb5a8"
            ]
        ]
    },
    {
        "id": "982ca065.fb5a8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2267.500030517578,
        "y": 1500.333351135254,
        "wires": []
    },
    {
        "id": "645bcdba.991044",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_users_groups",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId;\n    \n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:group_table\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1242.1666870117188,
        "y": 965.6666946411133,
        "wires": [
            [
                "4ba1a09b.2a3d3"
            ]
        ]
    },
    {
        "id": "6056700f.3d639",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1542.166919708252,
        "y": 946.0002021789551,
        "wires": []
    },
    {
        "id": "4ba1a09b.2a3d3",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1409.0000839233398,
        "y": 966.3333721160889,
        "wires": [
            [
                "6056700f.3d639"
            ],
            [
                "81a656e3.c85a68"
            ]
        ]
    },
    {
        "id": "81a656e3.c85a68",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1566.1667594909668,
        "y": 1005.0000400543213,
        "wires": [
            [
                "27aa5866.044bd8"
            ]
        ]
    },
    {
        "id": "27aa5866.044bd8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId,\n    payload      = msg.payload ;\n\nuser_id = \"0a9b50963bc76018418ffd857d551ced\";\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n}else{\n    var userGroups  = populateUserGroups(user_id, payload);\n    if(isEmpty(userGroups)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status:200, msg: \"User group fetched successfully.\", record: userGroups};    \n    }\n}    \nreturn msg;\n\nfunction populateUserGroups(userId, groups){\n    var obj = [];\n    \n    if(isEmpty(userId)) return obj;\n    if(isEmpty(groups)) return obj;\n    \n    for(var itr in groups){\n        if(groups[itr].owner_id == userId){\n            obj.push(groups[itr]);\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1753.16676902771,
        "y": 1003.3333721160889,
        "wires": [
            [
                "c34fd50d.8fd768"
            ]
        ]
    },
    {
        "id": "c34fd50d.8fd768",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1916.1667785644531,
        "y": 1004.000039100647,
        "wires": []
    },
    {
        "id": "239a4a3b.ed4ef6",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_group",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 1494,
        "wires": [
            [
                "c915488b.9624e8"
            ]
        ]
    },
    {
        "id": "c915488b.9624e8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1481.6666259765625,
        "y": 1517.6666259765625,
        "wires": [
            [
                "1e9ca1bd.cbce4e"
            ],
            [
                "524fda04.a5b3e4"
            ]
        ]
    },
    {
        "id": "1e9ca1bd.cbce4e",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1629.3332214355469,
        "y": 1490.000042438507,
        "wires": []
    },
    {
        "id": "524fda04.a5b3e4",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1648.3332176208496,
        "y": 1538.666627407074,
        "wires": [
            [
                "265b51d8.b1d32e"
            ]
        ]
    },
    {
        "id": "265b51d8.b1d32e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Please check access_token.\", data: []};    \n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.user_obj = payload[0];\n    msg.payload  = {\n      query: \"table:group_table\"  ,\n      sort : \"_id<string>\"\n    };\n}   \n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1778.0002746582031,
        "y": 1598.6667346954346,
        "wires": [
            [
                "ed566255.7113"
            ]
        ]
    },
    {
        "id": "ed566255.7113",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1920.500114440918,
        "y": 1625.9999513626099,
        "wires": [
            [
                "e40bc284.830bc"
            ],
            [
                "dc409187.97054"
            ]
        ]
    },
    {
        "id": "e40bc284.830bc",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2069.5001258850098,
        "y": 1585.6667757034302,
        "wires": []
    },
    {
        "id": "dc409187.97054",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2090.166793823242,
        "y": 1638.0002784729004,
        "wires": [
            [
                "72c4bf5b.a1704"
            ]
        ]
    },
    {
        "id": "72c4bf5b.a1704",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var group_tables = msg.payload ,\n    user_obj     = msg.user_obj,\n    data         = msg.payload_data;\n\nif(isEmpty(group_tables)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to find groups for this user.\", data: []};    \n}else{\n    var group = populate_record(user_obj._id, group_tables);\n    if(isEmpty(group)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 403;\n        msg.payload     = {status: 403, msg: \"You are not authrozied to remove this group.\", data: []};    \n    }else{\n        group._deleted  = true;\n        msg.payload     = group;\n    }\n}\n\nreturn msg;\n\nfunction populate_record(userId, groups){\n    var obj = {};\n    for(var itr in groups){\n        if(\n            \n            (groups[itr]._id        == data.id    ) &&\n            (groups[itr].owner_id   == userId)\n        ){\n            obj = groups[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.166778564453,
        "y": 1636.6667251586914,
        "wires": [
            [
                "d4217daa.54806"
            ]
        ]
    },
    {
        "id": "40ef3e97.9699b",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2553,
        "y": 1581,
        "wires": []
    },
    {
        "id": "15860d44.7d8753",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2572.500162124634,
        "y": 1626.3334324359894,
        "wires": []
    },
    {
        "id": "5661aefd.177be",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2562.5001468658447,
        "y": 1678.6667416095734,
        "wires": [
            [
                "d646672f.677488"
            ]
        ]
    },
    {
        "id": "d646672f.677488",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2705.5001468658447,
        "y": 1680.0000545978546,
        "wires": []
    },
    {
        "id": "d4217daa.54806",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2385,
        "y": 1638,
        "wires": [
            [
                "40ef3e97.9699b"
            ],
            [
                "15860d44.7d8753",
                "5661aefd.177be"
            ]
        ]
    },
    {
        "id": "2c021dd8.471292",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistant_to_groups",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data.assistants)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Assistants list is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1334.4999961853027,
        "y": 1590.0000352859497,
        "wires": [
            [
                "61d507ca.0f3a28"
            ]
        ]
    },
    {
        "id": "61d507ca.0f3a28",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1492.6666259765625,
        "y": 1632.6666259765625,
        "wires": [
            [
                "aa8444ff.e07818"
            ],
            [
                "d2ef871e.0585d8"
            ]
        ]
    },
    {
        "id": "aa8444ff.e07818",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1640.3332214355469,
        "y": 1605.000042438507,
        "wires": []
    },
    {
        "id": "d2ef871e.0585d8",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1659.3332176208496,
        "y": 1653.666627407074,
        "wires": [
            [
                "dfdd06d4.43f328"
            ]
        ]
    },
    {
        "id": "dfdd06d4.43f328",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token    = msg.access_token,\n    assistants      = msg.payload_data.assistants,\n    payload         = msg.payload ,\n    group_id        = randomString(32);\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Unable to get user records from database.\", record: []};\n}else{\n    \n    var user_obj    = populate_user(access_token, payload);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"Invalid `access_token`. Please check it once.\", record: []};\n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.payload     = {\n            _id  : group_id,\n            table: \"group_table\",\n            owner_id: payload[0]._id,\n            group_name: getRandomGroupName()\n        };\n        \n        msg.update_user =  {\n            docs: populate_updated_users(group_id, payload, assistants)\n        };\n    }\n}\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction getRandomGroupName(){\n    var groupName = [\"dri_main\", \"demo_group\", \"test_group\", \"first_responder\", \"second_responder\", \"third_responder\"];\n    return groupName[Math.floor(Math.random() * groupName.length)];\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    \n    if(isEmpty(access_token)) return obj;\n    if(isEmpty(users)) return obj;\n    \n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            obj = users[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_updated_users(group_id, users, assistants){\n    var assis = [];\n    for(var ass in assistants){\n        for(var itr in users){\n            if(assistants[ass].detail_id == users[itr]._id){\n                delete users[itr].type.virtual_group ;\n                users[itr].data = {groups: {}};\n                users[itr].data.groups[group_id] = true;\n                assis.push(users[itr]);\n            }\n        }\n    }\n    return assis;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1813.8334121704102,
        "y": 1724.333779335022,
        "wires": [
            [
                "5b71aba.73a7154"
            ]
        ]
    },
    {
        "id": "5b71aba.73a7154",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1957.6666374206543,
        "y": 1723.0003261566162,
        "wires": [
            [
                "8b45b1b1.fc0b9"
            ],
            [
                "2caf8cad.c39244",
                "44778f46.48233"
            ]
        ]
    },
    {
        "id": "8b45b1b1.fc0b9",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2099.333297729492,
        "y": 1681.3337783813477,
        "wires": []
    },
    {
        "id": "2caf8cad.c39244",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2121.8334579467773,
        "y": 1727.3334531784058,
        "wires": []
    },
    {
        "id": "44778f46.48233",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "bulk_update",
        "func": "msg.payload = msg.update_user;\nmsg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method  = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2118.8334579467773,
        "y": 1778.0001239776611,
        "wires": [
            [
                "50e1b16d.5265d"
            ]
        ]
    },
    {
        "id": "50e1b16d.5265d",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2282.8333053588867,
        "y": 1775.666790008545,
        "wires": [
            [
                "26f92c93.f688c4"
            ]
        ]
    },
    {
        "id": "26f92c93.f688c4",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"update assistants are as follows\");\nnode.warn(msg.payload);\nmsg.payload = {\n    status: 200,\n    msg: \"Assistants added successfully\",\n    record: msg.updated_user\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2450.8334045410156,
        "y": 1777.6667251586914,
        "wires": [
            [
                "a6f58eda.58d83"
            ]
        ]
    },
    {
        "id": "a6f58eda.58d83",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2600.8333435058594,
        "y": 1779.666633605957,
        "wires": []
    },
    {
        "id": "c2d00307.92d8f",
        "type": "cloudant out",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2958.1668395996094,
        "y": 93.33333587646484,
        "wires": []
    },
    {
        "id": "38dfbf7e.14c96",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2727.000171661377,
        "y": 136.666654586792,
        "wires": []
    },
    {
        "id": "5c26a1e3.6989c",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "bulk_insert payload",
        "func": "msg.payload = msg.updated_user_task;\nnode.warn(\"msg.payload >>>>>>>>>>>>>\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2771.00048828125,
        "y": 96.66667461395264,
        "wires": [
            [
                "c2d00307.92d8f"
            ]
        ]
    },
    {
        "id": "55683dea.d34ba4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "count_view ",
        "func": "msg.db_get_page = msg.payload ;\nmsg.method      = \"GET\";\nmsg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1796.8333435058594,
        "y": 572.3333511352539,
        "wires": [
            [
                "9005f6af.57ea68"
            ]
        ]
    },
    {
        "id": "9005f6af.57ea68",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 1968.3333740234375,
        "y": 572.6666202545166,
        "wires": [
            [
                "4107fbed.f0bb14"
            ]
        ]
    },
    {
        "id": "7490d77b.6a0a88",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "update_my_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2296.8333053588867,
        "y": 623.3333702087402,
        "wires": [
            [
                "82ba6599.7af898"
            ],
            [
                "b01b1658.48db38"
            ]
        ]
    },
    {
        "id": "82ba6599.7af898",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "bulk_insert payload",
        "func": "msg.payload = msg.updated_user_task;\nnode.warn(\"msg.payload >>>>>>>>>>>>>\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2465.6664848327637,
        "y": 589.6666221618652,
        "wires": [
            [
                "d4e57b67.530ac8",
                "e92b38b7.b21168"
            ]
        ]
    },
    {
        "id": "d4e57b67.530ac8",
        "type": "cloudant out",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2652.832675933838,
        "y": 588.333330154419,
        "wires": []
    },
    {
        "id": "b01b1658.48db38",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "msg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2435.8333129882812,
        "y": 670.6666674613953,
        "wires": [
            [
                "f19e5754.210198"
            ]
        ]
    },
    {
        "id": "e92b38b7.b21168",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "msg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2642.8333435058594,
        "y": 626.6666641235352,
        "wires": [
            [
                "b0ea76f6.c9d628"
            ]
        ]
    },
    {
        "id": "b0ea76f6.c9d628",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2791.66650390625,
        "y": 624.6666259765625,
        "wires": []
    },
    {
        "id": "1bfda258.f5191e",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130.8333282470703,
        "y": 178.00002002716064,
        "wires": [
            [
                "d3864d01.427d1"
            ]
        ]
    },
    {
        "id": "d3864d01.427d1",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "payload",
        "func": "msg.payload = {\n    isNeedToTriggerRegresh: true,\n    detail_obj : {\n        page_id: 1501432755804,\n        task_id: [\"d1a0625639e39874c4b2a5a4f6339fab\"]\n    },\n    subscribed_users: [{user_id: \"389000afb54e42ac39d83d17c300e020\"}]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 304.83333587646484,
        "y": 178.00002002716064,
        "wires": [
            [
                "b711fa6.b1c2d08"
            ]
        ]
    },
    {
        "id": "b711fa6.b1c2d08",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "http://mastersoftwaretechnologies.com:6005/accept_request",
        "tls": "",
        "x": 506.8333511352539,
        "y": 184.33334255218506,
        "wires": [
            [
                "63b94bae.a1f904"
            ]
        ]
    },
    {
        "id": "63b94bae.a1f904",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 732.8333435058594,
        "y": 185.33333587646484,
        "wires": []
    },
    {
        "id": "b9ef6f80.eb9b1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task\";\nmsg.method          = \"GET\";\nmsg.detail_obj      = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2830.8021030426025,
        "y": 171.57424926757812,
        "wires": [
            [
                "47dad7f1.96d4e8"
            ]
        ]
    },
    {
        "id": "47dad7f1.96d4e8",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2995.802177429199,
        "y": 170.24088287353516,
        "wires": [
            [
                "a4b64678.912108"
            ]
        ]
    },
    {
        "id": "a4b64678.912108",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var detail_obj = msg.detail_obj,\n    payload    = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else{\n    msg.api_status  = \"API_ERROR\";\n    var user_tasks  = populate_user_task(payload.rows, detail_obj);\n    msg.payload     = {detail_obj: detail_obj, subscribed_users: user_tasks};\n}    \nreturn msg;\n\nfunction populate_user_task(lists, obj){\n    var user_tasks = [];\n    \n    for(var itr in lists){\n        if(\n            ( if_exists_in_arr(lists[itr].value.task_id, obj.task_id) )&&\n            (lists[itr].value.page_id  == obj.page_id)\n        ){\n            lists[itr].value.synchronized = 0;\n            lists[itr].value.status       = 0;\n            user_tasks.push(lists[itr].value);\n        }\n    }\n    return user_tasks;\n}\n\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3184.8021965026855,
        "y": 117.57430720329285,
        "wires": [
            [
                "cedd9c33.0f069",
                "3fe194ce.c5304c"
            ]
        ]
    },
    {
        "id": "10ee25dc.1f551a",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "Bulk Update",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3567.802215576172,
        "y": 53.90766406059265,
        "wires": [
            [
                "ea798a93.b276a8"
            ]
        ]
    },
    {
        "id": "cedd9c33.0f069",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "Notify socket server",
        "method": "POST",
        "ret": "obj",
        "url": "https://socket-server.mybluemix.net/accept_request",
        "tls": "",
        "x": 3457.469528198242,
        "y": 138.90762209892273,
        "wires": [
            [
                "ea798a93.b276a8"
            ]
        ]
    },
    {
        "id": "3fe194ce.c5304c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method      = \"POST\";\n\nnode.warn(\">>>>>>>>>>>>>>>>>>>>>>>>\");\nnode.warn(msg.payload);\n\nmsg.payload     = {\n  docs: msg.payload   \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3411.4688720703125,
        "y": 68.57432436943054,
        "wires": [
            [
                "10ee25dc.1f551a"
            ]
        ]
    },
    {
        "id": "ea798a93.b276a8",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3707.0007934570312,
        "y": 118.00008964538574,
        "wires": []
    },
    {
        "id": "e6e290c4.e21d5",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task",
        "tls": "",
        "x": 442.6666946411133,
        "y": 295.6666932106018,
        "wires": [
            [
                "cfc4d74c.4675d8"
            ]
        ]
    },
    {
        "id": "cfc4d74c.4675d8",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "populate",
        "func": "var detail_obj = msg.detail_obj,\n    payload    = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else{\n    msg.api_status  = \"API_ERROR\";\n    var user_tasks  = populate_user_task(payload.rows, detail_obj);\n    msg.payload     = {detail_obj: detail_obj, subscribed_users: user_tasks};\n}    \nreturn msg;\n\nfunction populate_user_task(lists, obj){\n    var user_tasks = [];\n    \n    for(var itr in lists){\n        if(\n            ( if_exists_in_arr(lists[itr].value.task_id, obj.task_id) )&&\n            (lists[itr].value.page_id  == obj.page_id)\n        ){\n            lists[itr].value.synchronized = 0;\n            lists[itr].value.status       = 0;\n            user_tasks.push(lists[itr].value);\n        }\n    }\n    return user_tasks;\n}\n\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 616.6666564941406,
        "y": 297.0000686645508,
        "wires": [
            [
                "d949c1d6.d069f"
            ]
        ]
    },
    {
        "id": "1f34a219.50d78e",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140.8333282470703,
        "y": 297.3333396911621,
        "wires": [
            [
                "36881c3c.832ef4"
            ]
        ]
    },
    {
        "id": "36881c3c.832ef4",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "payload",
        "func": "msg.detail_obj = {\n  page_id: 1501432755804,\n  task_id: [\"d1a0625639e39874c4b2a5a4f6339fab\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 283.83333587646484,
        "y": 299.3333396911621,
        "wires": [
            [
                "e6e290c4.e21d5"
            ]
        ]
    },
    {
        "id": "d949c1d6.d069f",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 784.8333435058594,
        "y": 292.00000762939453,
        "wires": []
    },
    {
        "id": "23ac694f.c923b6",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 88.66666412353516,
        "y": 3565,
        "wires": [
            [
                "100dbf0d.77f441"
            ]
        ]
    },
    {
        "id": "100dbf0d.77f441",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate",
        "func": "var access_token = msg.req_body.access_token ;\nvar table_data = msg.req_body.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_payload = { \n        query: \"table:task_table AND _id:\" + table_data.task_id \n    };\n    msg.user_payload = {\n        query: \"table:users AND access_token:\" + access_token \n    };\n    msg.page_payload = {\n        query: \"table:details AND page_id:\" + table_data.page_id  \n    };\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 274.6979331970215,
        "y": 3565.0468702316284,
        "wires": [
            [
                "f2c8b92f.45da98"
            ]
        ]
    },
    {
        "id": "f2c8b92f.45da98",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 459.6666679382324,
        "y": 3565.9999837875366,
        "wires": [
            [
                "b306b827.e61248"
            ],
            [
                "af356937.71e508"
            ]
        ]
    },
    {
        "id": "b306b827.e61248",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 657.6666679382324,
        "y": 3535.9999837875366,
        "wires": []
    },
    {
        "id": "af356937.71e508",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 664.6979179382324,
        "y": 3594.0468587875366,
        "wires": [
            [
                "23ea5f94.f85cf"
            ]
        ]
    },
    {
        "id": "23ea5f94.f85cf",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 905.6979179382324,
        "y": 3470.046847343445,
        "wires": [
            [
                "642674b5.fe573c",
                "f2c59a8.e06b168"
            ]
        ]
    },
    {
        "id": "642674b5.fe573c",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "task_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1072.698040008545,
        "y": 3470.046847343445,
        "wires": [
            [
                "8ed4467d.45b8b8"
            ]
        ]
    },
    {
        "id": "8ed4467d.45b8b8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "user_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1234.698040008545,
        "y": 3470.046847343445,
        "wires": [
            [
                "9a1a9b22.f680a8"
            ]
        ]
    },
    {
        "id": "9a1a9b22.f680a8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1402.6979179382324,
        "y": 3469.046847343445,
        "wires": [
            [
                "48c7fe7.7d2da"
            ]
        ]
    },
    {
        "id": "48c7fe7.7d2da",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "user_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1576.6979179382324,
        "y": 3468.046847343445,
        "wires": [
            [
                "45720665.3fe948"
            ]
        ]
    },
    {
        "id": "45720665.3fe948",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort: \"_id<string>\"\n};\n\nmsg.detail_payload = {\n    query: \"table:details\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1734.6979179382324,
        "y": 3467.046847343445,
        "wires": [
            [
                "bfa28cfe.6baa8"
            ]
        ]
    },
    {
        "id": "bfa28cfe.6baa8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1899.6979179382324,
        "y": 3467.046847343445,
        "wires": [
            [
                "af242596.a64958"
            ]
        ]
    },
    {
        "id": "af242596.a64958",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "user arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2057.6979179382324,
        "y": 3473.046847343445,
        "wires": [
            [
                "abd9e838.35f168"
            ]
        ]
    },
    {
        "id": "6b68b6ca.dfda28",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "detail_arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "details_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1676.4999198913574,
        "y": 3531.66663646698,
        "wires": [
            [
                "c63bd4be.0941f8"
            ]
        ]
    },
    {
        "id": "b66f79e3.8b3ca8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1479.0001640319824,
        "y": 3531.66663646698,
        "wires": [
            [
                "6b68b6ca.dfda28"
            ]
        ]
    },
    {
        "id": "abd9e838.35f168",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "detail_payload",
        "rules": [
            {
                "t": "move",
                "p": "detail_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1282.1669120788574,
        "y": 3527.9999799728394,
        "wires": [
            [
                "b66f79e3.8b3ca8"
            ]
        ]
    },
    {
        "id": "f2c59a8.e06b168",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "task_payload ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1071.8333854675293,
        "y": 3520.3333082199097,
        "wires": []
    },
    {
        "id": "c63bd4be.0941f8",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "template",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 923.2057304382324,
        "y": 3603.570284843445,
        "wires": [
            [
                "82f85b4f.df81a8"
            ]
        ]
    },
    {
        "id": "82f85b4f.df81a8",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "Templates",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1106.2058753967285,
        "y": 3607.570284843445,
        "wires": [
            [
                "e929cb98.229bd8"
            ]
        ]
    },
    {
        "id": "e929cb98.229bd8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "template arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "templates_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1296.9401054382324,
        "y": 3611.992159843445,
        "wires": [
            [
                "7aab2030.c9fb",
                "4c2b7e93.593c9"
            ]
        ]
    },
    {
        "id": "7aab2030.c9fb",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "validate",
        "func": "var task = msg.task_obj , user = msg.user_obj, detail = msg.details_obj;\n\nif(isEmpty(task)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n}else if(isEmpty(user)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.child_task_id   = msg.task_obj[0].child_default_task_id || null;\n    msg.timeout_id      = msg.task_obj[0].timeout_id || null;\n    msg.location_id     = msg.task_obj[0].location_id || null;\n}\nreturn msg;\n\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1472.6979179382324,
        "y": 3613.046847343445,
        "wires": [
            [
                "cd5d97fc.f7ae98"
            ]
        ]
    },
    {
        "id": "4c2b7e93.593c9",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "Comes her to log every thing",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 1530.5000114440918,
        "y": 3659.3333234786987,
        "wires": []
    },
    {
        "id": "cd5d97fc.f7ae98",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1635.6979179382324,
        "y": 3604.046847343445,
        "wires": [
            [
                "11c73311.88661d"
            ],
            [
                "83b1af83.76729"
            ]
        ]
    },
    {
        "id": "11c73311.88661d",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1811.6979179382324,
        "y": 3608.046847343445,
        "wires": []
    },
    {
        "id": "83b1af83.76729",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "child_task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1805.6979179382324,
        "y": 3662.046847343445,
        "wires": [
            [
                "46ee9472.b0677c"
            ],
            [
                "3baecefc.678c52"
            ]
        ]
    },
    {
        "id": "46ee9472.b0677c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "log",
        "func": "node.warn(\"there isn't any child default_task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1954.6979179382324,
        "y": 3638.046847343445,
        "wires": [
            [
                "ae7ead6b.70418"
            ]
        ]
    },
    {
        "id": "3baecefc.678c52",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "child task",
        "func": "msg.payload = {\n    query : \"table:task_table AND _id:\" + msg.child_task_id \n};\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1962.6979179382324,
        "y": 3695.046847343445,
        "wires": [
            [
                "5d22a024.64a17"
            ]
        ]
    },
    {
        "id": "5d22a024.64a17",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2149.6979179382324,
        "y": 3694.046847343445,
        "wires": [
            [
                "5782ae01.ebf65"
            ]
        ]
    },
    {
        "id": "5782ae01.ebf65",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "child_task",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "child_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2351.6979179382324,
        "y": 3693.046847343445,
        "wires": [
            [
                "ae7ead6b.70418"
            ]
        ]
    },
    {
        "id": "ae7ead6b.70418",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "timeout",
        "property": "timeout_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1126.6979866027832,
        "y": 3770.0468367934227,
        "wires": [
            [
                "6d42560.2854aac"
            ],
            [
                "10e9a0ef.f8e71f"
            ]
        ]
    },
    {
        "id": "6d42560.2854aac",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "log",
        "func": "node.warn(\"There isn't any timeout for this task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270.6979866027832,
        "y": 3763.0468367934227,
        "wires": [
            [
                "3bf0e9a9.863d26"
            ]
        ]
    },
    {
        "id": "10e9a0ef.f8e71f",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "timeout",
        "func": "msg.payload = {\n    query: \"table:timeout AND _id:\" + msg.timeout_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280.6979866027832,
        "y": 3821.0468367934227,
        "wires": [
            [
                "4866d383.1fd24c"
            ]
        ]
    },
    {
        "id": "4866d383.1fd24c",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1464.6979866027832,
        "y": 3820.0468367934227,
        "wires": [
            [
                "c852d2da.4fc16"
            ]
        ]
    },
    {
        "id": "c852d2da.4fc16",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "timeout",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1637.6979866027832,
        "y": 3819.0468367934227,
        "wires": [
            [
                "3bf0e9a9.863d26"
            ]
        ]
    },
    {
        "id": "3bf0e9a9.863d26",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "location",
        "property": "location_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1729.6979866027832,
        "y": 3772.0468367934227,
        "wires": [
            [
                "b0410277.8f7db"
            ],
            [
                "4d232384.e9f53c"
            ]
        ]
    },
    {
        "id": "b0410277.8f7db",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "log",
        "func": "node.warn(\"There isn't any Location for task obj\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1866.6979866027832,
        "y": 3766.0468367934227,
        "wires": [
            [
                "83ed6cba.5dfe3"
            ]
        ]
    },
    {
        "id": "4d232384.e9f53c",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "location",
        "func": "msg.payload = {\n    query: \"table:location AND _id:\" + msg.location_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1873.6979866027832,
        "y": 3825.0468367934227,
        "wires": [
            [
                "5fa9d37f.d7d17c"
            ]
        ]
    },
    {
        "id": "5fa9d37f.d7d17c",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2058.697986602783,
        "y": 3823.0468367934227,
        "wires": [
            [
                "56c2810.e820b8"
            ]
        ]
    },
    {
        "id": "56c2810.e820b8",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "location",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2280.697986602783,
        "y": 3825.0468367934227,
        "wires": [
            [
                "83ed6cba.5dfe3"
            ]
        ]
    },
    {
        "id": "83ed6cba.5dfe3",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = msg.child_task ? msg.child_task[0] : null,\n    timeout             = msg.timeout ? msg.timeout[0] : null ,\n    location            = msg.location ? msg.location[0] : null,\n    user                = msg.user_obj ? msg.user_obj[0] : null ,\n    task                = msg.task_obj ? msg.task_obj[0] : null,\n    user_arr            = msg.user_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n     \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id ? [task._id] : null ;\ndetail.intent_task_id                   = task._id ;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = task.child_default_task_id ? return_page_id(form_data.page_id) : 0;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\"private\": \"private\"};\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\ndetail.watson_incoming                  = {\n                                            message :   \"Watson response to : \" + form_data.note,\n                                            response : {},\n                                            \n                                        } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\">>>>>>>>>>>>>>>>>>>>>>> set_from_user\");\n        // node.warn(item);\n        return item[0] ;\n    }else{\n        // node.warn(\"set_from_user else case\");\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        // node.warn(\"check_need_to_create_second_detail >>>>\");\n        // node.warn(item);\n        return true ;\n    }else{\n        // node.warn(\"else case >>>>\");\n        return false ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1225.6979866027832,
        "y": 3867.0468367934227,
        "wires": [
            [
                "95bb907c.38c5f",
                "818fd0af.ea571",
                "d48cb32f.4060a",
                "de3d89b5.d1e808",
                "3b02ad43.ed6122"
            ]
        ]
    },
    {
        "id": "de3d89b5.d1e808",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1514.0573616027832,
        "y": 3875.9413680434227,
        "wires": [
            [
                "3560d6e1.7e611a"
            ],
            [
                "6e7464c7.baf9ec"
            ]
        ]
    },
    {
        "id": "818fd0af.ea571",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1405.6667366027832,
        "y": 3900.9999617934227,
        "wires": []
    },
    {
        "id": "3560d6e1.7e611a",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1709.0417366027832,
        "y": 3867.4257430434227,
        "wires": [
            [
                "bd2ce8f9.7ae578"
            ]
        ]
    },
    {
        "id": "6e7464c7.baf9ec",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1652.0456132180993,
        "y": 3905.757770344615,
        "wires": [
            []
        ]
    },
    {
        "id": "bd2ce8f9.7ae578",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1912.0534553527832,
        "y": 3866.7929305434227,
        "wires": []
    },
    {
        "id": "98653f8c.752b3",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method      = \"POST\";\nmsg.payload     = {\n  docs: msg.payload   \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1918.1667785644531,
        "y": 3910.0000829696655,
        "wires": [
            [
                "3463cdad.213d72"
            ]
        ]
    },
    {
        "id": "3463cdad.213d72",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Bulk Update",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2086.5001182556152,
        "y": 3909.333415031433,
        "wires": [
            []
        ]
    },
    {
        "id": "3b02ad43.ed6122",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task\";\nmsg.method          = \"GET\";\nmsg.detail_obj      = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1413.5000114440918,
        "y": 3952.9999799728394,
        "wires": [
            [
                "d0345374.51a3b"
            ]
        ]
    },
    {
        "id": "d0345374.51a3b",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1574.5000114440918,
        "y": 3956.66663646698,
        "wires": [
            [
                "4003c55b.31dfec"
            ]
        ]
    },
    {
        "id": "4003c55b.31dfec",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "populate",
        "func": "var detail_obj = msg.detail_obj,\n    payload    = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else{\n    msg.api_status  = \"API_ERROR\";\n    var user_tasks  = populate_user_task(payload.rows, detail_obj);\n    msg.payload     = {detail_obj: detail_obj, subscribed_users: user_tasks};\n}    \nreturn msg;\n\nfunction populate_user_task(lists, obj){\n    var user_tasks = [];\n    \n    for(var itr in lists){\n        if(\n            ( if_exists_in_arr(lists[itr].value.task_id, obj.task_id) )&&\n            (lists[itr].value.page_id  == obj.page_id)\n        ){\n            lists[itr].value.synchronized = 0;\n            lists[itr].value.status       = 0;\n            user_tasks.push(lists[itr].value);\n        }\n    }\n    return user_tasks;\n}\n\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1734.5000228881836,
        "y": 3957.0000438690186,
        "wires": [
            [
                "985b6893.5048a8",
                "98653f8c.752b3"
            ]
        ]
    },
    {
        "id": "d48cb32f.4060a",
        "type": "change",
        "z": "a35e95d3.4f79f8",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1406.6666679382324,
        "y": 3999.999981880188,
        "wires": [
            [
                "c62d6f33.5c743"
            ]
        ]
    },
    {
        "id": "95bb907c.38c5f",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1386.6979179382324,
        "y": 4043.046856880188,
        "wires": [
            [
                "40cfebd2.ec40e4"
            ],
            [
                "c4f1fe6f.b6007"
            ]
        ]
    },
    {
        "id": "c62d6f33.5c743",
        "type": "http response",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "x": 1562.6666679382324,
        "y": 4020.999981880188,
        "wires": []
    },
    {
        "id": "40cfebd2.ec40e4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1562.6979179382324,
        "y": 4064.046856880188,
        "wires": [
            [
                "9e3a50b0.52326"
            ]
        ]
    },
    {
        "id": "c4f1fe6f.b6007",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    user_obj            = msg.user_obj ? msg.user_obj[0]: {} ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : user_obj._id || detail.user_id,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || \"private\",\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1583.6979179382324,
        "y": 4106.046856880188,
        "wires": [
            [
                "9e3a50b0.52326"
            ]
        ]
    },
    {
        "id": "9e3a50b0.52326",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1745.6979179382324,
        "y": 4077.046856880188,
        "wires": [
            [
                "afffb499.908818",
                "68db1cd8.2fd594"
            ],
            [
                "bd6077a4.5e24c8",
                "afffb499.908818"
            ]
        ]
    },
    {
        "id": "68db1cd8.2fd594",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "Optional Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1916.6666679382324,
        "y": 4043.999981880188,
        "wires": []
    },
    {
        "id": "bd6077a4.5e24c8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "Optional task log",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1938.6979179382324,
        "y": 4104.046856880188,
        "wires": []
    },
    {
        "id": "985b6893.5048a8",
        "type": "http request",
        "z": "a35e95d3.4f79f8",
        "name": "Notify socket server",
        "method": "POST",
        "ret": "obj",
        "url": "https://socket-server.mybluemix.net/accept_request",
        "tls": "",
        "x": 1951.1674308776855,
        "y": 3969.3333778381348,
        "wires": [
            []
        ]
    },
    {
        "id": "afffb499.908818",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2142.6979637145996,
        "y": 4066.0468606948853,
        "wires": [
            [
                "c0920229.493b6"
            ]
        ]
    },
    {
        "id": "c0920229.493b6",
        "type": "switch",
        "z": "a35e95d3.4f79f8",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2222.697986602783,
        "y": 4198.046859741211,
        "wires": [
            [
                "f6d884aa.5e0b58"
            ],
            [
                "a65ea6f3.7de468"
            ]
        ]
    },
    {
        "id": "eab5bf34.cc3de",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2378.697986602783,
        "y": 4138.046859741211,
        "wires": [
            [
                "c0920229.493b6"
            ]
        ]
    },
    {
        "id": "f6d884aa.5e0b58",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n  msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2442.697986602783,
        "y": 4192.046859741211,
        "wires": [
            [
                "eab5bf34.cc3de",
                "9a1bb7ec.0b32d8"
            ]
        ]
    },
    {
        "id": "a65ea6f3.7de468",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2416.697986602783,
        "y": 4244.046859741211,
        "wires": [
            [
                "c432c875.5316c8",
                "27bb4cd.9ef43b4"
            ]
        ]
    },
    {
        "id": "27bb4cd.9ef43b4",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2469.6981620788574,
        "y": 4326.046888411045,
        "wires": [
            [
                "31ecda5b.006fd6"
            ]
        ]
    },
    {
        "id": "31ecda5b.006fd6",
        "type": "cloudant in",
        "z": "a35e95d3.4f79f8",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2649.6994590759277,
        "y": 4317.0469653606415,
        "wires": [
            [
                "3f0fddee.509ed2"
            ]
        ]
    },
    {
        "id": "3f0fddee.509ed2",
        "type": "function",
        "z": "a35e95d3.4f79f8",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 1,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2854.699275970459,
        "y": 4312.046935737133,
        "wires": [
            [
                "76ba5424.cc286c",
                "1fe86c96.57ec83"
            ]
        ]
    },
    {
        "id": "c432c875.5316c8",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2653.697986602783,
        "y": 4224.046859741211,
        "wires": []
    },
    {
        "id": "9a1bb7ec.0b32d8",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2663.666736602783,
        "y": 4173.999984741211,
        "wires": []
    },
    {
        "id": "1fe86c96.57ec83",
        "type": "debug",
        "z": "a35e95d3.4f79f8",
        "name": "create user_task after creating detail",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3161.501766204834,
        "y": 4286.666763007641,
        "wires": []
    },
    {
        "id": "76ba5424.cc286c",
        "type": "cloudant out",
        "z": "a35e95d3.4f79f8",
        "name": "User Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3068.668025970459,
        "y": 4243.000060737133,
        "wires": []
    },
    {
        "id": "2e3718cc.e4ef68",
        "type": "comment",
        "z": "a35e95d3.4f79f8",
        "name": "add_detail endpoint(working backup)",
        "info": "",
        "x": 162.8333282470703,
        "y": 3426.666603088379,
        "wires": []
    },
    {
        "id": "c8e697b5.8cbfb8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_data\";\nmsg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1985.4999694824219,
        "y": 149.66666412353516,
        "wires": [
            [
                "963697ec.033ba8"
            ]
        ]
    },
    {
        "id": "963697ec.033ba8",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2146.500045776367,
        "y": 142.00001907348633,
        "wires": [
            [
                "2e78e0d1.6e91c"
            ]
        ]
    },
    {
        "id": "60ebc840.c4c168",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "After update_create_user_task",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 4752.501075744629,
        "y": 324.33335399627686,
        "wires": []
    },
    {
        "id": "79a95d3b.fee184",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "create_optional_task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3478.1668701171875,
        "y": 232.33333730697632,
        "wires": []
    },
    {
        "id": "aa6e064d.f28708",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "addDetail payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3013.50008392334,
        "y": 23.33333683013916,
        "wires": []
    },
    {
        "id": "3216a994.9589e6",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Under Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4368.166923522949,
        "y": 248.00004482269287,
        "wires": []
    },
    {
        "id": "277523b2.49c11c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 4144.499923706055,
        "y": 193.33333778381348,
        "wires": [
            [
                "7936c18d.ddbd1"
            ],
            [
                "3216a994.9589e6"
            ]
        ]
    },
    {
        "id": "e33747b1.110478",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            if(currentDateWithDeliveryDue(details[itr].due_date, details[itr].timeout.delivery_due)){\n                var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n                \n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 1;\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 1;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(group_id in users[counter].data.groups){\n                obj[users[counter]._id] = {    \n                    user_id   : users[counter]._id,\n                    firstname : users[counter].firstname ,\n                    lastname  : users[counter].lastname ,\n                    device_id : users[counter].device_id ,\n                    phone     : users[counter].virtual_phone\n                };\n            }\n        }\n    }\n    return obj;\n}\n\nfunction currentDateWithDeliveryDue(due_date, dueInSeconds){\n    //return true;\n    return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 361.6666564941406,
        "y": 503.6666564941406,
        "wires": [
            [
                "40b744de.04fb0c",
                "81d6a028.c843e"
            ]
        ]
    },
    {
        "id": "b14cd0dc.8cce6",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 142.33266067504883,
        "y": 505.3333225250244,
        "wires": [
            [
                "e33747b1.110478"
            ]
        ]
    },
    {
        "id": "40b744de.04fb0c",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 563.3325233459473,
        "y": 542.6666555404663,
        "wires": []
    },
    {
        "id": "81d6a028.c843e",
        "type": "switch",
        "z": "33a82338.96373c",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 564.6658363342285,
        "y": 483.9999713897705,
        "wires": [
            [
                "7b125b82.7c8474"
            ]
        ]
    },
    {
        "id": "7b125b82.7c8474",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 727.9991989135742,
        "y": 483.9999885559082,
        "wires": [
            [
                "32c4758e.2cddca"
            ]
        ]
    },
    {
        "id": "32c4758e.2cddca",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 899.999210357666,
        "y": 483.9999876022339,
        "wires": []
    },
    {
        "id": "34233fa8.05ec4",
        "type": "delay",
        "z": "33a82338.96373c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 125.8333511352539,
        "y": 419.00001525878906,
        "wires": [
            []
        ]
    },
    {
        "id": "f4e8fa30.5eec08",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2579.833320617676,
        "y": 758.0000286102295,
        "wires": []
    },
    {
        "id": "2cc174c1.6bacdc",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2255.8333053588867,
        "y": 801.3333606719971,
        "wires": [
            [
                "25a27177.fc7e2e"
            ],
            [
                "4d97fe22.c6f8b"
            ]
        ]
    },
    {
        "id": "25a27177.fc7e2e",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "msg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2425.66650390625,
        "y": 763.3333129882812,
        "wires": [
            [
                "f4e8fa30.5eec08"
            ]
        ]
    },
    {
        "id": "4d97fe22.c6f8b",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2426.8334770202637,
        "y": 849.3333833217621,
        "wires": []
    },
    {
        "id": "de288c55.3c631",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 169.83332443237305,
        "y": 676.6666660308838,
        "wires": [
            [
                "b47301b.6003f"
            ]
        ]
    },
    {
        "id": "b47301b.6003f",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "push",
        "func": "msg.payload = \"This notification is testing purpose. Please ignore this.\";\nmsg.identifiers= \"690B0986-AE26-4183-B6A2-17DE9CB05474,89a5847f-3d15-301c-924f-c0b0cf0ac493\"; //device_id\n    \nnode.warn(msg);\nreturn msg;\n\n\n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 339.8333435058594,
        "y": 672.3333511352539,
        "wires": [
            [
                "b43e391d.d7ba08"
            ]
        ]
    },
    {
        "id": "6ba779a9.034fd8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistant_into_group",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1336.1667442321777,
        "y": 1736.000099182129,
        "wires": [
            [
                "886709f4.a03f88"
            ]
        ]
    },
    {
        "id": "886709f4.a03f88",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_groups_users",
        "tls": "",
        "x": 1541.2421340942383,
        "y": 1810.9765930175781,
        "wires": [
            [
                "16f97a7.65a3686"
            ]
        ]
    },
    {
        "id": "16f97a7.65a3686",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload ,\n    req_user_id     = msg.req_body.table_data.user_id,\n    req_group_id    = msg.req_body.table_data.group_id,\n    access_token    = msg.access_token;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant views\", result: null};\n    return msg;\n}else{\n    if(isEmpty(req_user_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`user_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`group_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(access_token)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`access_token` is mising.\", result: null};\n        return msg;\n    }\n    \n    var db_records      = populate_record(payload.rows),\n        req_user_obj    = populate_requested_user(db_records.users, req_user_id),\n        req_group_obj   = populate_requested_group(db_records.groups, req_group_id);\n        \n    if(isEmpty(req_user_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find user with requested `user_id`.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find group with requested `group_id`.\", result: null};\n        return msg;\n    }\n    \n    if( check_user_already_exists(req_user_obj, req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"User already added into this group.\", result: null};\n        return msg;\n    }else{\n        msg.statusCode = 200;\n        msg.api_status = \"API_SUCCESS\";\n        if(isEmpty(req_user_obj.data)) {\n            var obj = {};\n            obj[req_group_id] = true ;\n            req_user_obj.data = {\n                groups : obj\n            };\n        }else{\n            req_user_obj.data.groups[req_group_id] = true ;    \n        }\n        \n        msg.payload   = req_user_obj;\n        \n        node.warn(msg);\n        return msg;\n    }\n}\n    \n\n\nfunction check_user_already_exists(user, group){\n    var group_id    = group.group_id , user_group = {};\n    if(isEmpty(user.data)){\n        user_group  = {\n            data : {\n                groups : {\n                    \n                }\n            }\n        };\n    }else{\n        user_group  = user.data.groups;\n    }\n        \n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction populate_requested_group(list, group_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(group_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == group_id){\n            obj = {\n                group_id    : list[itr]._id,\n                group_name  : list[itr].group_name\n            };\n        }\n    }\n    return obj;\n}\n\nfunction populate_requested_user(list, user_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(user_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == user_id){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var groups = [], users = [];\n    \n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {users: users, groups: groups};\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1736.2578125,
        "y": 1868.6328125,
        "wires": [
            [
                "9352089d.bbab88"
            ]
        ]
    },
    {
        "id": "9352089d.bbab88",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1915.4999694824219,
        "y": 1866.3332901000977,
        "wires": [
            [
                "94a56e0d.26fb2"
            ],
            [
                "37915376.17a00c",
                "3f8da897.79be98",
                "532e4d79.fc2404"
            ]
        ]
    },
    {
        "id": "3f8da897.79be98",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2090.500045776367,
        "y": 1892.0001096725464,
        "wires": []
    },
    {
        "id": "37915376.17a00c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "msg.payload = {\n    status: 200,\n    msg   : \"User added into group successfully\",\n    data  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2076.499969482422,
        "y": 1934.9999771118164,
        "wires": [
            [
                "4545e48a.b62b3c"
            ]
        ]
    },
    {
        "id": "4545e48a.b62b3c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2225.5000495910645,
        "y": 1934.0000343322754,
        "wires": []
    },
    {
        "id": "94a56e0d.26fb2",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2064.499969482422,
        "y": 1845.0000381469727,
        "wires": []
    },
    {
        "id": "532e4d79.fc2404",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2093.833293914795,
        "y": 1998.6667861938477,
        "wires": []
    },
    {
        "id": "ebc89690.eef968",
        "type": "http in",
        "z": "d4fc71c6.eee2",
        "name": "",
        "url": "/new_update_get_pages",
        "method": "get",
        "swaggerDoc": "",
        "x": 144.83334350585938,
        "y": 1254.3333673477173,
        "wires": [
            [
                "159b281c.21f0f8"
            ]
        ]
    },
    {
        "id": "159b281c.21f0f8",
        "type": "function",
        "z": "d4fc71c6.eee2",
        "name": "populate",
        "func": "var payload = msg.payload;\nif(isEmpty(payload)){\n    msg.apiStatus = 400;\n    msg.payload   = {status:200, msg: \"Empty payload is not going to treat.\", data:null};\n}else{\n    var app_data  = parsePayload(payload.app);\n    if(app_data.error){\n        msg.apiStatus = 400;\n        msg.payload   = {status:200, msg: \"Unable to parse un-formatted json obj.\", data: null};\n    }else{\n        msg.payload   = app_data.obj;\n    }\n}\nreturn msg;\n\nfunction parsePayload(data){\n    if(isEmpty(data)) return {};\n    \n    try{\n        return {\n            error: false,\n            obj  : JSON.parse(data)\n        };\n    }catch(e){\n        return {\n            error: true,\n            obj  : JSON.stringify(e)\n        };\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 362.8333435058594,
        "y": 1252.000033378601,
        "wires": [
            [
                "977f8764.657758"
            ]
        ]
    },
    {
        "id": "977f8764.657758",
        "type": "http response",
        "z": "d4fc71c6.eee2",
        "name": "",
        "x": 524.8333435058594,
        "y": 1253.0000076293945,
        "wires": []
    },
    {
        "id": "a8a5a4a.1688658",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "User Update Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2268.1668014526367,
        "y": 559.3334074020386,
        "wires": []
    },
    {
        "id": "b43e391d.d7ba08",
        "type": "ibmpush",
        "z": "33a82338.96373c",
        "name": "",
        "ApplicationID": "roger_colburn",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 506.8333435058594,
        "y": 670.3333740234375,
        "wires": []
    },
    {
        "id": "dbddd0fb.6a813",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:919815098150\",\n    sort : \"_id<string>\"\n};\n\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310.8333435058594,
        "y": 849.0000114440918,
        "wires": [
            [
                "87cb232.db5a0e"
            ]
        ]
    },
    {
        "id": "66428e5c.a4e4f",
        "type": "inject",
        "z": "33a82338.96373c",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 149.83332061767578,
        "y": 850.0000095367432,
        "wires": [
            [
                "dbddd0fb.6a813"
            ]
        ]
    },
    {
        "id": "87cb232.db5a0e",
        "type": "cloudant in",
        "z": "33a82338.96373c",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 471.8333435058594,
        "y": 847.3333511352539,
        "wires": [
            [
                "91a2a484.f1aec8"
            ]
        ]
    },
    {
        "id": "91a2a484.f1aec8",
        "type": "function",
        "z": "33a82338.96373c",
        "name": "push_notification",
        "func": "var payload     = msg.payload ,\n    user_obj    = calculate_user(payload); \n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = \"No need to send push notification\";\n}else{\n    if(user_obj.device_id == \"Web View\" && user_obj.push_accepted === 0){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = \"No need to send push notification\";\n    }else{\n        var obj = {\n            \"message\": \"New Message arrived\",\n            \"page_refresh\" : true,\n            \n        };\n        // msg.payload = \"New Message arived\";\n        // msg.additional_payload = obj;\n        // msg.identifiers= user_obj.device_id; //device_id\n        // node.warn(msg);\n        msg.headers = {\n            \"appSecret\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\"\n        };\n        msg.payload = {\n            \"message\": {\n                \"alert\": \"A new message arrived\"\n            }, \n            \"target\": {\n                \"deviceIds\": [\"690B0986-AE26-4183-B6A2-17DE9CB05474\",\"89a5847f-3d15-301c-924f-c0b0cf0ac493\"]\n            },\n            \"settings\": {\n                \"apns\": {\n                    \"payload\": obj\n                },\n                \"gcm\": {\n                    \"payload\": obj\n                }\n            }\n        };\n        msg.url = \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\";\n        msg.method = \"POST\";\n    }\n}\nreturn msg;\n\nfunction calculate_user(list){\n    var obj = {};\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].virtual_phone){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 665.8333435058594,
        "y": 847.0000076293945,
        "wires": [
            [
                "53c4dece.abbab"
            ]
        ]
    },
    {
        "id": "59b48d8.f138674",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 297.00010681152344,
        "y": 847.0000200271606,
        "wires": []
    },
    {
        "id": "a9583dc.b1c32c",
        "type": "http in",
        "z": "ecb75f1d.1bfe8",
        "name": "Recieve Twilio Errors",
        "url": "/twilio_error",
        "method": "post",
        "swaggerDoc": "",
        "x": 129.5,
        "y": 40,
        "wires": [
            [
                "65f5d141.0ac91",
                "82515315.0d71f"
            ]
        ]
    },
    {
        "id": "65f5d141.0ac91",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326.5,
        "y": 40.99999237060547,
        "wires": []
    },
    {
        "id": "4b58681e.b5c038",
        "type": "cloudant in",
        "z": "ecb75f1d.1bfe8",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 452.83343505859375,
        "y": 895.3333597183228,
        "wires": [
            [
                "61ed6fa0.cd0c6"
            ]
        ]
    },
    {
        "id": "8f338556.2b8a18",
        "type": "inject",
        "z": "ecb75f1d.1bfe8",
        "name": "Inject",
        "topic": "start",
        "payload": "{\"From\": \"12068835352\", \"Body\": \"Kyle Number screen\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 86.83340835571289,
        "y": 913.0000514984131,
        "wires": [
            [
                "43dcf003.394d2"
            ]
        ]
    },
    {
        "id": "43dcf003.394d2",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "msg ",
        "func": "var content = msg.payload ,\n    obj   = check_valid_phone(content);\n    \nvar payload = {\n    \"phone\": obj.phone,\n    \"body\" : obj.body\n};\n\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\nmsg.req_body = obj ;\nreturn msg;\n\n\nfunction check_valid_phone(obj){\n    return {\n        phone: Number(obj.From.replace('+', '').trim()) ,\n        body : obj.Body \n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 296.8334503173828,
        "y": 894.3334016799927,
        "wires": [
            [
                "4b58681e.b5c038"
            ]
        ]
    },
    {
        "id": "61ed6fa0.cd0c6",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\n//user = {};\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload = {\n        _id         : randomString(32),\n        table       : \"users\",\n        access_token:  token(),\n        firstname   :  parseInt(phone),\n        lastname    :   \"\",\n        phone       :  parseInt(phone),\n        virtual_phone: parseInt(phone),\n        security_level: 0,\n        code:         rand(),\n        type: {\n            \"public\": \"public\"\n        },\n        device_id: \"\",\n        push_accepted: 0\n    };\n     msg.userObj = msg.payload ;\n}else{\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\n    msg.method  = \"GET\";\n    msg.userObj = user ;\n}\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 640.8334503173828,
        "y": 897.3334016799927,
        "wires": [
            [
                "540879ae.339f38"
            ]
        ]
    },
    {
        "id": "540879ae.339f38",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 800.5001169840496,
        "y": 896.0000429153442,
        "wires": [
            [
                "fb6646a2.2a9d68",
                "331d03f.297aafc"
            ],
            [
                "cbfe671d.53c738"
            ]
        ]
    },
    {
        "id": "9386fc4e.01785",
        "type": "http in",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "url": "/user_chatbot_response",
        "method": "post",
        "swaggerDoc": "",
        "x": 126.83332824707031,
        "y": 1220.0000324249268,
        "wires": [
            [
                "e9f4a05f.bc35b"
            ]
        ]
    },
    {
        "id": "69aaaa5d.4d5fc4",
        "type": "comment",
        "z": "ecb75f1d.1bfe8",
        "name": "Respond back to user via Roger user.",
        "info": "",
        "x": 181.83334350585938,
        "y": 1177.000055948893,
        "wires": []
    },
    {
        "id": "52ac18fc.88bef8",
        "type": "http in",
        "z": "ecb75f1d.1bfe8",
        "name": "Get SMS",
        "url": "/twilio_sms",
        "method": "post",
        "swaggerDoc": "",
        "x": 84.66672134399414,
        "y": 849.6666469573975,
        "wires": [
            [
                "43dcf003.394d2",
                "59b48d8.f138674"
            ]
        ]
    },
    {
        "id": "7070e3f.a644c1c",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload , //should be IBM Watson node response\n    req_body    = msg.req_body;\n    \n    //payload.daata = \"\";\n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic   = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1388.6668701171875,
        "y": 1035.3334712982178,
        "wires": [
            [
                "c6c6ebb8.ac91d8",
                "bb11c40d.19fd58",
                "64267a14.587074",
                "47481d7d.1fece4"
            ]
        ]
    },
    {
        "id": "c6c6ebb8.ac91d8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_arr    = msg.task_arr,\n    new_details = [], task_ids    = [],\n    userObj     = msg.userObj;\n    \nvar company_task_id = populate_compnay_task_id(task_arr);\n\nfor(var itr in task_arr){\n    task_ids.push(task_arr[itr]._id);\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_arr[itr].page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_arr[itr].from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_arr[itr].type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": task_arr[itr].myTimeout,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n        \n    };    \n    new_details.push(obj);\n}\n\nvar watson_res  = populate_watson_response(chatbot, userObj), //show watson response under sms user\n    user_data   = populate_user_data(req_body, userObj); //to show detail under sms user\nnew_details.push(watson_res);\nnew_details.push(user_data);\nmsg.payload = {\n    docs: new_details\n};\nnode.warn(msg);\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_ids]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 20000\n    };    \n    return obj;\n}\n\nfunction populate_user_data(req_body, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"], //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 5,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_arr[itr].type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n        \n    };   \n    return obj;\n}\n\nfunction populate_compnay_task_id(task_arr){\n    if(isEmpty(task_arr)) return null;\n    \n    for(var itr in task_arr){\n        if( (\"company_bot_detail\" in task_arr[itr].type) ){\n            return task_arr[itr]._id;\n        }\n    }\n    return null;\n} \n\nfunction set_task_id(task_obj, company_task_id){\n    if(isEmpty(company_task_id)) {\n        return [task_obj._id];\n    }else{\n        if((\"company_bot_detail\" in task_arr[itr].type) ){\n            return [task_obj._id];\n        }else{\n            return [task_obj._id, company_task_id];\n        }\n    }\n}\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1638.3335342407227,
        "y": 991.3334121704102,
        "wires": [
            [
                "3ccbe545.5f3eda",
                "65434e3e.6ebee"
            ]
        ]
    },
    {
        "id": "bb11c40d.19fd58",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1636.667091369629,
        "y": 918.0000133514404,
        "wires": []
    },
    {
        "id": "85201e4.cb8f9e",
        "type": "comment",
        "z": "ecb75f1d.1bfe8",
        "name": "Respond via users from their chatbot screens",
        "info": "",
        "x": 182,
        "y": 1700.04709815979,
        "wires": []
    },
    {
        "id": "e7c664bf.4e6f88",
        "type": "http in",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "url": "/ask_chatbot",
        "method": "post",
        "swaggerDoc": "",
        "x": 102.0078125,
        "y": 1745.2267475128174,
        "wires": [
            [
                "d57b9a5.868be68",
                "8fefb819.1f79b8"
            ]
        ]
    },
    {
        "id": "82515315.0d71f",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 328.8333435058594,
        "y": 89.33333587646484,
        "wires": []
    },
    {
        "id": "fd71be83.8f439",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 1892.6668014526367,
        "y": 1061.666708946228,
        "wires": []
    },
    {
        "id": "64267a14.587074",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n\nvar data = msg.chatbot_response;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = data.data  ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1670.6666793823242,
        "y": 1062.666724205017,
        "wires": [
            [
                "fd71be83.8f439"
            ]
        ]
    },
    {
        "id": "d392951b.dd2908",
        "type": "cloudant in",
        "z": "ecb75f1d.1bfe8",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 477.757869720459,
        "y": 1875.000597000122,
        "wires": [
            [
                "69c8bff2.1be7b"
            ]
        ]
    },
    {
        "id": "69c8bff2.1be7b",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload    = {status: 400, msg: \"User doesn't exists\", data: null};\n}else{\n    msg.userObj = user ;\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\n    msg.method  = \"GET\";\n}\n\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 661.7578125,
        "y": 1909.0004291534424,
        "wires": [
            [
                "27f18674.5f8f9a"
            ]
        ]
    },
    {
        "id": "27f18674.5f8f9a",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 829.4244791666667,
        "y": 1909.6666946411133,
        "wires": [
            [
                "c1a5bb6a.7707e8"
            ],
            [
                "83c6ed0c.b5ab3"
            ]
        ]
    },
    {
        "id": "d57b9a5.868be68",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 318.5911636352539,
        "y": 1746.6672554016113,
        "wires": []
    },
    {
        "id": "8fefb819.1f79b8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "msg",
        "func": "var payload = msg.payload;\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\n\nmsg.req_body = payload ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 306.5911750793457,
        "y": 1823.6670560836792,
        "wires": [
            [
                "d392951b.dd2908"
            ]
        ]
    },
    {
        "id": "545b23a2.8caeac",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\nmsg.task_arr    = populate_task(db_records.tasks, msg.req_body.phone);\n//msg.detail_obj  = populate_detail(db_records.details, msg.task_arr);\nmsg.userObj     = isEmpty(msg.userObj) ? {} : msg.userObj[0] ;\n\nmsg.method      = \"GET\";\nmsg.url         = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;\n\nfunction populate_task(list, task_name){\n    var arr = [];\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            arr.push(list[i]);\n        }\n    }\n    return arr;\n}\n\n\nfunction populate_record(list){\n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1109.3335227966309,
        "y": 959.6667232513428,
        "wires": [
            [
                "452e9139.d5271"
            ]
        ]
    },
    {
        "id": "cbfe671d.53c738",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 935.5003395080566,
        "y": 963.0001373291016,
        "wires": [
            [
                "545b23a2.8caeac"
            ]
        ]
    },
    {
        "id": "331d03f.297aafc",
        "type": "cloudant out",
        "z": "ecb75f1d.1bfe8",
        "name": "save users",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 967.0002937316895,
        "y": 815.3334007263184,
        "wires": []
    },
    {
        "id": "fb6646a2.2a9d68",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/timeout_processing_data",
        "tls": "",
        "x": 968.5000610351562,
        "y": 866.3333320617676,
        "wires": [
            [
                "d6c9bb16.8d9898"
            ]
        ]
    },
    {
        "id": "d6c9bb16.8d9898",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    phone   = msg.req_body.phone,\n    userObj = msg.userObj,\n    payload = msg.payload;\n\nif(isEmpty(payload.rows)){\n    node.warn(\"comes when Cloudant db doesn't return response\");\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to populate view to process_timeout\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        timeout_obj= populate_obj(db_records.timeout, \"d33d30da003eb304713c70a0f9a1e228\"), //static timeout_obj for ReminderBot company\n        details    = populate_details(db_records.groups, timeout_obj);\n}\n\nnode.warn(msg);\n\nmsg.save_msg_detail = save_detail_for_user(textMsg, userObj);\nmsg.details_arr     = details;\nmsg.timeout_obj     = timeout_obj;\n\nreturn msg;\n\nfunction populate_records(list){\n    var timeout = [], users = [], groups = [];\n    for(var itr in list){ \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {groups: groups, timeout: timeout, users: users};\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_details(list, timeout){\n    var details = [], timeout_list = timeout.timeout_list;\n    \n    if(isEmpty(list)) return [];\n    if(isEmpty(timeout_list)) return [];\n    \n    for(var itr in timeout_list){ //processing timeout_obj list\n        var detail_obj = {};\n            \n            detail_obj.table                = \"details\";\n            detail_obj.task_id              = [timeout_list[itr].delivery_task_id]; //ReminderBot categorty and Stumped Category screens\n            detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n            detail_obj.user_id              = userObj._id;\n            detail_obj.from_user_id         = {\n                user_id   : userObj._id,\n                phone     : userObj.virtual_phone,\n                firstname : userObj.firstname,\n                lastname  : userObj.lastname,\n                type      : userObj.type,\n            };\n            detail_obj.page_id                          = new Date().getTime(); //masterbot category page_id\n            detail_obj.from_page_id                     = 2;\n            detail_obj.to_page_id                       = new Date().getTime() + 500;\n            detail_obj.synchronized                     = 0;\n            detail_obj.processed                        = 1;\n            detail_obj.status                           = 1;\n            detail_obj.read                             = 1;\n            detail_obj.display_if_empty                 = \"true\";\n            detail_obj.date_created                     = new Date().toJSON();\n            detail_obj.offline_expiration_seconds       = 0;\n            detail_obj.priority                         = 1;\n            detail_obj.category                         = \"stumped\";\n            detail_obj.type                             = timeout_list[itr].delivery_user_types;\n            detail_obj.type.public                      = \"public\";\n            detail_obj.image                            = \"\";\n            detail_obj.from_user                        = {};\n            detail_obj.user_incoming                    = {\n                note        : phone,\n                message     : (userObj.firstname + userObj.lastname ) || phone\n            };\n            detail_obj.template                         = {};\n            detail_obj.timeout                          = {};\n            detail_obj.user_calculate                   = {};\n            detail_obj.location                         = {};\n            detail_obj.default                          = {};\n            detail_obj.count_status                     = {\n                active: 1,\n                unread: 0\n            };\n            detail_obj.count                            = {\n                active: 1,\n                unread: 1\n            };\n            detail_obj.count_if                         = {\n                active: 1,\n                unread: 0\n            };\n            detail_obj.createdAt                        = new Date().getTime();\n            detail_obj.myTimeout                        = timeout_list[itr];\n        \n        details.push(detail_obj);\n    }\n    \n    //original user detail for company\n    var original_to_page_id = new Date().getTime() + 600;\n    var original_detail     = create_original_detail(original_to_page_id, timeout_list);\n    details.push(original_detail);\n    \n    return details;\n}\n\nfunction create_original_detail(to_page_id, timeout_list){\n    var detail_obj = {};\n    \n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"26\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n    detail_obj.user_id              = \"0a9b50963bc76018418ffd857d551ced\";\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 26; //Company stumped category page_id\n    detail_obj.from_page_id                     = 2;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\",\n        \"company_bot_detail\": \"company_bot_detail\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : (userObj.firstname + userObj.lastname ) || phone\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n    detail_obj.myTimeout                        = timeout_list;\n    \n    return detail_obj;\n}\n\nfunction save_detail_for_user(msg, userObj){\n    var detail_obj = {};\n    \n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"18_0\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = null; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 18; //Company stumped category page_id\n    detail_obj.from_page_id                     = 5;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : msg\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n\n    return [detail_obj];\n}\n\nfunction populate_assistants(users, group_id){\n    var list = [];\n    \n    if(isEmpty(users)) return list;\n    if(isEmpty(group_id)) return list;\n    \n    for(var itr in users){\n        if(users[itr].data){\n            if(group_id in users[itr].data.groups){\n                list.push(users[itr]);\n            }\n        }\n    }\n    return list;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1153.666648864746,
        "y": 865.6666431427002,
        "wires": [
            [
                "26872d49.bf2422"
            ]
        ]
    },
    {
        "id": "26872d49.bf2422",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Optional Task",
        "func": "var details     = JSON.parse(JSON.stringify(msg.details_arr)),\n    timeout_id  = msg.timeout_obj._id ;\n    new_tasks   = [];\n\nfor(var itr in details){\n    var obj = {\n        \"_id\": randomString(32),\n        \"table\": \"task_table\",\n        \"user_id\": details[itr].user_id,\n        \"task_name\": details[itr].user_incoming.message, \n        \"page_id\": details[itr].to_page_id,\n        \"from_page_id\": details[itr].page_id,\n        \"parent_id\": details[itr].task_id,\n        \"header_template_id\": \"99_h\",\n        \"detail_template_id\": \"99_d\",\n        \"footer_template_id\": \"99_f\",\n        \"timeout_id\": timeout_id,\n        \"location_ids\": {},\n        \"child_default_task_id\": null,\n        \"child_default_task_name\": null,\n        \"date_created\": new Date().toJSON(),\n        \"category\": \"stumped\",\n        \"status\": \"true\",\n        \"additional_data_fn\": null,\n        \"optional_data\": {},\n        \"required_data\": {},\n        \"offline_expiration_time\": 0,\n        \"display_if_empty\": \"true\",\n        \n        \"type\": details[itr].type,\n        \"image\": \"\",\n        \"myTimeout\": details[itr].myTimeout\n    };\n    delete msg.details_arr[itr].myTimeout ;\n    new_tasks.push(obj);\n}\n\nmsg.task_arr = new_tasks;\n\nvar textMsg = msg.req_body.body;\nmsg.method = \"GET\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\n\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1354.3332748413086,
        "y": 848.6666431427002,
        "wires": [
            [
                "e7596155.0ce4b"
            ]
        ]
    },
    {
        "id": "f4ab3b3b.ecc6c8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    //payload.data = null ; //for the being all the IBM Watson messages are stumped.\n    if(isEmpty(payload.data)){\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }else{\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";\n        msg.adminData = {topic: 12145644732, body: msg.payload};\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1594.6666793823242,
        "y": 849.6666965484619,
        "wires": [
            [
                "56207031.cdeac",
                "47cc6785.4ef408",
                "a0110ec0.251c2",
                "4c543859.e8f418"
            ]
        ]
    },
    {
        "id": "56207031.cdeac",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response ,\n    userObj     = msg.userObj ,\n    task_arr    = JSON.parse(JSON.stringify(msg.task_arr)),\n    new_details = [], task_ids    = [],\n    req_body    = msg.req_body;\n\nvar company_task_id = populate_compnay_task_id(task_arr);\n\nfor(var itr in task_arr){\n    task_ids.push(task_arr[itr]._id);\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_arr[itr].page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_arr[itr].from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_arr[itr].type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": task_arr[itr].myTimeout,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };    \n    \n    new_details.push(obj);\n}\nvar watson_res  = populate_watson_response(chatbot, userObj);\nmsg.save_msg_detail.push(watson_res);\nmsg.new_details = new_details;\nmsg.payload = {\n    docs: flatten([msg.details_arr, msg.task_arr, msg.new_details, msg.save_msg_detail])\n};\nnode.warn(msg);\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_ids]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };    \n    return obj;\n}\n\nfunction populate_compnay_task_id(task_arr){\n    if(isEmpty(task_arr)) return null;\n    \n    for(var itr in task_arr){\n        if( (\"company_bot_detail\" in task_arr[itr].type) ){\n            return task_arr[itr]._id;\n        }\n    }\n    return null;\n} \n\nfunction set_task_id(task_obj, company_task_id){\n    if(isEmpty(company_task_id)) {\n        return [task_obj._id];\n    }else{\n        if((\"company_bot_detail\" in task_arr[itr].type) ){\n            return [task_obj._id];\n        }else{\n            return [task_obj._id, company_task_id];\n        }\n    }\n}\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1823.333438873291,
        "y": 847.6666765213013,
        "wires": [
            [
                "3a935872.f4e828",
                "b1111c02.19da9"
            ]
        ]
    },
    {
        "id": "3a935872.f4e828",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1996.1668090820312,
        "y": 851.333330154419,
        "wires": [
            [
                "bc377683.1772a8"
            ]
        ]
    },
    {
        "id": "3ccbe545.5f3eda",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1881.3336944580078,
        "y": 1014.66672706604,
        "wires": [
            [
                "4359b167.41ec2",
                "22937080.cc8d7"
            ]
        ]
    },
    {
        "id": "4359b167.41ec2",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2093.999725341797,
        "y": 1011.3333950042725,
        "wires": []
    },
    {
        "id": "47cc6785.4ef408",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1820.666690826416,
        "y": 795.6666736602783,
        "wires": []
    },
    {
        "id": "870e6819.e027e8",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 2055.8334197998047,
        "y": 741.6666555404663,
        "wires": []
    },
    {
        "id": "a0110ec0.251c2",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n\nvar data = msg.adminData;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = data.body  ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1833.8332977294922,
        "y": 742.6666707992554,
        "wires": [
            [
                "870e6819.e027e8"
            ]
        ]
    },
    {
        "id": "7d595cb8.ad4174",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(group_id in users[counter].data.groups){\n                obj[users[counter]._id] = {    \n                    user_id   : users[counter]._id,\n                    firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                    lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                    email     : users[counter].email ? users[counter].email : \"\",\n                    device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                    phone     : users[counter].virtual_phone  \n                };\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2390.5007553100586,
        "y": 924.333366394043,
        "wires": [
            [
                "35824ace.a3a636",
                "4dad04ea.fcfe7c"
            ]
        ]
    },
    {
        "id": "88d05e5c.cd532",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2175.166748046875,
        "y": 924.0000305175781,
        "wires": [
            [
                "7d595cb8.ad4174"
            ]
        ]
    },
    {
        "id": "555fd38c.6217dc",
        "type": "inject",
        "z": "ecb75f1d.1bfe8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2021.500467300415,
        "y": 953.0000853538513,
        "wires": [
            [
                "88d05e5c.cd532"
            ]
        ]
    },
    {
        "id": "35824ace.a3a636",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2731.1668548583984,
        "y": 1022.3333892822266,
        "wires": []
    },
    {
        "id": "4dad04ea.fcfe7c",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2611.499954223633,
        "y": 923.6667385101318,
        "wires": [
            [
                "74e3443b.7dadac",
                "cf689a58.0b0d38"
            ]
        ]
    },
    {
        "id": "cf689a58.0b0d38",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2779.833541870117,
        "y": 948.6667375564575,
        "wires": [
            [
                "cf86dea1.6496f"
            ]
        ]
    },
    {
        "id": "cf86dea1.6496f",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3193.833541870117,
        "y": 1132.6667728424072,
        "wires": []
    },
    {
        "id": "bc377683.1772a8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "logger",
        "func": "node.warn(\"msg.payload >>>>>>>>>>>\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2154.500068664551,
        "y": 848.3333330154419,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb5fea3.6d6201",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2213.333335876465,
        "y": 1123.9999825954437,
        "wires": [
            [
                "9b5787db.e06198"
            ]
        ]
    },
    {
        "id": "40472db8.f085b4",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2654.6664390563965,
        "y": 1185.6666107177734,
        "wires": [
            [
                "e4be858e.53b058",
                "d8a0f291.2ced9"
            ]
        ]
    },
    {
        "id": "63062e7f.aa741",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2659.3331031799316,
        "y": 1141.3333158493042,
        "wires": []
    },
    {
        "id": "d8a0f291.2ced9",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2874.999870300293,
        "y": 1185.666612625122,
        "wires": [
            [
                "cf86dea1.6496f"
            ]
        ]
    },
    {
        "id": "276a6c1e.1b3154",
        "type": "inject",
        "z": "ecb75f1d.1bfe8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2006.3332748413086,
        "y": 1136.3332996368408,
        "wires": [
            [
                "1eb5fea3.6d6201"
            ]
        ]
    },
    {
        "id": "74e3443b.7dadac",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nnode.warn(\"notification >>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2780.833541870117,
        "y": 906.3333206176758,
        "wires": [
            [
                "45b1be0c.494ce"
            ]
        ]
    },
    {
        "id": "45b1be0c.494ce",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 2958.833541870117,
        "y": 904.3333263397217,
        "wires": [
            [
                "3e390d38.b3bbb2"
            ],
            [
                "b82dd989.22fb68"
            ],
            [
                "2ca4619f.59795e"
            ],
            [
                "fe730d30.437b9"
            ],
            [
                "cf86dea1.6496f"
            ]
        ]
    },
    {
        "id": "3e390d38.b3bbb2",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "PUSH",
        "func": "var push_data = msg.payload;\n\nmsg.identifiers = push_data.push.toString();\nmsg.payload = \"There is a new message `\"+  push_data.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3200.500175476074,
        "y": 765.3333730697632,
        "wires": [
            [
                "819697f.8666b68"
            ]
        ]
    },
    {
        "id": "b82dd989.22fb68",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3198.8333892822266,
        "y": 854.3333654403687,
        "wires": [
            [
                "20a65ab.97f06a6"
            ]
        ]
    },
    {
        "id": "2ca4619f.59795e",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3197.8333892822266,
        "y": 931.3333692550659,
        "wires": [
            []
        ]
    },
    {
        "id": "fe730d30.437b9",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3198.8333892822266,
        "y": 1019.3333745002747,
        "wires": [
            []
        ]
    },
    {
        "id": "20a65ab.97f06a6",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3387.666732788086,
        "y": 890.6666984558105,
        "wires": [
            [
                "d960ee50.2fa88"
            ],
            []
        ]
    },
    {
        "id": "d960ee50.2fa88",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3555.667449951172,
        "y": 884.6667060852051,
        "wires": [
            [
                "9f227a84.ed8b78",
                "bb8331ae.f354c",
                "73e6b923.a461e8"
            ]
        ]
    },
    {
        "id": "9f227a84.ed8b78",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3467.666732788086,
        "y": 811.6666984558105,
        "wires": [
            [
                "20a65ab.97f06a6"
            ]
        ]
    },
    {
        "id": "73e6b923.a461e8",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3768.1666412353516,
        "y": 882.666690826416,
        "wires": []
    },
    {
        "id": "bb8331ae.f354c",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3746.9999771118164,
        "y": 834.0000553131104,
        "wires": []
    },
    {
        "id": "819697f.8666b68",
        "type": "ibmpush",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 3341.3333702087402,
        "y": 764.6666717529297,
        "wires": []
    },
    {
        "id": "705243bb.97aa0c",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 2985.6665267944336,
        "y": 1335.666618347168,
        "wires": [
            [
                "9299787c.6388d8"
            ],
            [
                "707b89f0.b8d768"
            ],
            [
                "7cc628fb.35d448"
            ],
            [
                "8a17ccf9.3fa61"
            ]
        ]
    },
    {
        "id": "707b89f0.b8d768",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3211.6665534973145,
        "y": 1316.6666288375854,
        "wires": [
            [
                "13a2f9e7.7ce456"
            ]
        ]
    },
    {
        "id": "7cc628fb.35d448",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3210.6665534973145,
        "y": 1393.6666326522827,
        "wires": [
            []
        ]
    },
    {
        "id": "8a17ccf9.3fa61",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3211.6665534973145,
        "y": 1481.6666378974915,
        "wires": [
            []
        ]
    },
    {
        "id": "13a2f9e7.7ce456",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3400.499897003174,
        "y": 1352.9999618530273,
        "wires": [
            [
                "9c5e7228.8e9ea"
            ],
            []
        ]
    },
    {
        "id": "45dbe07b.899ff",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3480.499897003174,
        "y": 1273.9999618530273,
        "wires": [
            [
                "13a2f9e7.7ce456"
            ]
        ]
    },
    {
        "id": "9c5e7228.8e9ea",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.topic   = msg.payload[msg.counter];\nmsg.payload = \"There is a new message under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3568.5006141662598,
        "y": 1346.9999694824219,
        "wires": [
            [
                "45dbe07b.899ff",
                "3950993e.2c03d6",
                "77cf2b41.2ecc74"
            ]
        ]
    },
    {
        "id": "77cf2b41.2ecc74",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3780.9998054504395,
        "y": 1344.9999542236328,
        "wires": []
    },
    {
        "id": "3950993e.2c03d6",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3759.8331413269043,
        "y": 1296.3333187103271,
        "wires": []
    },
    {
        "id": "e4be858e.53b058",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = populate_device_ids(responder_group.push);\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = populate_phone_numbers(responder_group.sms);\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = populate_email_address(responder_group.email);\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = populate_apps(responder_group.app);\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = user_calculate.delivery_user_special;\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2813.000514984131,
        "y": 1336.6666631698608,
        "wires": [
            [
                "d038091b.269608",
                "705243bb.97aa0c"
            ]
        ]
    },
    {
        "id": "b1111c02.19da9",
        "type": "delay",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2002.1668090820312,
        "y": 908.6666668653488,
        "wires": [
            [
                "88d05e5c.cd532"
            ]
        ]
    },
    {
        "id": "679f5f43.53541",
        "type": "comment",
        "z": "ecb75f1d.1bfe8",
        "name": "Process Timeout at each 5 min",
        "info": "",
        "x": 173,
        "y": 273.3333134651184,
        "wires": []
    },
    {
        "id": "d904f60f.9deb98",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "PUSH",
        "func": "var push_data = msg.payload;\n\nmsg.identifiers = push_data.push.toString();\nmsg.payload = \"There is a new message `\"+  push_data.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1107.33349609375,
        "y": 236.046893119812,
        "wires": [
            [
                "700585ad.670d8c"
            ]
        ]
    },
    {
        "id": "611bd3a1.a662ec",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1105.6667098999023,
        "y": 325.0468854904175,
        "wires": [
            [
                "d47e657a.6f8758"
            ]
        ]
    },
    {
        "id": "4a812193.9a0fd",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1104.6667098999023,
        "y": 402.04688930511475,
        "wires": [
            []
        ]
    },
    {
        "id": "e125a815.2ddc48",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1107.666732788086,
        "y": 459.0469455718994,
        "wires": [
            []
        ]
    },
    {
        "id": "d47e657a.6f8758",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1294.5000534057617,
        "y": 361.3802185058594,
        "wires": [
            [
                "3415ab7f.a24c74"
            ],
            []
        ]
    },
    {
        "id": "3415ab7f.a24c74",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1462.5007705688477,
        "y": 355.3802261352539,
        "wires": [
            [
                "906dd45c.527b88",
                "77216cc7.42bf74",
                "6fd95913.544e18"
            ]
        ]
    },
    {
        "id": "906dd45c.527b88",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1374.5000534057617,
        "y": 282.3802185058594,
        "wires": [
            [
                "d47e657a.6f8758"
            ]
        ]
    },
    {
        "id": "6fd95913.544e18",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 1674.9999618530273,
        "y": 353.38021087646484,
        "wires": []
    },
    {
        "id": "77216cc7.42bf74",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1653.8332977294922,
        "y": 304.7135753631592,
        "wires": []
    },
    {
        "id": "91de46e2.894548",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 925.6667556762695,
        "y": 376.04685401916504,
        "wires": [
            [
                "d904f60f.9deb98"
            ],
            [
                "611bd3a1.a662ec"
            ],
            [
                "4a812193.9a0fd"
            ],
            [
                "e125a815.2ddc48"
            ],
            [
                "5c56217.73fa5e"
            ]
        ]
    },
    {
        "id": "5c56217.73fa5e",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1097.666732788086,
        "y": 590.3803224563599,
        "wires": []
    },
    {
        "id": "11ad4f3a.64e6e1",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 747.6667556762695,
        "y": 378.04684829711914,
        "wires": [
            [
                "91de46e2.894548"
            ]
        ]
    },
    {
        "id": "df7498c4.9754a8",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 746.6667556762695,
        "y": 420.3802652359009,
        "wires": [
            [
                "5c56217.73fa5e"
            ]
        ]
    },
    {
        "id": "c4e26c11.4eefd",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 577.000114440918,
        "y": 516.0469417572021,
        "wires": []
    },
    {
        "id": "5dbffefc.53c21",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 106.99996185302734,
        "y": 411.71355628967285,
        "wires": [
            [
                "fe4cc5c5.d7e3b8"
            ]
        ]
    },
    {
        "id": "7f807627.4be8f8",
        "type": "comment",
        "z": "ecb75f1d.1bfe8",
        "name": "Respond when SMS Comes to Company virtual_number.",
        "info": "",
        "x": 230.8333740234375,
        "y": 785.0000228881836,
        "wires": []
    },
    {
        "id": "9b5787db.e06198",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(group_id in users[counter].data.groups){\n                obj[users[counter]._id] = {    \n                    user_id   : users[counter]._id,\n                    firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                    lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                    email     : users[counter].email ? users[counter].email : \"\",\n                    device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                    phone     : users[counter].virtual_phone  \n                };\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2432.999984741211,
        "y": 1149.6666946411133,
        "wires": [
            [
                "63062e7f.aa741",
                "40472db8.f085b4"
            ]
        ]
    },
    {
        "id": "fe4cc5c5.d7e3b8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(group_id in users[counter].data.groups){\n                obj[users[counter]._id] = {    \n                    user_id   : users[counter]._id,\n                    firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                    lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                    email     : users[counter].email ? users[counter].email : \"\",\n                    device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                    phone     : users[counter].virtual_phone  \n                };\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 323.6665802001953,
        "y": 412.66667556762695,
        "wires": [
            [
                "c4e26c11.4eefd",
                "e65ccc3c.0cf91"
            ]
        ]
    },
    {
        "id": "22937080.cc8d7",
        "type": "delay",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2069.3333740234375,
        "y": 1069.0000638961792,
        "wires": [
            [
                "1eb5fea3.6d6201"
            ]
        ]
    },
    {
        "id": "d038091b.269608",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "Notification Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3005.8333473205566,
        "y": 1448.3333387374878,
        "wires": []
    },
    {
        "id": "68609f88.aabaa",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "populate_records",
        "func": "var db_records  = msg.payload,\n    body        = msg.req_body,\n    name        = isEmpty(body.responder_user) ? \"Call Back\" : body.responder_user.firstname + \" \" + body.responder_user.lastname;\n\nif(isEmpty(db_records)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant view to get data\", data: null};\n}else{\n    var task_ids    = populate_tasks(db_records.rows, body.task_name);\n    if(isEmpty(task_ids)){\n        msg.api_status = \"API_ERROR\";\n        msg.statusCode = 400 ;\n        msg.payload    = {status: 400, msg: \"Unable to get the task_ids with task_name\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.user_obj     = populate_userObj(db_records.rows, body.task_name);\n        msg.payload     = {\n            \"table\": \"details\",\n            \"task_id\": task_ids,\n            \"child_task_id\": null,\n            \"user_id\": msg.user_obj._id ,\n            \"from_user_id\": body.responder_user.user_id,\n            \"page_id\": 26,\n            \"from_page_id\": 0,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg,\n                \"annotation\": populate_Char(name.split(\" \"))\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.user_response = {   //this object is saved to list on user screen for whom message is .\n            \"table\": \"details\",\n            \"task_id\": [\"18_0\"],\n            \"child_task_id\": null,\n            \"user_id\": msg.user_obj._id ,\n            \"from_user_id\": {\n                \"user_id\" : msg.user_obj._id,\n                \"firstname\": msg.user_obj.firstname ,\n                \"lastname\" : msg.user_obj.lastname ,\n                \"phone\" : msg.user_obj.virtual_phone\n            },\n            \"page_id\": 18,\n            \"from_page_id\": 0,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.api_response = {status: 200, msg: \"Record updated successfully\", data: msg.payload};\n    }\n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction populate_Char(arr){\n  var str = \"\";\n  for(var itr in arr){\n    if(arr[itr]){\n      str += arr[itr].substr(0,1);\n    }\n  }\n  return \"..(\" + str + \")\";\n}\n\nfunction populate_userObj(list, phone_number){\n    if(isEmpty(list)) return {};\n    if(isEmpty(phone_number)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            if(list[itr].value.virtual_phone == Number(phone_number)){\n                return list[itr].value;\n            }\n        }\n    }\n    return {};\n}\n\nfunction populate_tasks(list, task_name){\n    if(isEmpty(list)) return [];\n    if(isEmpty(task_name)) return [];\n    var tasks_ids = [];\n    for(var itr in list){\n        if(list[itr].value.table == \"task_table\"){\n            if(list[itr].value.task_name.toString() == task_name.toString()){\n                tasks_ids.push(list[itr].value._id);\n            }\n        }\n    }\n    return tasks_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 729.8334045410156,
        "y": 1221.9999904632568,
        "wires": [
            [
                "b7a59078.2875e"
            ]
        ]
    },
    {
        "id": "78eba5cb.1ede6c",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 1083.666648864746,
        "y": 1174.999984741211,
        "wires": []
    },
    {
        "id": "75c5b54c.1ff0ec",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot",
        "tls": "",
        "x": 528.6667098999023,
        "y": 1221.666657447815,
        "wires": [
            [
                "68609f88.aabaa"
            ]
        ]
    },
    {
        "id": "e9f4a05f.bc35b",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "req payload",
        "func": "msg.req_body    = msg.payload ;\nmsg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\nmsg.method      = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 353.8333435058594,
        "y": 1219.9999914169312,
        "wires": [
            [
                "75c5b54c.1ff0ec"
            ]
        ]
    },
    {
        "id": "b7a59078.2875e",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 903.8333511352539,
        "y": 1221.666657447815,
        "wires": [
            [
                "78eba5cb.1ede6c"
            ],
            [
                "6c690326.72a2ac",
                "be2448f0.b0e138",
                "43aec7a9.d63de8",
                "103459eb.ae4496",
                "ae8bb829.cffb78"
            ]
        ]
    },
    {
        "id": "6c690326.72a2ac",
        "type": "cloudant out",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1103.833641052246,
        "y": 1275.0002355575562,
        "wires": []
    },
    {
        "id": "a289e398.2be8e",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 1352.5001602172852,
        "y": 1228.3332405090332,
        "wires": []
    },
    {
        "id": "be2448f0.b0e138",
        "type": "change",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1143.500156402588,
        "y": 1227.6666240692139,
        "wires": [
            [
                "a289e398.2be8e"
            ]
        ]
    },
    {
        "id": "43aec7a9.d63de8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS Response",
        "func": "var body    = msg.req_body;\nmsg.topic   = body.task_name;\nmsg.payload = body.msg;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1119.4999771118164,
        "y": 1397.3335580825806,
        "wires": [
            [
                "66eae13b.b0ed9"
            ]
        ]
    },
    {
        "id": "66eae13b.b0ed9",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "",
        "x": 1370.49995803833,
        "y": 1396.000205039978,
        "wires": []
    },
    {
        "id": "f2aaa20.0aae36",
        "type": "interval",
        "z": "ecb75f1d.1bfe8",
        "name": "interval",
        "interval": "5",
        "onstart": true,
        "msg": "ping",
        "showstatus": true,
        "unit": "minutes",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 77.83332824707031,
        "y": 336.3333282470703,
        "wires": [
            []
        ]
    },
    {
        "id": "452e9139.d5271",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1188.833366394043,
        "y": 1037.3333911895752,
        "wires": [
            [
                "7070e3f.a644c1c"
            ]
        ]
    },
    {
        "id": "e7596155.0ce4b",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1482.333251953125,
        "y": 767.3333129882812,
        "wires": [
            [
                "f4ab3b3b.ecc6c8"
            ]
        ]
    },
    {
        "id": "4c543859.e8f418",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:12145644732\",\n    sort : \"_id<string>\"\n};\n\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1792.3333587646484,
        "y": 697.6666231155396,
        "wires": [
            [
                "9256d362.d7712"
            ]
        ]
    },
    {
        "id": "9256d362.d7712",
        "type": "cloudant in",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1953.3333587646484,
        "y": 695.9999628067017,
        "wires": [
            [
                "469f5ffc.405da"
            ]
        ]
    },
    {
        "id": "469f5ffc.405da",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "push_notification",
        "func": "var payload     = msg.payload ,\n    chatbot     = msg.chatbot_response,\n    user_obj    = calculate_user(payload); \n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = \"No need to send push notification\";\n}else{\n    if(user_obj.device_id == \"Web View\" && push_accepted === 0){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = \"No need to send push notification\";\n    }else{\n        // msg.payload = chatbot.data ;\n        // msg.identifiers= user_obj.device_id; //device_id\n        // node.warn(msg);\n        msg.headers = {\n            \"appSecret\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\"\n        };\n        msg.payload = {\n            \"message\": {\n                \"alert\": chatbot.data\n            }, \n            \"target\": {\n                \"deviceIds\": (typeof userObj.device_id == \"string\") ? [user_obj.device_id] : user_obj.device_id \n            },\n            \"settings\": {\n                \"apns\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                },\n                \"gcm\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                }\n            }\n        };\n        msg.url = \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\";\n        msg.method = \"POST\";\n    }\n}\nreturn msg;\n\nfunction calculate_user(list){\n    var obj = {};\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].virtual_phone){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2147.3333587646484,
        "y": 695.6666193008423,
        "wires": [
            [
                "fbfd3ff6.0eb8c"
            ]
        ]
    },
    {
        "id": "47481d7d.1fece4",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:12145644732\",\n    sort : \"_id<string>\"\n};\n\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1627,
        "y": 1203,
        "wires": [
            [
                "c9fd76a3.a73358"
            ]
        ]
    },
    {
        "id": "c9fd76a3.a73358",
        "type": "cloudant in",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1788,
        "y": 1201.333339691162,
        "wires": [
            [
                "785e2fed.9e34c"
            ]
        ]
    },
    {
        "id": "785e2fed.9e34c",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "push_notification",
        "func": "var payload     = msg.payload ,\n    chatbot     = msg.chatbot_response,\n    user_obj    = calculate_user(payload); \n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = \"No need to send push notification\";\n}else{\n    if(user_obj.device_id == \"Web View\" && push_accepted === 0){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = \"No need to send push notification\";\n    }else{\n        // msg.payload =  chatbot.data;\n        // msg.identifiers= user_obj.device_id; //device_id\n        // node.warn(msg);\n        msg.headers = {\n            \"appSecret\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\"\n        };\n        msg.payload = {\n            \"message\": {\n                \"alert\": chatbot.data\n            }, \n            \"target\": {\n                \"deviceIds\": (typeof userObj.device_id == \"string\") ? [user_obj.device_id] : user_obj.device_id \n            },\n            \"settings\": {\n                \"apns\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                },\n                \"gcm\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                }\n            }\n        };\n        msg.url = \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\";\n        msg.method = \"POST\";\n    }\n}\nreturn msg;\n\nfunction calculate_user(list){\n    var obj = {};\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].virtual_phone){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1978.0002822875977,
        "y": 1202.0002346038818,
        "wires": [
            [
                "86ebb20.674755"
            ]
        ]
    },
    {
        "id": "9299787c.6388d8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "PUSH",
        "func": "var push_data = msg.payload;\n\nmsg.identifiers = push_data.toString();\nmsg.payload = \"There is a new message ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3213.333339691162,
        "y": 1227.66663646698,
        "wires": [
            [
                "a95c86bb.b85e18"
            ]
        ]
    },
    {
        "id": "a95c86bb.b85e18",
        "type": "ibmpush",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 3345.833541870117,
        "y": 1227.999870300293,
        "wires": []
    },
    {
        "id": "700585ad.670d8c",
        "type": "ibmpush",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 1253.6666259765625,
        "y": 233.66665649414062,
        "wires": []
    },
    {
        "id": "e65ccc3c.0cf91",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 578.3331680297852,
        "y": 395.3802661895752,
        "wires": [
            [
                "df7498c4.9754a8",
                "11ad4f3a.64e6e1"
            ]
        ]
    },
    {
        "id": "48f2385.44e21c8",
        "type": "cloudant out",
        "z": "ecb75f1d.1bfe8",
        "name": "Add detail",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2030.2580547332764,
        "y": 1936.0000743865967,
        "wires": []
    },
    {
        "id": "50b19887.a63488",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 2234.0000801086426,
        "y": 2043.9612197875977,
        "wires": []
    },
    {
        "id": "486f5fcb.5cd0e",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2057.0000801086426,
        "y": 2045.1565322875977,
        "wires": [
            [
                "50b19887.a63488"
            ]
        ]
    },
    {
        "id": "5333bf30.5b481",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1364.5912284851074,
        "y": 1964.000036239624,
        "wires": [
            [
                "ae2af27a.95043"
            ]
        ]
    },
    {
        "id": "ae2af27a.95043",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Your Chabot response is: \" + payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nnode.warn(\"msg >>>>>>>>>>>>>>>>>>>>>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1568.5912895202637,
        "y": 1962.6667232513428,
        "wires": [
            [
                "72005390.8ce8dc"
            ]
        ]
    },
    {
        "id": "72005390.8ce8dc",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    userObj     = msg.userObj ,\n    task_ids    = msg.task_ids;\n\nmsg.payload = {\n  \"table\": \"details\",\n  \"task_id\": flatten([\"18_0\", task_ids]),\n  \"child_task_id\": null,\n  \"user_id\": userObj._id,\n  \"from_user_id\": req_body.chatbot_user,\n  \"page_id\": 26,\n  \"from_page_id\": 0,\n  \"to_page_id\": 0,\n  \"synchronized\": 0,\n  \"processed\": 1,\n  \"status\": 2,\n  \"read\": 0,\n  \"display_if_empty\": \"true\",\n  \"date_created\": new Date().toJSON(),\n  \"offline_expiration_seconds\": 0,\n  \"priority\": 1,\n  \"category\": \"message\",\n  \"type\": {\n      \"public\": \"public\",\n      \"company_bot_detail\": \"company_bot_detail\"\n    },\n  \"image\": \"\",\n    \"from_user\": {},\n    \"user_incoming\": {\n        \"note\":  (userObj.firstname + userObj.lastname),\n        \"message\": req_body.body\n    },\n  \"template\": {},\n  \"timeout\": {},\n  \"user_calculate\": {},\n  \"location\": {},\n  \"default\": {},\n  \"count_status\": {},\n  \"count\": {},\n  \"count_if\": {},\n  \"createdAt\": new Date().getTime() \n};\n\nmsg.watson_output = {\n    \"table\": \"details\",\n    \"task_id\": flatten([\"18_0\", task_ids]),\n    \"child_task_id\": null,\n    \"user_id\": userObj._id,\n    \"from_user_id\": req_body.chatbot_user,\n    \"page_id\": 18,\n    \"from_page_id\": 0,\n    \"to_page_id\": 0,\n    \"synchronized\": 0,\n    \"processed\": 0,\n    \"status\": 0,\n    \"read\": 0,\n    \"display_if_empty\": \"true\",\n    \"date_created\": new Date().toJSON(),\n    \"offline_expiration_seconds\": 0,\n    \"priority\": 1,\n    \"category\": \"message\",\n    \"type\": {\n      \"public\": \"public\"\n    },\n    \"image\": \"\",\n    \"from_user\": {},\n    \"user_incoming\": {\n        \"note\":  (userObj.firstname + userObj.lastname),\n        \"message\": chatbot.data || \"Watson Stumped\",\n        \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n    },\n    \"template\": {},\n    \"timeout\": {},\n    \"user_calculate\": {},\n    \"location\": {},\n    \"default\": {},\n    \"count_status\": {},\n    \"count\": {},\n    \"count_if\": {},\n    \"createdAt\": new Date().getTime() + 20000 \n};\nnode.warn(\"msg>>>>>>\");\nnode.warn(msg);\nreturn msg;\n\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1820.2579498291016,
        "y": 1967.6666870117188,
        "wires": [
            [
                "486f5fcb.5cd0e",
                "48f2385.44e21c8",
                "72794391.1dde0c"
            ]
        ]
    },
    {
        "id": "5590bbce.2ce044",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1002.7578735351562,
        "y": 1919.0000357627869,
        "wires": [
            [
                "798d0e2c.475d"
            ]
        ]
    },
    {
        "id": "798d0e2c.475d",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\nmsg.task_ids    = populate_task(db_records.tasks, msg.req_body.phone);\n\nmsg.method      = \"GET\";\nmsg.url          = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;\n\nfunction populate_task(list, task_name){\n    var obj = [];\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj.push(list[i]._id);\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_record(list){\n    if(isEmpty(list)) node.warn(\"Unable to get data from cloudant view.\");\n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1194.5912170410156,
        "y": 1965.6667022705078,
        "wires": [
            [
                "5333bf30.5b481"
            ]
        ]
    },
    {
        "id": "c1a5bb6a.7707e8",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 982.5000381469727,
        "y": 1869.3333625793457,
        "wires": []
    },
    {
        "id": "72794391.1dde0c",
        "type": "change",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "watson_output",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2074.83341217041,
        "y": 1986.0001192092896,
        "wires": [
            [
                "4f795c17.0852a4"
            ]
        ]
    },
    {
        "id": "4f795c17.0852a4",
        "type": "cloudant out",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2276.8334045410156,
        "y": 1988.333381652832,
        "wires": []
    },
    {
        "id": "65434e3e.6ebee",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Details Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1816.833366394043,
        "y": 961.333348274231,
        "wires": []
    },
    {
        "id": "103459eb.ae4496",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "push",
        "func": "var body    = msg.req_body;\n    userObj = msg.user_obj;\n\nif(isEmpty(userObj)){\n    msg.api_status  = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to get User object via using usernumber:- \" + body.task_name, data: null};\n}else{\n    if(isEmpty(userObj.device_id) || userObj.device_id == \"Web View\"){\n        msg.api_status  = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"No Device id to send push notification\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.headers = {\n            \"appSecret\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\"\n        };\n        msg.payload = {\n            \"message\": {\n                \"alert\": body.msg\n            }, \n            \"target\": {\n                \"deviceIds\": (typeof userObj.device_id == \"string\") ? [userObj.device_id] : userObj.device_id \n            },\n            \"settings\": {\n                \"apns\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                },\n                \"gcm\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                }\n            }\n        };\n        msg.url = \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\";\n        msg.method = \"POST\";\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1091.8333168029785,
        "y": 1465.333583831787,
        "wires": [
            [
                "ae24f632.fccaa8"
            ]
        ]
    },
    {
        "id": "ae24f632.fccaa8",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1225.4999923706055,
        "y": 1464.0002145767212,
        "wires": [
            [
                "8840301e.7b2af"
            ],
            [
                "9f4d631a.f8b78"
            ]
        ]
    },
    {
        "id": "8840301e.7b2af",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1402.4999923706055,
        "y": 1440.3335580825806,
        "wires": []
    },
    {
        "id": "ae8bb829.cffb78",
        "type": "change",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "user_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1146.499984741211,
        "y": 1335.0002422332764,
        "wires": [
            [
                "6f4c95e.e21186c"
            ]
        ]
    },
    {
        "id": "6f4c95e.e21186c",
        "type": "cloudant out",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1351.5000305175781,
        "y": 1334.6666641235352,
        "wires": []
    },
    {
        "id": "53c4dece.abbab",
        "type": "http request",
        "z": "33a82338.96373c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 860.8333396911621,
        "y": 846.0000095367432,
        "wires": [
            [
                "5097ecc4.ca02f4"
            ]
        ]
    },
    {
        "id": "5097ecc4.ca02f4",
        "type": "debug",
        "z": "33a82338.96373c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1083.8334350585938,
        "y": 833.0000095367432,
        "wires": []
    },
    {
        "id": "9f4d631a.f8b78",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1400.333251953125,
        "y": 1502,
        "wires": [
            [
                "6498495b.aacdb8"
            ]
        ]
    },
    {
        "id": "6498495b.aacdb8",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "MasterBot Respond",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1607.333351135254,
        "y": 1502.0000896453857,
        "wires": []
    },
    {
        "id": "fbfd3ff6.0eb8c",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2340.0001373291016,
        "y": 696.0000419616699,
        "wires": [
            [
                "4c780ff4.2a064"
            ]
        ]
    },
    {
        "id": "4c780ff4.2a064",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "User SMS Response",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2541.0001487731934,
        "y": 696.0001220703125,
        "wires": []
    },
    {
        "id": "86ebb20.674755",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2155.000129699707,
        "y": 1253.0000743865967,
        "wires": [
            [
                "b0b4097a.32c888"
            ]
        ]
    },
    {
        "id": "b0b4097a.32c888",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "When user number already exists",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2391.0001373291016,
        "y": 1251.0002374649048,
        "wires": []
    },
    {
        "id": "4dd97248.04935c",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload , //should be IBM Watson node response\n    req_body    = msg.req_body;\n    \n    //payload.daata = \"\";\n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic   = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n    }\n    \nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1458.3331985473633,
        "y": 2267.9999990463257,
        "wires": [
            [
                "18613a4d.9109a6",
                "4294521c.8fde1c",
                "19fff2d3.335fdd",
                "b59f216c.d2b72",
                "88424aca.01cef8",
                "17ef44de.41774b"
            ]
        ]
    },
    {
        "id": "4da13a1f.759c94",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\nmsg.task_arr    = populate_task(db_records.tasks, msg.req_body.phone);\n//msg.detail_obj  = populate_detail(db_records.details, msg.task_arr);\nmsg.userObj     = isEmpty(msg.userObj) ? {} : msg.userObj[0] ;\n\nmsg.method      = \"GET\";\nmsg.url         = \"https://play-timeout.mybluemix.net/chatbot?text=\" + textMsg;\nreturn msg;\n\nfunction populate_task(list, task_name){\n    var arr = [];\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            arr.push(list[i]);\n        }\n    }\n    return arr;\n}\n\n\nfunction populate_record(list){\n    if(isEmpty(list)) node.warn(\"Unable to get data from cloudant view.\");\n    \n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1178.9998512268066,
        "y": 2192.3332509994507,
        "wires": [
            [
                "d61476c8.a721f8"
            ]
        ]
    },
    {
        "id": "83c6ed0c.b5ab3",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1005.1666679382324,
        "y": 2195.6666650772095,
        "wires": [
            [
                "4da13a1f.759c94"
            ]
        ]
    },
    {
        "id": "d61476c8.a721f8",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1258.4996948242188,
        "y": 2269.999918937683,
        "wires": [
            [
                "4dd97248.04935c"
            ]
        ]
    },
    {
        "id": "4294521c.8fde1c",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1706.3334197998047,
        "y": 2150.6665410995483,
        "wires": []
    },
    {
        "id": "18613a4d.9109a6",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_arr    = msg.task_arr,\n    new_details = [], task_ids    = [],\n    userObj     = msg.userObj;\n    \nvar company_task_id = populate_compnay_task_id(task_arr);\n\nfor(var itr in task_arr){\n    task_ids.push(task_arr[itr]._id);\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_arr[itr].page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_arr[itr].from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_arr[itr].type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": task_arr[itr].myTimeout,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n        \n    };    \n    new_details.push(obj);\n}\n\nvar watson_res  = populate_watson_response(chatbot, userObj), //show watson response under sms user\n    user_data   = populate_user_data(req_body, userObj); //to show detail under sms user\nnew_details.push(watson_res);\nnew_details.push(user_data);\nmsg.payload = {\n    docs: new_details\n};\nnode.warn(msg);\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_ids]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 20000\n    };    \n    return obj;\n}\n\nfunction populate_user_data(req_body, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"], //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 5,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_arr[itr].type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n        \n    };   \n    return obj;\n}\n\nfunction populate_compnay_task_id(task_arr){\n    if(isEmpty(task_arr)) return null;\n    \n    for(var itr in task_arr){\n        if( (\"company_bot_detail\" in task_arr[itr].type) ){\n            return task_arr[itr]._id;\n        }\n    }\n    return null;\n} \n\nfunction set_task_id(task_obj, company_task_id){\n    if(isEmpty(company_task_id)) {\n        return [task_obj._id];\n    }else{\n        if((\"company_bot_detail\" in task_arr[itr].type) ){\n            return [task_obj._id];\n        }else{\n            return [task_obj._id, company_task_id];\n        }\n    }\n}\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1707.9998626708984,
        "y": 2223.999939918518,
        "wires": [
            [
                "36d3092f.40fe06",
                "a5526903.0779b8"
            ]
        ]
    },
    {
        "id": "19fff2d3.335fdd",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n\nvar data = msg.chatbot_response;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = data.data  ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1740.3330078125,
        "y": 2295.333251953125,
        "wires": [
            [
                "1422beb1.71b441"
            ]
        ]
    },
    {
        "id": "b59f216c.d2b72",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:12145644732\",\n    sort : \"_id<string>\"\n};\n\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1696.6663284301758,
        "y": 2435.666527748108,
        "wires": [
            [
                "8b265e1b.8eca7"
            ]
        ]
    },
    {
        "id": "8b265e1b.8eca7",
        "type": "cloudant in",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1857.6663284301758,
        "y": 2433.99986743927,
        "wires": [
            [
                "140bd987.c123a6"
            ]
        ]
    },
    {
        "id": "140bd987.c123a6",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "push_notification",
        "func": "var payload     = msg.payload ,\n    chatbot     = msg.chatbot_response,\n    user_obj    = calculate_user(payload); \n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = \"No need to send push notification\";\n}else{\n    if(user_obj.device_id == \"Web View\" && push_accepted === 0){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = \"No need to send push notification\";\n    }else{\n        // msg.payload =  chatbot.data;\n        // msg.identifiers= user_obj.device_id; //device_id\n        // node.warn(msg);\n        msg.headers = {\n            \"appSecret\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\"\n        };\n        msg.payload = {\n            \"message\": {\n                \"alert\": chatbot.data\n            }, \n            \"target\": {\n                \"deviceIds\": (typeof userObj.device_id == \"string\") ? [user_obj.device_id] : user_obj.device_id \n            },\n            \"settings\": {\n                \"apns\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                },\n                \"gcm\": {\n                    \"payload\": {\n                        \"isPageRefresh\" : true,\n                        \"page_id\"       : 18 \n                    }\n                }\n            }\n        };\n        msg.url = \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\";\n        msg.method = \"POST\";\n    }\n}\nreturn msg;\n\nfunction calculate_user(list){\n    var obj = {};\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].virtual_phone){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2047.6666107177734,
        "y": 2434.6667623519897,
        "wires": [
            [
                "47ab7a37.012884"
            ]
        ]
    },
    {
        "id": "bbe92be6.37f7b8",
        "type": "inject",
        "z": "ecb75f1d.1bfe8",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2075.9996032714844,
        "y": 2368.9998273849487,
        "wires": [
            [
                "94e99d76.a7a47"
            ]
        ]
    },
    {
        "id": "78bd7aaa.2c5a84",
        "type": "delay",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2138.9997024536133,
        "y": 2301.666591644287,
        "wires": [
            [
                "94e99d76.a7a47"
            ]
        ]
    },
    {
        "id": "1422beb1.71b441",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 1962.3331298828125,
        "y": 2294.333236694336,
        "wires": []
    },
    {
        "id": "36d3092f.40fe06",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1951.0000228881836,
        "y": 2247.333254814148,
        "wires": [
            [
                "f1326f00.c74b8",
                "78bd7aaa.2c5a84"
            ]
        ]
    },
    {
        "id": "a5526903.0779b8",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "Add Details Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1886.4996948242188,
        "y": 2193.999876022339,
        "wires": []
    },
    {
        "id": "f1326f00.c74b8",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2163.6660537719727,
        "y": 2243.9999227523804,
        "wires": []
    },
    {
        "id": "94e99d76.a7a47",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2282.9996643066406,
        "y": 2356.6665103435516,
        "wires": [
            [
                "e7054ead.8f585"
            ]
        ]
    },
    {
        "id": "47ab7a37.012884",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2224.666458129883,
        "y": 2485.6666021347046,
        "wires": [
            [
                "9f52e40d.056c98"
            ]
        ]
    },
    {
        "id": "e7054ead.8f585",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(group_id in users[counter].data.groups){\n                obj[users[counter]._id] = {    \n                    user_id   : users[counter]._id,\n                    firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                    lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                    email     : users[counter].email ? users[counter].email : \"\",\n                    device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                    phone     : users[counter].virtual_phone  \n                };\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2502.6663131713867,
        "y": 2382.333222389221,
        "wires": [
            [
                "9a0c1bca.b37218",
                "8df9bb5c.842378"
            ]
        ]
    },
    {
        "id": "9f52e40d.056c98",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "When user number already exists",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2460.6664657592773,
        "y": 2483.6667652130127,
        "wires": []
    },
    {
        "id": "9a0c1bca.b37218",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2728.9994316101074,
        "y": 2373.999843597412,
        "wires": []
    },
    {
        "id": "8df9bb5c.842378",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2724.3327674865723,
        "y": 2418.3331384658813,
        "wires": [
            [
                "16eb7763.a7d939",
                "febddde7.0f30e"
            ]
        ]
    },
    {
        "id": "16eb7763.a7d939",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = populate_device_ids(responder_group.push);\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = populate_phone_numbers(responder_group.sms);\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = populate_email_address(responder_group.email);\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = populate_apps(responder_group.app);\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = user_calculate.delivery_user_special;\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2882.6668434143066,
        "y": 2569.3331909179688,
        "wires": [
            [
                "42b00db5.07c604",
                "ed5419aa.278fb8"
            ]
        ]
    },
    {
        "id": "febddde7.0f30e",
        "type": "http request",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2944.6661987304688,
        "y": 2418.33314037323,
        "wires": [
            [
                "53ff56ac.3a5198"
            ]
        ]
    },
    {
        "id": "42b00db5.07c604",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "Notification Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3075.4996757507324,
        "y": 2680.9998664855957,
        "wires": []
    },
    {
        "id": "ed5419aa.278fb8",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 3055.3328552246094,
        "y": 2568.333146095276,
        "wires": [
            [
                "823d6e4a.60bc5"
            ],
            [
                "7291298f.bd1358"
            ],
            [
                "82fda330.54463"
            ],
            []
        ]
    },
    {
        "id": "53ff56ac.3a5198",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3263.499870300293,
        "y": 2365.333300590515,
        "wires": []
    },
    {
        "id": "823d6e4a.60bc5",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "PUSH",
        "func": "var push_data = msg.payload;\n\nmsg.identifiers = push_data.toString();\nmsg.payload = \"There is a new message ReminderBot company. Please check it once. Thanks!!!\";\n\nnode.warn(\"push >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\nnode.warn(msg);\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3282.999668121338,
        "y": 2460.333164215088,
        "wires": [
            [
                "b9f4bee4.ac061"
            ]
        ]
    },
    {
        "id": "7291298f.bd1358",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3281.3328819274902,
        "y": 2549.3331565856934,
        "wires": [
            [
                "6981899b.866f18"
            ]
        ]
    },
    {
        "id": "82fda330.54463",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3280.3328819274902,
        "y": 2626.3331604003906,
        "wires": [
            []
        ]
    },
    {
        "id": "bae4929f.f82e5",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3550.1662254333496,
        "y": 2506.6664896011353,
        "wires": [
            [
                "6981899b.866f18"
            ]
        ]
    },
    {
        "id": "6981899b.866f18",
        "type": "switch",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3470.1662254333496,
        "y": 2585.6664896011353,
        "wires": [
            [
                "51ff214c.8c6ee"
            ],
            []
        ]
    },
    {
        "id": "51ff214c.8c6ee",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "payload",
        "func": "msg.topic   = msg.payload[msg.counter];\nmsg.payload = \"There is a new message under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3638.1669425964355,
        "y": 2579.66649723053,
        "wires": [
            [
                "bae4929f.f82e5",
                "15b739da.6b0116",
                "1887b799.438338"
            ]
        ]
    },
    {
        "id": "15b739da.6b0116",
        "type": "debug",
        "z": "ecb75f1d.1bfe8",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3829.49946975708,
        "y": 2528.999846458435,
        "wires": []
    },
    {
        "id": "1887b799.438338",
        "type": "twilio out",
        "z": "ecb75f1d.1bfe8",
        "service": "_ext_",
        "twilio": "292ed10e.c0aa1e",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3850.6661338806152,
        "y": 2577.6664819717407,
        "wires": []
    },
    {
        "id": "b9f4bee4.ac061",
        "type": "ibmpush",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 3415.499870300293,
        "y": 2460.666398048401,
        "wires": []
    },
    {
        "id": "c899e651.ce3b18",
        "type": "http response",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "x": 1910.3333282470703,
        "y": 2511.000385284424,
        "wires": []
    },
    {
        "id": "88424aca.01cef8",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1733.3333282470703,
        "y": 2512.195697784424,
        "wires": [
            [
                "c899e651.ce3b18"
            ]
        ]
    },
    {
        "id": "17ef44de.41774b",
        "type": "function",
        "z": "ecb75f1d.1bfe8",
        "name": "PUSH",
        "func": "var user   = msg.user_obj ,\n    chatbot     = msg.chatbot_response ;\n\nmsg.identifiers = user.device_id ;\nmsg.payload = chatbot.data ;\n\nnode.warn(\"sends push notificatino directly to users>>>>>>>>>>>>>>\")\nnode.warn(msg);\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1684.6666259765625,
        "y": 2090,
        "wires": [
            [
                "255f03c.c7804fc"
            ]
        ]
    },
    {
        "id": "255f03c.c7804fc",
        "type": "ibmpush",
        "z": "ecb75f1d.1bfe8",
        "name": "",
        "ApplicationID": "12312259665 ",
        "identifiers": "",
        "notification": "deviceid",
        "mode": "PRODUCTION",
        "x": 1817.1668281555176,
        "y": 2090.333233833313,
        "wires": []
    }
]
