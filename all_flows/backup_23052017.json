[
    {
        "id": "662b971b.e02a68",
        "type": "tab",
        "label": "User Screen"
    },
    {
        "id": "30b56e49.7dc182",
        "type": "tab",
        "label": "Location Screen"
    },
    {
        "id": "7d73ba45.c80ab4",
        "type": "tab",
        "label": "Template Screen"
    },
    {
        "id": "d9e3488f.8f93b8",
        "type": "tab",
        "label": "Task Screen"
    },
    {
        "id": "57a35ec7.3182f",
        "type": "tab",
        "label": "Timeout Screen"
    },
    {
        "id": "7fce52ea.7e640c",
        "type": "tab",
        "label": "Big Record Table"
    },
    {
        "id": "a164a1e3.d69",
        "type": "tab",
        "label": "Detail Screen"
    },
    {
        "id": "3b9a3280.9d537e",
        "type": "tab",
        "label": "Details -- actual"
    },
    {
        "id": "b36c2dc1.25c34",
        "type": "tab",
        "label": "Genernal Api's"
    },
    {
        "id": "42835cf9.2628c4",
        "type": "tab",
        "label": "Page list"
    },
    {
        "id": "c80a9dd2.e75c1",
        "type": "tab",
        "label": "Get page"
    },
    {
        "id": "f92f7e23.5ef5b",
        "type": "tab",
        "label": "Central Api"
    },
    {
        "id": "505a09c5.621328",
        "type": "tab",
        "label": "Login API --niklas"
    },
    {
        "id": "b36c258c.f48c68",
        "type": "tab",
        "label": "Get token --Niklas"
    },
    {
        "id": "ed7375e0.d65788",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "19d64182.cdd4de",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "a38007c3.b0ee68",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "2eb2b368.8322ec"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "2eb2b368.8322ec",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "a4a278a8.fe0848",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "f7272181.dd58e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "f7272181.dd58e",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "61a5aa7a.4c84c4",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "e6a2312.44f20d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "e6a2312.44f20d",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "75b71eb6.4ae56",
        "type": "websocket-listener",
        "z": "",
        "path": "",
        "wholemsg": "false"
    },
    {
        "id": "c4fcd744.cdabe8",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "+15103067839",
        "name": "Twilio Chatbot1"
    },
    {
        "id": "df85784.deb9a88",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "+15103067839",
        "name": "Twilio Chatbot1"
    },
    {
        "id": "8256f452.e40578",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "+15103067839",
        "name": "Twilio Chatbot1"
    },
    {
        "id": "f21375e6.0c0388",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "b1b06246.0977a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#10cfd8",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1bd51bb9.ae7d24",
        "type": "ui_tab",
        "z": "",
        "name": "User Form Tab",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "c9b5c240.9166e",
        "type": "ui_group",
        "z": "662b971b.e02a68",
        "name": "Form",
        "tab": "1bd51bb9.ae7d24",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "5fa0db32.5a8624",
        "type": "ui_group",
        "z": "30b56e49.7dc182",
        "name": "Location Form",
        "tab": "",
        "disp": false,
        "width": "9"
    },
    {
        "id": "7b59d779.f66738",
        "type": "ui_tab",
        "z": "30b56e49.7dc182",
        "name": "Location Form",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "9245592b.d1e4f8",
        "type": "ui_group",
        "z": "30b56e49.7dc182",
        "name": "Location",
        "tab": "7b59d779.f66738",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "b2135a9e.4c9988",
        "type": "ui_tab",
        "z": "",
        "name": "Template Form",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "4d3cad8b.f40864",
        "type": "ui_group",
        "z": "7d73ba45.c80ab4",
        "name": "Template",
        "tab": "b2135a9e.4c9988",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "d0242660.cf9398",
        "type": "ui_group",
        "z": "d9e3488f.8f93b8",
        "name": "Task",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "b192884e.b0a068",
        "type": "ui_group",
        "z": "",
        "name": "Task",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "8f59afc3.dc37b",
        "type": "ui_tab",
        "z": "",
        "name": "Timeout Screen",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "e90a8654.6407c8",
        "type": "ui_group",
        "z": "57a35ec7.3182f",
        "name": "Timeout",
        "tab": "8f59afc3.dc37b",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "f004ae97.62a33",
        "type": "ui_tab",
        "z": "",
        "name": "Detail Screen",
        "icon": "dashboard",
        "order": 6
    },
    {
        "id": "e8b5a7d3.af2da8",
        "type": "ui_group",
        "z": "a164a1e3.d69",
        "name": "Detail",
        "tab": "f004ae97.62a33",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "9a9b7181.f3ccf",
        "type": "ui_tab",
        "z": "",
        "name": "Big record table",
        "icon": "dashboard",
        "order": 7
    },
    {
        "id": "605089c4.c715b8",
        "type": "ui_group",
        "z": "7fce52ea.7e640c",
        "name": "Big record table",
        "tab": "9a9b7181.f3ccf",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "d173f1a2.6f3b7",
        "type": "ui_group",
        "z": "d9e3488f.8f93b8",
        "name": "Task",
        "tab": "11c817eb.e94a08",
        "order": 1,
        "disp": false,
        "width": "9"
    },
    {
        "id": "11c817eb.e94a08",
        "type": "ui_tab",
        "z": "",
        "name": "Task Screen",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "1aee3610.c8baea",
        "type": "mqtt-broker",
        "z": "",
        "broker": "test.mosquitto.com",
        "port": "8883",
        "clientid": "",
        "usetls": true,
        "verifyservercert": true,
        "compatmode": false,
        "keepalive": "15",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willRetain": null,
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": null,
        "birthPayload": ""
    },
    {
        "id": "5281de41.649f",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "76512216.4472ac",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "9cf87311.0014a",
        "type": "twilio-api",
        "z": "505a09c5.621328",
        "sid": "AC71948e10a2402ce138d9b46e789254b2",
        "from": "12317146495",
        "name": "Twilio SMS NoteToSelf"
    },
    {
        "id": "5e923e83.d5527",
        "type": "cloudant",
        "z": "",
        "host": "http://127.0.0.1",
        "name": "timeout-api-cloudantNoSQLDB"
    },
    {
        "id": "fb3b3fd8.2739",
        "type": "ui_form",
        "z": "662b971b.e02a68",
        "name": "User Form",
        "label": "",
        "group": "c9b5c240.9166e",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "First Name",
                "value": "f_name",
                "type": "text",
                "required": false
            },
            {
                "label": "Last Name",
                "value": "l_name",
                "type": "text",
                "required": false
            },
            {
                "label": "Email",
                "value": "email",
                "type": "email",
                "required": true
            },
            {
                "label": "Phone",
                "value": "phone",
                "type": "number",
                "required": true
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true
            }
        ],
        "formValue": {
            "_id": "",
            "f_name": "",
            "l_name": "",
            "email": "",
            "phone": "",
            "password": ""
        },
        "payload": "",
        "topic": "user_form_data",
        "x": 95,
        "y": 71,
        "wires": [
            [
                "5cd0ae1f.4dd47"
            ]
        ]
    },
    {
        "id": "5cd0ae1f.4dd47",
        "type": "change",
        "z": "662b971b.e02a68",
        "name": "Move to User_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 202,
        "y": 298,
        "wires": [
            [
                "19bac9c9.70f2f6"
            ]
        ]
    },
    {
        "id": "19bac9c9.70f2f6",
        "type": "function",
        "z": "662b971b.e02a68",
        "name": "Merge",
        "func": "\nif(msg.user_data){\n    if(msg.user_data._id){\n        msg.status = \"find_from_db\";\n        msg.payload = {\"_id\": msg.user_data._id};\n    }else{\n        msg.status = \"save_into_db\";\n        msg.payload = {\n            long_url            : null,\n            access_token        : access_token(),\n            security_level      : msg.user_data.security_level || 0,\n            virtual_phone       : msg.user_data.phone,\n            email               : msg.user_data.email,\n            converstation_id    : null,\n            firstname           : msg.user_data.f_name,\n            lastname            : msg.user_data.l_name,\n            code                : null,\n            password            : msg.user_data.password,\n            image               : msg.user_data.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\"\n        };\n    }\n}\n\nreturn msg;\n\nfunction rand() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n}\n\nfunction time() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n}\n\nfunction access_token() {\n    return time()+'.'+rand(); // to make it longer\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 336,
        "y": 166,
        "wires": [
            [
                "472d2dc8.9e7c94"
            ]
        ]
    },
    {
        "id": "472d2dc8.9e7c94",
        "type": "switch",
        "z": "662b971b.e02a68",
        "name": "Switch",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_from_db",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_into_db",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 437,
        "y": 297,
        "wires": [
            [
                "10385e2f.abcb02"
            ],
            [
                "a05e2317.d1831"
            ]
        ]
    },
    {
        "id": "a05e2317.d1831",
        "type": "cloudant out",
        "z": "662b971b.e02a68",
        "name": "Save User to database",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 733,
        "y": 393,
        "wires": []
    },
    {
        "id": "10385e2f.abcb02",
        "type": "cloudant in",
        "z": "662b971b.e02a68",
        "name": "Get user by Id",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 565,
        "y": 166,
        "wires": [
            [
                "41d2efbd.820e5"
            ]
        ]
    },
    {
        "id": "41d2efbd.820e5",
        "type": "change",
        "z": "662b971b.e02a68",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 727,
        "y": 64,
        "wires": [
            [
                "35dc3ff9.b4b05"
            ]
        ]
    },
    {
        "id": "35dc3ff9.b4b05",
        "type": "function",
        "z": "662b971b.e02a68",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, form_data = msg.user_data, payload = {};\n\nif(check_obj(db_data) > 0){\n    payload = {\n        _id : db_data._id,\n        _rev : db_data._rev,\n        long_url : form_data.long_url || db_data.long_url,\n        access_token : access_token(),\n        security_level : form_data.security_level || db_data.security_level,\n        virtual_phone: form_data.phone || db_data.phone,\n        email: form_data.email || db_data.email,\n        converstation_id : form_data.converstation_id || db_data.converstation_id,\n        firstname : form_data.f_name || db_data.first_name,\n        lastname: form_data.l_name || db_data.last_name ,\n        code: form_data.code || db_data.code ,\n        password: form_data.password || db_data.password,\n        type: {\"public\": \"public\"},\n        image: form_data.image || \"img/default.png\"\n    };\n}else{\n    payload = {\n        long_url : form_data.long_url ,\n        access_token : access_token(),\n        security_level : 1,\n        virtual_phone: form_data.phone,\n        email: form_data.email,\n        converstation_id : form_data.converstation_id,\n        first_name : form_data.f_name,\n        last_name: form_data.l_name,\n        code: form_data.code,\n        password: form_data.password,\n        type: {\"public\": \"public\"},\n        image: form_data.image || \"img/default.png\"\n    };\n}\n\nmsg.payload = payload ;\nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n\nfunction rand() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n}\n\nfunction time() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n}\n\nfunction access_token() {\n    return time()+'.'+rand(); // to make it longer\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 737,
        "y": 294,
        "wires": [
            [
                "a05e2317.d1831"
            ]
        ]
    },
    {
        "id": "edf0f2a0.91cdb",
        "type": "ui_form",
        "z": "30b56e49.7dc182",
        "name": "Location Form ",
        "label": "",
        "group": "9245592b.d1e4f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true
            },
            {
                "label": "Type",
                "value": "type",
                "type": "text",
                "required": true
            },
            {
                "label": "Latitude",
                "value": "lat",
                "type": "text",
                "required": true
            },
            {
                "label": "Longitutude",
                "value": "lon",
                "type": "text",
                "required": true
            },
            {
                "label": "Distance",
                "value": "dist",
                "type": "number",
                "required": false
            },
            {
                "label": "Web Url",
                "value": "web",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "name": "",
            "type": "",
            "lat": "",
            "lon": "",
            "dist": "",
            "web": ""
        },
        "payload": "",
        "topic": "location_from_data",
        "x": 94,
        "y": 64,
        "wires": [
            [
                "e50e51f9.a80fb"
            ]
        ]
    },
    {
        "id": "e50e51f9.a80fb",
        "type": "change",
        "z": "30b56e49.7dc182",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 192,
        "y": 218,
        "wires": [
            [
                "9206f563.2f9c48"
            ]
        ]
    },
    {
        "id": "9206f563.2f9c48",
        "type": "function",
        "z": "30b56e49.7dc182",
        "name": "Merge",
        "func": "if(msg.location_data){\n    if(msg.location_data._id){\n        msg.status = \"find_from_db\";\n        msg.payload = {\"_id\": msg.location_data._id};\n    }else{\n        msg.status = \"save_into_db\";\n        msg.payload = {\n            location_name : msg.location_data.name,\n            location_type : msg.location_data.type,\n            location_data : {\n                lat : msg.location_data.lat ? Number(msg.location_data.lat) : 0,\n                lon : msg.location_data.lon ? Number(msg.location_data.lon) : 0,\n                dist: msg.location_data.dist ? Number(msg.location_data.dist) : 0,\n                web: msg.location_data.web\n            }\n        };\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 327,
        "y": 135,
        "wires": [
            [
                "9007f34d.96a0e"
            ]
        ]
    },
    {
        "id": "9007f34d.96a0e",
        "type": "switch",
        "z": "30b56e49.7dc182",
        "name": "Switch",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_from_db",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_into_db",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 421,
        "y": 278,
        "wires": [
            [
                "9bd84e9d.8d399"
            ],
            [
                "12b05c4.51a23a4"
            ]
        ]
    },
    {
        "id": "12b05c4.51a23a4",
        "type": "cloudant out",
        "z": "30b56e49.7dc182",
        "name": "Save to Database",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 717,
        "y": 510,
        "wires": []
    },
    {
        "id": "9bd84e9d.8d399",
        "type": "cloudant in",
        "z": "30b56e49.7dc182",
        "name": "Get Loation by Id",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 539,
        "y": 145,
        "wires": [
            [
                "33360866.80edb8"
            ]
        ]
    },
    {
        "id": "33360866.80edb8",
        "type": "change",
        "z": "30b56e49.7dc182",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 714,
        "y": 55,
        "wires": [
            [
                "1f9f7129.cf579f"
            ]
        ]
    },
    {
        "id": "1f9f7129.cf579f",
        "type": "function",
        "z": "30b56e49.7dc182",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, form_data = msg.location_data, payload = {};\n\nif(check_obj(db_data) > 0){\n    payload = {\n        _id : db_data._id,\n        _rev : db_data._rev,\n        location_name : form_data.name || db_data.location_name,\n        location_type : form_data.type || db_data.location_type,\n        location_data : {\n            lat : form_data.lat || db_data.location_data.lat,\n            lon : form_data.lon || db_data.location_data.lon,\n            dist: form_data.dist || db_data.location_data.dist,\n            web: form_data.web || db_data.location_data.web\n        }\n    };\n}else{\n    payload = {\n        location_name : form_data.name,\n        location_type : form_data.type,\n        location_data : {\n            lat : form_data.lat,\n            lon : form_data.lon,\n            dist: form_data.dist,\n            web: form_data.web\n        }\n    };\n}\n\nmsg.payload = payload ;\nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 672,
        "y": 237,
        "wires": [
            [
                "12b05c4.51a23a4"
            ]
        ]
    },
    {
        "id": "d72e917a.2ead1",
        "type": "ui_form",
        "z": "7d73ba45.c80ab4",
        "name": "Template Form",
        "label": "",
        "group": "4d3cad8b.f40864",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true
            },
            {
                "label": "HTML",
                "value": "html",
                "type": "text",
                "required": false
            },
            {
                "label": "Js",
                "value": "js",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "name": "",
            "html": "",
            "js": ""
        },
        "payload": "",
        "topic": "template_form_data",
        "x": 95,
        "y": 150,
        "wires": [
            [
                "7f2f58c9.0f13d8"
            ]
        ]
    },
    {
        "id": "7f2f58c9.0f13d8",
        "type": "change",
        "z": "7d73ba45.c80ab4",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "template_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 166,
        "y": 247,
        "wires": [
            [
                "8576d2b2.a4046"
            ]
        ]
    },
    {
        "id": "8576d2b2.a4046",
        "type": "function",
        "z": "7d73ba45.c80ab4",
        "name": "Merge",
        "func": "if(msg.template_data){\n    if(msg.template_data._id){\n        msg.status = \"find_from_db\";\n        msg.payload = {\"_id\": msg.template_data._id};\n    }else{\n        msg.status = \"save_into_db\";\n        msg.payload = {\n            name        : msg.template_data.name || \"\",\n            html        : msg.template_data.html || \"\",\n            js          : msg.template_data.js   || \"\"\n        };\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 306,
        "y": 90,
        "wires": [
            [
                "f477ee9d.10865"
            ]
        ]
    },
    {
        "id": "f477ee9d.10865",
        "type": "switch",
        "z": "7d73ba45.c80ab4",
        "name": "Switch",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_from_db",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_into_db",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 404,
        "y": 246,
        "wires": [
            [
                "e8918fe4.7a611"
            ],
            [
                "fc25bd10.3588e"
            ]
        ]
    },
    {
        "id": "fc25bd10.3588e",
        "type": "cloudant out",
        "z": "7d73ba45.c80ab4",
        "name": "Save to Database",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 770,
        "y": 458,
        "wires": []
    },
    {
        "id": "e8918fe4.7a611",
        "type": "cloudant in",
        "z": "7d73ba45.c80ab4",
        "name": "Get Template by Id",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 508,
        "y": 148,
        "wires": [
            [
                "3609659.cbe2e9a"
            ]
        ]
    },
    {
        "id": "3609659.cbe2e9a",
        "type": "change",
        "z": "7d73ba45.c80ab4",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 672,
        "y": 47,
        "wires": [
            [
                "e140c976.105978"
            ]
        ]
    },
    {
        "id": "e140c976.105978",
        "type": "function",
        "z": "7d73ba45.c80ab4",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, form_data = msg.template_data, payload = {};\n\nif(check_obj(db_data) > 0){\n    payload = {\n        _id : db_data._id,\n        _rev : db_data._rev,\n        template_id : form_data.template_id || db_data.template_id,\n        name        : form_data.name || db_data.name,\n        html        : form_data.html || db_data.html,\n        js          : form_data.js   || db_data.js\n    };\n}else{\n    payload = {\n        template_id : form_data.template_id,\n        name        : form_data.name,\n        html        : form_data.html,\n        js          : form_data.js \n    };\n}\n\nmsg.payload = payload ;\nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 663,
        "y": 243,
        "wires": [
            [
                "fc25bd10.3588e"
            ]
        ]
    },
    {
        "id": "8246f8b3.60a1a8",
        "type": "ui_form",
        "z": "57a35ec7.3182f",
        "name": "Timeout Screen",
        "label": "",
        "group": "e90a8654.6407c8",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true
            },
            {
                "label": "Delivery Count",
                "value": "delivery_count",
                "type": "number",
                "required": false
            },
            {
                "label": "Delivery Status",
                "value": "delivery_status",
                "type": "text",
                "required": false
            },
            {
                "label": "Delivery Due",
                "value": "delivery_due",
                "type": "text",
                "required": false
            },
            {
                "label": "Delivery User Id",
                "value": "delivery_user_ids",
                "type": "text",
                "required": false
            },
            {
                "label": "Delivery Via",
                "value": "delivery_via",
                "type": "text",
                "required": false
            },
            {
                "label": "Delivery Task Id",
                "value": "delivery_task_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Message Id",
                "value": "message_id",
                "type": "text",
                "required": false
            },
            {
                "label": "From User",
                "value": "from_user_id",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "name": "",
            "delivery_count": "",
            "delivery_status": "",
            "delivery_due": "",
            "delivery_user_ids": "",
            "delivery_via": "",
            "delivery_task_id": "",
            "message_id": "",
            "from_user_id": ""
        },
        "payload": "",
        "topic": "timeout_data",
        "x": 101,
        "y": 107,
        "wires": [
            [
                "aa7e5fdb.c0f59"
            ]
        ]
    },
    {
        "id": "aa7e5fdb.c0f59",
        "type": "change",
        "z": "57a35ec7.3182f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 195,
        "y": 185,
        "wires": [
            [
                "be144762.cf97b8"
            ]
        ]
    },
    {
        "id": "be144762.cf97b8",
        "type": "function",
        "z": "57a35ec7.3182f",
        "name": "Merge",
        "func": "if(msg.timeout_data){\n    if(msg.timeout_data._id){\n        msg.status = \"find_from_db\";\n        msg.payload = {_id: msg.timeout_data._id};\n    }else{\n        msg.status = \"save_into_db\";\n        msg.payload = {\n            name: msg.timeout_data.name || null,\n            timeout_list: create_delivery_obj(msg) \n        };\n    }\n}\n\nreturn msg;\n\nfunction create_delivery_obj(msg){\n    var obj = {};\n    var user_id = msg.timeout_data.delivery_user_ids ? msg.timeout_data.delivery_user_ids.split(',') : null;\n    \n    for(var i=0; i < msg.timeout_data.delivery_count; i++){\n        obj[i] = {\n            delivery_count      : i , \n            delivery_status     : msg.timeout_data.delivery_status || false, \n            delivery_due        : msg.timeout_data.delivery_due || new Date.toJSON(),\n            delivery_user_ids   : user_id[i] ? user_id[i] : msg.timeout_data.delivery_user_ids,\n            delivery_via        : msg.timeout_data.delivery_via || null,\n            delivery_task_id    : msg.timeout_data.delivery_task_id || null,\n            delivery_task_name  : msg.timeout_data.delivery_task_name || null, \n            message_id          : msg.timeout_data.message_id || null,\n            from_user_id        : msg.timeout_data.from_user_id || null\n        };\n    }\n    return obj ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 327,
        "y": 87,
        "wires": [
            [
                "29b6e122.4b2bce"
            ]
        ]
    },
    {
        "id": "29b6e122.4b2bce",
        "type": "switch",
        "z": "57a35ec7.3182f",
        "name": "Switch",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_from_db",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_into_db",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 372,
        "y": 244,
        "wires": [
            [
                "e4d4e90f.c5d258"
            ],
            [
                "a1ed3625.da5a58",
                "d572bac9.90a018"
            ]
        ]
    },
    {
        "id": "e4d4e90f.c5d258",
        "type": "cloudant in",
        "z": "57a35ec7.3182f",
        "name": "Get Timeout by Id",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 534,
        "y": 56,
        "wires": [
            [
                "b91b17f7.643568"
            ]
        ]
    },
    {
        "id": "b91b17f7.643568",
        "type": "change",
        "z": "57a35ec7.3182f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 658,
        "y": 133,
        "wires": [
            [
                "a7cfdad4.e6cec8"
            ]
        ]
    },
    {
        "id": "a7cfdad4.e6cec8",
        "type": "function",
        "z": "57a35ec7.3182f",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, form_data = msg.timeout_data, payload = {};\n\nif(check_obj(db_data) > 0){\n    payload = {\n        _id : db_data._id,\n        _rev : db_data._rev,\n        name: form_data.name || db_data.name,\n        timeout_list: create_delivery_obj(msg) \n    };\n}else{\n    payload = {\n        name: form_data.name ,\n        timeout_list: create_delivery_obj(msg) \n    };\n    \n}\n\nmsg.payload = payload ;\nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n\n\nfunction create_delivery_obj(msg){\n    var obj = {};\n    var user_id = msg.timeout_data.delivery_user_ids.split(',') ;\n    \n    for(var i=0; i < msg.timeout_data.delivery_count; i++){\n        obj[i] = {\n            delivery_count      : i , \n            delivery_status     : msg.timeout_data.delivery_status, \n            delivery_due        : msg.timeout_data.delivery_due,\n            delivery_user_ids   : user_id[i] ? user_id[i] : msg.timeout_data.delivery_user_ids,\n            delivery_via        : msg.timeout_data.delivery_via,\n            delivery_task_id    : msg.timeout_data.delivery_task_id,\n            delivery_task_name  : msg.timeout_data.delivery_task_name, \n            message_id          : msg.timeout_data.message_id,\n            from_user_id        : msg.timeout_data.from_user_id  \n        };\n    }\n    \n    return obj ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 643,
        "y": 234,
        "wires": [
            [
                "d572bac9.90a018"
            ]
        ]
    },
    {
        "id": "d572bac9.90a018",
        "type": "cloudant out",
        "z": "57a35ec7.3182f",
        "name": "Save to Database",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 763,
        "y": 392,
        "wires": []
    },
    {
        "id": "8dc4d9aa.6f1bd8",
        "type": "ui_form",
        "z": "a164a1e3.d69",
        "name": "Detail Screen",
        "label": "",
        "group": "e8b5a7d3.af2da8",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Task Id",
                "value": "task_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Child Task Id",
                "value": "child_task_id",
                "type": "text",
                "required": false
            },
            {
                "label": "User Id",
                "value": "user_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Page Id",
                "value": "page_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Synchronized",
                "value": "synchronized",
                "type": "text",
                "required": false
            },
            {
                "label": "Processed",
                "value": "processed",
                "type": "text",
                "required": false
            },
            {
                "label": "Status",
                "value": "status",
                "type": "text",
                "required": false
            },
            {
                "label": "Read",
                "value": "read",
                "type": "text",
                "required": false
            },
            {
                "label": "Display If Empty",
                "value": "display_if_empty",
                "type": "text",
                "required": false
            },
            {
                "label": "Due Date",
                "value": "due_date",
                "type": "text",
                "required": false
            },
            {
                "label": "Offline Expiration Seconds",
                "value": "offline_expiration_seconds",
                "type": "number",
                "required": false
            },
            {
                "label": "Priority",
                "value": "priority",
                "type": "number",
                "required": false
            },
            {
                "label": "Message",
                "value": "message",
                "type": "text",
                "required": false
            },
            {
                "label": "Template Id",
                "value": "template_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Timeout Id",
                "value": "timeout_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Location  Ids (add multiple ids seprated by comma)",
                "value": "location_id",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "task_id": "",
            "child_task_id": "",
            "user_id": "",
            "page_id": "",
            "synchronized": "",
            "processed": "",
            "status": "",
            "read": "",
            "display_if_empty": "",
            "due_date": "",
            "offline_expiration_seconds": "",
            "priority": "",
            "message": "",
            "template_id": "",
            "timeout_id": "",
            "location_id": ""
        },
        "payload": "",
        "topic": "details_data",
        "x": 92,
        "y": 50,
        "wires": [
            [
                "d2244926.36ea98"
            ]
        ]
    },
    {
        "id": "d2244926.36ea98",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "Splitter",
        "func": "var payload = {};\n\nif(msg.payload){\n    \n    if(msg.payload._id){\n        msg.event_type = \"update_record_db\";\n        msg.form_data = {\n            detail_id: msg.payload.detail_id,\n            task_id: msg.payload.task_id,\n            child_task_id: msg.payload.child_task_id,\n            user_id: msg.payload.user_id,\n            page_id: msg.payload.page_id,\n            synchronized: msg.payload.synchronized,\n            processed: msg.payload.processed,\n            status: msg.payload.status,\n            read: msg.payload.read,\n            display_if_empty: msg.payload.display_if_empty,\n            due_date: msg.payload.due_date,\n            offline_expiration_seconds: msg.payload.offline_expiration_seconds,\n            priority: msg.payload.priority,\n            message: msg.payload.message,\n        };\n        payload = {\n            _id : msg.payload._id \n        };\n    }else{\n        payload = {\n            detail_id: msg.payload.detail_id,\n            task_id: msg.payload.task_id,\n            child_task_id: msg.payload.child_task_id,\n            user_id: msg.payload.user_id,\n            page_id: msg.payload.page_id,\n            synchronized: msg.payload.synchronized,\n            processed: msg.payload.processed,\n            status: msg.payload.status,\n            read: msg.payload.read,\n            display_if_empty: msg.payload.display_if_empty,\n            due_date: msg.payload.due_date,\n            offline_expiration_seconds: msg.payload.offline_expiration_seconds,\n            priority: msg.payload.priority,\n            message: msg.payload.message,\n        };\n    }\n\n\n    if(msg.payload.user_id){\n    \tmsg.payload_user_id =  {_id : msg.payload.user_id };\n    }\n    \n    if(msg.payload.template_id){\n    \tmsg.payload_template_id =  {_id: msg.payload.template_id};\n    }\n    \n    if(msg.payload.timeout_id){\n    \tmsg.payload_timeout_id =  {_id: msg.payload.timeout_id};\n    }\n    \n    if(msg.payload.location_id){\n    \tmsg.payload_location_id =  msg.payload.location_id;\n    }\n}\n\nmsg.payload = payload ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 139,
        "y": 156,
        "wires": [
            [
                "ea650efc.159a3"
            ]
        ]
    },
    {
        "id": "de6c3f71.58e29",
        "type": "change",
        "z": "a164a1e3.d69",
        "name": "msg.detail_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 442,
        "y": 172,
        "wires": [
            [
                "1175339a.ee85ec"
            ]
        ]
    },
    {
        "id": "d95bbacc.b798d8",
        "type": "cloudant in",
        "z": "a164a1e3.d69",
        "name": "Users",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 539,
        "y": 327,
        "wires": [
            [
                "34f33d78.c46b52"
            ]
        ]
    },
    {
        "id": "2bbd7671.dae3aa",
        "type": "cloudant in",
        "z": "a164a1e3.d69",
        "name": "Template",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 556,
        "y": 394,
        "wires": [
            [
                "f9b13825.4e29c8"
            ]
        ]
    },
    {
        "id": "884eda73.21f2a8",
        "type": "cloudant in",
        "z": "a164a1e3.d69",
        "name": "Timeout",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 583,
        "y": 466,
        "wires": [
            [
                "453a28f9.dbe308"
            ]
        ]
    },
    {
        "id": "89eb874e.849e78",
        "type": "cloudant in",
        "z": "a164a1e3.d69",
        "name": "Location",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 384,
        "y": 514,
        "wires": [
            [
                "21b85110.acff7e"
            ]
        ]
    },
    {
        "id": "a3d45d79.bdf0c",
        "type": "cloudant in",
        "z": "a164a1e3.d69",
        "name": "Update",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 420,
        "y": 97,
        "wires": [
            [
                "c483d6a5.f78598"
            ]
        ]
    },
    {
        "id": "6de5773f.ed5508",
        "type": "change",
        "z": "a164a1e3.d69",
        "name": "User",
        "rules": [
            {
                "t": "move",
                "p": "payload_user_id",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 391,
        "y": 325,
        "wires": [
            [
                "d95bbacc.b798d8"
            ]
        ]
    },
    {
        "id": "7988c5c.a6c213c",
        "type": "change",
        "z": "a164a1e3.d69",
        "name": "Template",
        "rules": [
            {
                "t": "move",
                "p": "payload_template_id",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 393,
        "y": 392,
        "wires": [
            [
                "2bbd7671.dae3aa"
            ]
        ]
    },
    {
        "id": "9c7fa3e0.5e32e",
        "type": "change",
        "z": "a164a1e3.d69",
        "name": "Timeout",
        "rules": [
            {
                "t": "move",
                "p": "payload_timeout_id",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 464,
        "wires": [
            [
                "884eda73.21f2a8"
            ]
        ]
    },
    {
        "id": "8ca1a712.78c698",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "Merge",
        "func": "var payload         = {detail_id: null,task_id: null,child_task_id: null,user_id: null,page_id: null,synchronized: null,\n        processed: null,status: null,read: null,display_if_empty: null,\n        due_date: null,offline_expiration_seconds: null,priority: null,\n        user_incoming : {},watson_incoming: {},message: null,template: {detail: {}},\n        timeout: {},user_calculated: {timeout: {},user: {},template: {}},location: {},defaults: {parent : null,all_children : null} } ;\n \nvar user_obj        = global.get('user_obj'),\n    template_obj    = global.get('template_obj'),\n    timeout_obj     = global.get('timeout_obj'),\n    location_obj    = global.get('location_obj'),\n    watson_obj      = global.get('watson_obj'),\n    detail_obj      = msg.detail_data ;\n\n\tpayload = {\n\t\ttask_id: detail_obj.task_id,\n\t\tchild_task_id: detail_obj.child_task_id,\n\t\tuser_id: detail_obj.user_id,\n\t\tpage_id: detail_obj.page_id || false ,\n\t\tsynchronized: detail_obj.synchronized || false,\n\t\tprocessed: detail_obj.processed || true,\n\t\tstatus: detail_obj.status || true,\n\t\tread: detail_obj.read || false,\n\t\tdisplay_if_empty: detail_obj.display_if_empty || true,\n\t\tdate_created : new Date().toJSON() , \n\t\tdue_date: detail_obj.due_date || new Date().toJSON(),\n\t\toffline_expiration_seconds: detail_obj.offline_expiration_seconds || 0,\n\t\tpriority: detail_obj.priority || 1,\n\t\tuser_incoming : user_obj || {},\n\t\twatson_incoming: watson_obj || {},\n\t\tmessage: detail_obj.message || null,\n\t\ttemplate: {\n\t\t\tdetail: template_obj || {}\n\t\t},\n\t\ttimeout: create_timeout_obj(timeout_obj, user_obj, template_obj),\n\t\tuser_calculated: {\n\t\t\ttimeout: create_timeout_obj(timeout_obj, user_obj, template_obj),\n\t\t\ttemplate: template_obj || {}\n\t\t},\n\t\tlocation: location_obj,\n\t\tdefaults: {\n\t\t\tparent          : null,\n\t\t\tall_children    : null\n\t\t}\n\t};\n\nmsg.payload = payload ;   \nreturn msg;\n\n\nfunction create_timeout_obj(timeout_obj, user_obj, template_obj){\n\tvar timeout_list = timeout_obj.timeout_list ; \n\tfor(var key in timeout_list){\n\t\tif(key){\n\t\t\ttimeout_list[key].users = create_user_obj(user_obj);\n\t\t\ttimeout_list[key].template = {\n        \t    message : template_obj,\n        \t    from    : template_obj\n        \t};\n\t\t}\n\t}\n\treturn timeout_obj ;\n}\n\nfunction create_user_obj(user_obj){\n\tvar obj = {};\n\tif(user_obj){\n\t    obj[user_obj._id] = user_obj ;\n\t    return obj ;\n\t}else{\n\t    return obj ;\n\t}\n\t\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 157,
        "wires": [
            [
                "734e559b.c5b63c",
                "68308415.478efc",
                "4bf154d5.8ba0fc"
            ]
        ]
    },
    {
        "id": "ea650efc.159a3",
        "type": "switch",
        "z": "a164a1e3.d69",
        "name": "",
        "property": "event_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update_record_db",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 173,
        "y": 270,
        "wires": [
            [
                "a3d45d79.bdf0c",
                "6de5773f.ed5508",
                "7988c5c.a6c213c",
                "9c7fa3e0.5e32e",
                "89eb874e.849e78",
                "b7df372d.911348"
            ],
            [
                "6de5773f.ed5508",
                "7988c5c.a6c213c",
                "9c7fa3e0.5e32e",
                "de6c3f71.58e29",
                "89eb874e.849e78",
                "b7df372d.911348"
            ]
        ]
    },
    {
        "id": "34f33d78.c46b52",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "user",
        "func": "global.set('user_obj', \"\");\nglobal.set('user_obj', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 739,
        "y": 324,
        "wires": [
            [
                "1796c3c1.417b9c"
            ]
        ]
    },
    {
        "id": "f9b13825.4e29c8",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "template",
        "func": "global.set('template_obj', \"\");\nglobal.set('template_obj', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 737,
        "y": 392,
        "wires": [
            [
                "5a2fbb26.9e8d04"
            ]
        ]
    },
    {
        "id": "453a28f9.dbe308",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "timeout",
        "func": "global.set('timeout_obj', \"\");\nglobal.set('timeout_obj', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 757,
        "y": 452,
        "wires": [
            [
                "aaa2998.0107868"
            ]
        ]
    },
    {
        "id": "21b85110.acff7e",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "location",
        "func": "var locationArr     = msg.payload ;\n    locations       = [] ;\n    location_ids    = msg.payload_location_id ? sanitizeString(msg.payload_location_id) : null;    \n\n    for(var i=0; i< locationArr.length; i++){\n        if(location_ids !== null){\n            if(location_ids.indexOf(locationArr[i]._id) > -1 ) {\n                locations.push(locationArr[i]);\n            }\n        }\n    }\n\nglobal.set('location_obj', \"\");\nglobal.set('location_obj', create_location_obj(locations));\nreturn msg;\n\nfunction sanitizeString(str){\n    if(str || str !== undefined){\n        var arr = str.split(',');\n        for(var i=0; i< arr.length; i++){\n            arr[i] = arr[i].trim();\n        }\n        return arr ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_location_obj(locations){\n    var obj = {} ;\n    \n    for(var i=0; i< location.length; i++){\n        if(location[i]._id){\n            obj[location[i]._id] = location[i] ;\n        }\n    }\n    \n    return obj ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 767,
        "y": 530,
        "wires": [
            [
                "8b215049.3db0e"
            ]
        ]
    },
    {
        "id": "734e559b.c5b63c",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "Merge Log",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 1119,
        "y": 252,
        "wires": []
    },
    {
        "id": "2a9f0d4c.d721a2",
        "type": "cloudant out",
        "z": "a164a1e3.d69",
        "name": "Save Details into db",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1143,
        "y": 66,
        "wires": []
    },
    {
        "id": "1175339a.ee85ec",
        "type": "delay",
        "z": "a164a1e3.d69",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 659,
        "y": 169,
        "wires": [
            [
                "8ca1a712.78c698"
            ]
        ]
    },
    {
        "id": "a870d7d6.07ae98",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "Update merge",
        "func": "var payload         = {detail_id: null,task_id: null,child_task_id: null,user_id: null,page_id: null,synchronized: null,\n        processed: null,status: null,read: null,display_if_empty: null,\n        due_date: null,offline_expiration_seconds: null,priority: null,\n        user_incoming : {},watson_incoming: {},message: null,template: {detail: {}},\n        timeout: {},user_calculated: {timeout: {},user: {},template: {}},location: {},defaults: {parent : null,all_children : null} } ;\n \nvar user_obj        = global.get('user_obj'),\n    template_obj    = global.get('template_obj'),\n    timeout_obj     = global.get('timeout_obj'),\n    location_obj    = global.get('location_obj'),\n    watson_obj      = global.get('watson_obj'),\n    detail_obj      = msg.form_data ,\n    update_obj      = msg.payload;\n\n    if(update_obj){\n       \n        payload = {\n            _id                         : update_obj._id,\n            _rev                        : update_obj._rev,\n    \t\tdetail_id                   : detail_obj.detail_id                  || update_obj.detail_id,\n    \t\ttask_id                     : detail_obj.task_id                    || update_obj.task_id,\n    \t\tchild_task_id               : detail_obj.child_task_id              || update_obj.child_task_id,\n    \t\tuser_id                     : detail_obj.user_id                    || update_obj.user_id,\n    \t\tpage_id                     : detail_obj.page_id                    || update_obj.page_id,\n    \t\tsynchronized                : detail_obj.synchronized               || update_obj.synchronized,\n    \t\tprocessed                   : detail_obj.processed                  || update_obj.processed,\n    \t\tstatus                      : detail_obj.status                     || update_obj.status,\n\t        read                        : detail_obj.read                       || update_obj.read,\n    \t\tdisplay_if_empty            : detail_obj.display_if_empty           || update_obj.display_if_empty,    \n\t\t    due_date                    : detail_obj.due_date                   || update_obj.due_date,                \n    \t\toffline_expiration_seconds  : detail_obj.offline_expiration_seconds || update_obj.offline_expiration_seconds,      \n    \t\tpriority                    : detail_obj.priority                   || update_obj.priority,    \n    \t\tuser_incoming               : user_obj || {},                              \n    \t\twatson_incoming             : watson_obj || {},\n    \t\tmessage                     : detail_obj.message                    || update_obj.message,    \n    \t\ttemplate                    : {\n    \t\t\t                            detail: template_obj || {}                 \n\t\t                                  },\n    \t\ttimeout                     : create_timeout_obj(timeout_obj, user_obj, template_obj),\n\t\t    user_calculated             :{\n    \t\t\t                            timeout: create_timeout_obj(timeout_obj, user_obj, template_obj),                \n                                \t\t\ttemplate: template_obj || {}             \n\t\t                                },\n    \t\tlocation                    : location_obj || {},                          \n    \t\tdefaults                    : {\n                                \t\t\tparent          : null,\n                                \t\t\tall_children    : null\n    \t\t                            }\n    \t};\n    }else{\n        payload = {\n    \t\tdetail_id: detail_obj.detail_id,\n    \t\ttask_id: detail_obj.task_id,\n    \t\tchild_task_id: detail_obj.child_task_id,\n    \t\tuser_id: detail_obj.user_id,\n    \t\tpage_id: detail_obj.page_id,\n    \t\tsynchronized: detail_obj.synchronized,\n    \t\tprocessed: detail_obj.processed,\n    \t\tstatus: detail_obj.status,\n    \t\tread: detail_obj.read,\n    \t\tdisplay_if_empty: detail_obj.display_if_empty,\n    \t\tdue_date: detail_obj.due_date,\n    \t\toffline_expiration_seconds: detail_obj.offline_expiration_seconds,\n    \t\tpriority: detail_obj.priority,\n    \t\tuser_incoming : user_obj || {},\n    \t\twatson_incoming: watson_obj || {},\n    \t\tmessage: detail_obj.message,\n    \t\ttemplate: {\n    \t\t\tdetail: template_obj || {}\n    \t\t},\n    \t\ttimeout: create_timeout_obj(timeout_obj, user_obj, template_obj),\n    \t\tuser_calculated: {\n    \t\t\ttimeout: create_timeout_obj(timeout_obj, user_obj, template_obj),\n    \t\t\ttemplate: template_obj || {}\n    \t\t},\n    \t\tlocation: location_obj || {},\n    \t\tdefaults: {\n    \t\t\tparent          : null,\n    \t\t\tall_children    : null\n    \t\t}\n    \t};\n    }\nmsg.payload = payload ;    \nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    if(typeof obj == 'object'){\n        for(var keys in obj){\n            count++ ;\n        }\n    }\n    return count ;\n}\n\n\nfunction create_timeout_obj(timeout_obj, user_obj){\n\tvar timeout_list = timeout_obj.timeout_list ; \n\tfor(var key in timeout_list){\n\t\tif(key){\n\t\t\ttimeout_list[key].users = create_user_obj(user_obj);\n\t\t\ttimeout_list[key].template = {\n\t\t\t    message: template_obj,\n\t\t\t    from   : template_obj\n\t\t\t};\n\t\t}\n\t}\n\treturn timeout_obj ;\n}\n\nfunction create_user_obj(user_obj){\n\tvar obj = {};\n\tif(user_obj){\n\t    obj[user_obj._id] = user_obj ;\n\t    return obj ;\n\t}else{\n\t    return obj ;\n\t}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 865,
        "y": 62,
        "wires": [
            [
                "2a9f0d4c.d721a2",
                "f44ab8da.c70c28",
                "10f93335.5607ed"
            ]
        ]
    },
    {
        "id": "f44ab8da.c70c28",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1113,
        "y": 108,
        "wires": []
    },
    {
        "id": "4bf154d5.8ba0fc",
        "type": "cloudant out",
        "z": "a164a1e3.d69",
        "name": "Save Details into db",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1150,
        "y": 214,
        "wires": []
    },
    {
        "id": "68308415.478efc",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "reset",
        "func": "global.set('user_obj', \"\");\nglobal.set('template_obj', \"\");\nglobal.set('timeout_obj', \"\");\nglobal.set('location_obj', \"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1098,
        "y": 167,
        "wires": [
            []
        ]
    },
    {
        "id": "c483d6a5.f78598",
        "type": "delay",
        "z": "a164a1e3.d69",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 645,
        "y": 84,
        "wires": [
            [
                "a870d7d6.07ae98"
            ]
        ]
    },
    {
        "id": "10f93335.5607ed",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "reset",
        "func": "global.set('user_obj', \"\");\nglobal.set('template_obj', \"\");\nglobal.set('timeout_obj', \"\");\nglobal.set('location_obj', \"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1094,
        "y": 29,
        "wires": [
            []
        ]
    },
    {
        "id": "a1ed3625.da5a58",
        "type": "debug",
        "z": "57a35ec7.3182f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 592,
        "y": 490,
        "wires": []
    },
    {
        "id": "8b215049.3db0e",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 924,
        "y": 530,
        "wires": []
    },
    {
        "id": "aaa2998.0107868",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 940,
        "y": 455,
        "wires": []
    },
    {
        "id": "5a2fbb26.9e8d04",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 918,
        "y": 400,
        "wires": []
    },
    {
        "id": "1796c3c1.417b9c",
        "type": "debug",
        "z": "a164a1e3.d69",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 957,
        "y": 328,
        "wires": []
    },
    {
        "id": "b7df372d.911348",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "build_watson_data",
        "func": "msg = {\n  payload : \"The Lean\" ,\n  params : {\n    workspace_id : \"42015e53-bdb9-4a23-87b5-f382d5e12dbb\",\n    username     : \"4db58c57-6d89-4382-9d34-c4044b5fce11\",\n    password     : \"eG0ctZRJO42s\"\n  }\n};\nmsg.user = msg.payload_user_id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 585,
        "wires": [
            [
                "e3942d2a.7c15d"
            ]
        ]
    },
    {
        "id": "e3942d2a.7c15d",
        "type": "watson-conversation-v1",
        "z": "a164a1e3.d69",
        "name": "",
        "workspaceid": "",
        "multiuser": true,
        "context": true,
        "x": 628,
        "y": 599,
        "wires": [
            [
                "8b798794.66a778"
            ]
        ]
    },
    {
        "id": "8b798794.66a778",
        "type": "function",
        "z": "a164a1e3.d69",
        "name": "Watson",
        "func": "global.set('watson_obj', \"\");\nglobal.set('watson_obj', msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 819,
        "y": 604,
        "wires": [
            []
        ]
    },
    {
        "id": "33fb9251.e043ae",
        "type": "change",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 325,
        "y": 114,
        "wires": [
            [
                "ec78be59.3849f"
            ]
        ]
    },
    {
        "id": "ec78be59.3849f",
        "type": "cloudant in",
        "z": "d9e3488f.8f93b8",
        "name": "Locations",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 125,
        "y": 208,
        "wires": [
            [
                "1d35a4de.414d5b"
            ]
        ]
    },
    {
        "id": "1d35a4de.414d5b",
        "type": "change",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 328,
        "y": 206,
        "wires": [
            [
                "69ddc3eb.30f08c"
            ]
        ]
    },
    {
        "id": "69ddc3eb.30f08c",
        "type": "function",
        "z": "d9e3488f.8f93b8",
        "name": "Merge",
        "func": "if(msg.task_data){\n    if(msg.task_data._id){\n        msg.type_status = \"find_from_db\";\n        msg.payload = {\"_id\": msg.task_data._id};\n    }else{\n        msg.type_status = \"save_into_db\";\n        var page_id = generate_page_id(6);\n        \n        msg.payload = {\n            task_name               : msg.task_data.name || null, \n            page_id                 : page_id, \n            from_page_id            : page_id,\n            parent_id               : page_id, \n            user_id                 : msg.task_data.user_id || null,\n            header_template_id      : msg.task_data.header_template_id || null,\n            detail_template_id      : msg.task_data.details_template_id || null,\n            footer_template_id      : msg.task_data.footer_template_id || null,\n            timeout_id              : msg.task_data.timeout_id || null,\n            location_id             : msg.task_data.location_id ? create_location_obj(msg.task_data.location_id, msg.location_arr) : null,\n            child_default_task_id   : msg.task_data.child_defaults_task_id || null,\n            child_default_task_name : msg.task_data.child_default_task_name || null,\n            date_created            : msg.task_data.date_created || new Date().toJSON(),\n            status                  : msg.task_data.status || false,\n            category                : msg.task_data.category || null,\n            additional_data_fn      : msg.task_data.additional_data_fn || null,\n            optional_data           : msg.task_data.optional_data || {},\n            required_data           : msg.task_data.required_data || {},\n            offline_expiration_time : msg.task_data.offline_expiration_time || 0,\n            display_if_empty        : msg.task_data.display_if_empty || true ,\n            type                    : {\n                public              : msg.task_data.type  || \"public\"\n            },\n            image                   : msg.task_data.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n            count_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n            defaults                : {\n                parent              : null,\n                next_child          : null,\n                all_children        : null,\n                user                : msg.task_data.user_id\n            }\n            \n        };\n    }\n}\n\nreturn msg;\n\n\nfunction create_location_obj(loc_str, loc_arr){\n    var locations       = {} ;\n        location_ids    = loc_str ? sanitizeString(loc_str) : null;    \n    \n        for(var i=0; i< loc_arr.length; i++){\n            if(location_ids !== null){\n                if(location_ids.indexOf(loc_arr[i]._id) > -1 ) {\n                    locations[loc_arr[i]._id] = loc_arr[i] ;\n                }    \n            }\n        }\n    \n    return locations ;\n}\n\nfunction sanitizeString(str){\n    if(str || str !== undefined){\n        var arr = str.split(',');\n        for(var i=0; i< arr.length; i++){\n            arr[i] = arr[i].trim();\n        }\n        return arr ;\n    }else{\n        return false ;\n    }\n}\n\nfunction generate_page_id(length) {\n    return new Date().getTime();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 518,
        "y": 222,
        "wires": [
            [
                "fac660c4.d29f1"
            ]
        ]
    },
    {
        "id": "fac660c4.d29f1",
        "type": "switch",
        "z": "d9e3488f.8f93b8",
        "name": "Switch",
        "property": "type_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_from_db",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "save_into_db",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 149,
        "y": 296,
        "wires": [
            [
                "3393ecb0.bb4964"
            ],
            [
                "f9c68f40.b350d",
                "b2123a08.b67888",
                "5d5a3b7.c20e2c4"
            ]
        ]
    },
    {
        "id": "3393ecb0.bb4964",
        "type": "cloudant in",
        "z": "d9e3488f.8f93b8",
        "name": "Get task by Id",
        "cloudant": "",
        "database": "task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 362,
        "y": 292,
        "wires": [
            [
                "2d83c0c6.bca0a"
            ]
        ]
    },
    {
        "id": "2d83c0c6.bca0a",
        "type": "change",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 604,
        "y": 285,
        "wires": [
            [
                "fc370234.6a6cc"
            ]
        ]
    },
    {
        "id": "fc370234.6a6cc",
        "type": "function",
        "z": "d9e3488f.8f93b8",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, form_data = msg.task_data, payload = {};\n\nif(check_obj(db_data) > 0){\n    payload = {\n        _id : db_data._id,\n        _rev : db_data._rev,\n        user_id: form_data.user_id || db_data.user_id,\n        task_id: form_data.task_id || db_data.task_id,\n        page_id: db_data.page_id || generate_page_id(6),\n        header_template_id: form_data.header_template_id || db_data.header_template_id,\n        details_template_id: form_data.details_template_id || db_data.details_template_id,\n        footer_template_id: form_data.footer_template_id || db_data.footer_template_id,\n        timeout_id: form_data.timeout_id || db_data.timeout_id,\n        location_id: form_data.location_id ? create_location_obj(form_data.location_id, msg.location_arr) : db_data.location_id,\n        child_default_task_id: form_data.child_defaults_task_id || db_data.child_defaults_task_id,\n        date_created: form_data.date_created || db_data.date_created,\n        status: form_data.status || db_data.status,\n        category: form_data.category || db_data.category,\n        additional_data_fn: form_data.additional_data_fn || db_data.additional_data_fn,\n        optional_data: form_data.optional_data || db_data.optional_data,        \n        required_data: form_data.required_data || db_data.required_data,\n        offline_expiration_time: form_data.offline_expiration_time || db_data.offline_expiration_time,     \n        display_if_empty: form_data.display_if_empty || db_data.display_if_empty,\n        type: form_data.type || \"public\",\n        image: form_data.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n        count_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n        defaults                : {\n            parent              : null,\n            next_child          : null,\n            all_children        : null,\n            user                : form_data.user_id || db_data.user_id\n        }\n    };\n}else{\n    payload = {\n        user_id: form_data.user_id,\n        task_id: form_data.task_id,\n        page_id: generate_page_id(6),\n        header_template_id: form_data.header_template_id,\n        details_template_id: form_data.details_template_id,\n        footer_template_id: form_data.footer_template_id,\n        timeout_id: form_data.timeout_id,\n        location_id: create_location_obj(form_data.location_id, msg.location_arr),\n        child_default_task_id: form_data.child_defaults_task_id,\n        date_created: form_data.date_created,\n        status: form_data.status,\n        category: form_data.category,\n        additional_data_fn: form_data.additional_data_fn,\n        optional_data: form_data.optional_data,\n        required_data: form_data.required_data,\n        offline_expiration_time: form_data.offline_expiration_time,\n        display_if_empty: form_data.display_if_empty,\n        type: form_data.type || \"public\",\n        image: form_data.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n        count_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n        defaults                : {\n            parent              : null,\n            next_child          : null,\n            all_children        : null,\n            user                : form_data.user_id || db_data.user_id\n        }\n    };\n}\n\nmsg.payload = payload ;\nreturn msg;\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n\nfunction create_location_obj(loc_str, loc_arr){\n    var locations       = [] ;\n        location_ids    = loc_str ? sanitizeString(loc_str) : null;    \n    \n        for(var i=0; i< loc_arr.length; i++){\n            if(location_ids !== null){\n                if(location_ids.indexOf(loc_arr[i]._id) > -1 ) {\n                    locations.push(loc_arr[i]);\n                }    \n            }\n        }\n    \n    return locations ;\n}\n\nfunction sanitizeString(str){\n    if(str || str !== undefined){\n        var arr = str.split(',');\n        for(var i=0; i< arr.length; i++){\n            arr[i] = arr[i].trim();\n        }\n        return arr ;\n    }else{\n        return false ;\n    }\n}\n\nfunction generate_page_id(length) {\n    return new Date().getTime();\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 406,
        "y": 365,
        "wires": [
            [
                "f24c00c3.9ec8d",
                "f9c68f40.b350d"
            ]
        ]
    },
    {
        "id": "f9c68f40.b350d",
        "type": "cloudant out",
        "z": "d9e3488f.8f93b8",
        "name": "Save to Database",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 395,
        "y": 452,
        "wires": []
    },
    {
        "id": "c5826cfe.425e4",
        "type": "ui_form",
        "z": "d9e3488f.8f93b8",
        "name": "Task Screen",
        "label": "",
        "group": "d173f1a2.6f3b7",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": false
            },
            {
                "label": "User Id",
                "value": "user_id",
                "type": "text",
                "required": true
            },
            {
                "label": "Header Template Id",
                "value": "header_template_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Detail Template Id",
                "value": "details_template_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Footer Template Id",
                "value": "footer_template_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Timeout Id",
                "value": "timeout_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Location Id",
                "value": "location_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Child Deafult Task Id",
                "value": "child_default_task_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Child default task name",
                "value": "child_default_task_name",
                "type": "text",
                "required": false
            },
            {
                "label": "Date created",
                "value": "date_created",
                "type": "text",
                "required": false
            },
            {
                "label": "Status",
                "value": "status",
                "type": "text",
                "required": true
            },
            {
                "label": "Category",
                "value": "category",
                "type": "text",
                "required": true
            },
            {
                "label": "Additional_data_fn",
                "value": "additional_data_fn",
                "type": "text",
                "required": false
            },
            {
                "label": "Optional data",
                "value": "optional_data",
                "type": "text",
                "required": false
            },
            {
                "label": "Required data",
                "value": "required_data",
                "type": "text",
                "required": false
            },
            {
                "label": "Offline expiration time",
                "value": "offline_expiration_time",
                "type": "number",
                "required": false
            },
            {
                "label": "Display If empty",
                "value": "display_if_empty",
                "type": "text",
                "required": false
            },
            {
                "label": "Type",
                "value": "type",
                "type": "text",
                "required": false
            },
            {
                "label": "Image",
                "value": "image",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "name": "",
            "user_id": "",
            "header_template_id": "",
            "details_template_id": "",
            "footer_template_id": "",
            "timeout_id": "",
            "location_id": "",
            "child_default_task_id": "",
            "child_default_task_name": "",
            "date_created": "",
            "status": "",
            "category": "",
            "additional_data_fn": "",
            "optional_data": "",
            "required_data": "",
            "offline_expiration_time": "",
            "display_if_empty": "",
            "type": "",
            "image": ""
        },
        "payload": "",
        "topic": "",
        "x": 111,
        "y": 28,
        "wires": [
            [
                "33fb9251.e043ae"
            ]
        ]
    },
    {
        "id": "f24c00c3.9ec8d",
        "type": "debug",
        "z": "d9e3488f.8f93b8",
        "name": "Update Log",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 585,
        "y": 446,
        "wires": []
    },
    {
        "id": "891b5b75.f3cfe8",
        "type": "function",
        "z": "b36c258c.f48c68",
        "name": "1. login page and ac",
        "func": "var login_page = {\n        \"_id\": \"page_login\",\n        \"page_id\": \"page_login\",\n        \"task\": {\n            \"template\": {\n                \"header\": {\n                    \"name\": \"title\",\n                    \"html\": \"\"\n                },\n                \"detail\": {\n                    \"name\": \"login form\",\n                    \"html\": \"<ion-content padding=\\\"true\\\">\\r\\n\\t<div class=\\\"wbox\\\" style=\\\"padding:30px;\\\">\\r\\n\\t\\t<form>\\r\\n\\t\\t\\t<h1 style=\\\"text-align:center;\\\">{{title}}<\\/h1>\\r\\n\\t\\t\\t<ion-list style=\\\"\\\">\\r\\n\\t\\t\\t\\t<label class=\\\"item item-input\\\">\\r\\n\\t\\t\\t\\t\\t<input type=\\\"text\\\" id=\\\"phone\\\" ng-model=\\\"user.phone\\\" placeholder=\\\"Phone\\\">\\r\\n\\t\\t\\t\\t<\\/label>\\r\\n\\t\\t\\t\\t<label class=\\\"item item-input\\\">\\r\\n\\t\\t\\t\\t\\t<input type=\\\"password\\\" id=\\\"pass\\\" ng-model=\\\"user.pass\\\" placeholder=\\\"Password\\\">\\r\\n\\t\\t\\t\\t<\\/label>\\r\\n\\t\\t\\t<\\/ion-list>\\r\\n\\t\\t\\t<div style=\\\"height: 40px;\\\" class=\\\"spacer\\\"><\\/div>\\r\\n\\t\\t\\t<button class=\\\"button button-stable button-block\\\" id=\\\"login-button\\\" ng-click=\\\"login(user)\\\">NEXT<\\/button>\\r\\n\\t\\t<\\/form>\\r\\n\\t<\\/div>\\r\\n<\\/ion-content>\"\n                },\n                \"footer\": {\n                    \"name\": \"\",\n                    \"html\": \"\"\n                },\n                \"js\": \"$scope.title = \\\"Login\\\";\\r\\n\\r\\n$scope.login = function(user){\\r\\n\\t$scope.to_id = 2;\\r\\n\\tphone = $.trim($(\\\"#phone\\\").val());\\r\\n\\tpass = $.trim($(\\\"#pass\\\").val());\\r\\n\\t\\r\\n\\tif(phone==''){\\r\\n\\t\\tutilityService.msg(\\\"Please enter Phone number\\\");\\r\\n\\t\\t$(\\\"#phone\\\").focus();\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\tif(pass==''){\\r\\n\\t\\tutilityService.msg(\\\"Please enter Password\\\");\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\t\\r\\n\\tvar users = [{\\\"id\\\":1,\\\"name\\\":\\\"Adam\\\"},{\\\"id\\\":2,\\\"name\\\":\\\"Ben\\\"},{\\\"id\\\":3,\\\"name\\\":\\\"Clemens\\\"},{\\\"id\\\":4,\\\"name\\\":\\\"Roger\\\"},{\\\"id\\\":5,\\\"name\\\":\\\"Jess\\\"}];\\r\\n\\tif(typeof localStorage.user == \\\"undefined\\\"){\\r\\n\\t\\tuser.id=users[0].id;\\r\\n\\t\\tuser.name=users[0].name;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\tu = JSON.parse(localStorage.user);\\r\\n\\t\\tuser.id = u.id + 1;\\r\\n\\t\\tif(user.id>5) user.id = 1;\\r\\n\\t\\tuser.name=users[user.id-1].name;\\r\\n\\t}\\r\\n\\tlocalStorage.user = JSON.stringify(user);\\r\\n\\t$scope.myId = user.id;\\r\\n\\t$scope.myName = user.name;\\r\\n\\tpopTxt = \\\"user id=\\\"+user.id+\\\", name=\\\"+user.name+\\\",<br> phone=\\\"+user.phone;\\r\\n\\tutilityService.confirmPopup(popTxt,\\\"Accept new phone!\\\")\\r\\n\\t\\t.then(function(res) {\\r\\n\\t\\tif(res){\\r\\n\\t\\t\\t$scope.goPage($scope.to_id);\\r\\n\\t\\t}\\r\\n\\t});\\r\\n};\"\n            },\n            \"from_id\": 0,\n            \"to_id\": 2,\n            \"date_created\": \"1/26/2017 5:05 PM\"\n        },\n        \"detail\": [\n        ]\n    };\n\nglobal.set('login_page', \"\");\nglobal.set('login_page', login_page);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 319,
        "y": 201,
        "wires": [
            [
                "7cc53007.60934"
            ]
        ]
    },
    {
        "id": "497bac23.baa094",
        "type": "http response",
        "z": "b36c258c.f48c68",
        "name": "API Result",
        "x": 843,
        "y": 194,
        "wires": []
    },
    {
        "id": "770e7d7b.80ba94",
        "type": "debug",
        "z": "b36c258c.f48c68",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 846,
        "y": 110,
        "wires": []
    },
    {
        "id": "6aa45583.ef1c4c",
        "type": "function",
        "z": "b36c258c.f48c68",
        "name": "return login page & ac",
        "func": "//node.warn(JSON.stringify(msg.payload.page_id));\n//node.warn(msg.req.query.page_id);\n\nvar page_id = \"page_login\";\nvar apiResult = global.get('login_page');\nvar access_token = global.get('access_token');\n\nvar response = {};\nresponse = apiResult;\nresponse.access_token = access_token;\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 623,
        "y": 200,
        "wires": [
            [
                "497bac23.baa094",
                "770e7d7b.80ba94"
            ]
        ]
    },
    {
        "id": "5245c16.7b26b4",
        "type": "http in",
        "z": "b36c258c.f48c68",
        "name": "",
        "url": "/api/gettoken",
        "method": "get",
        "swaggerDoc": "",
        "x": 95,
        "y": 201,
        "wires": [
            [
                "891b5b75.f3cfe8"
            ]
        ]
    },
    {
        "id": "7cc53007.60934",
        "type": "function",
        "z": "b36c258c.f48c68",
        "name": "generate ac",
        "func": "var access_token = \"\";\nvar rand = function() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n};\nvar time = function() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n};\n\nvar token = function() {\n    return time()+'.'+rand(); // to make it longer\n};\n\naccess_token = token();\nnode.warn(access_token);\nglobal.set('access_token', access_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 492,
        "y": 94,
        "wires": [
            [
                "6aa45583.ef1c4c"
            ]
        ]
    },
    {
        "id": "e3e5cf88.d4568",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "url": "/auth/user",
        "method": "post",
        "swaggerDoc": "",
        "x": 110,
        "y": 125,
        "wires": [
            [
                "ddbf1178.8968a",
                "41a79280.b3214c"
            ]
        ]
    },
    {
        "id": "ddbf1178.8968a",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "Auth",
        "func": "var body = msg.payload ;\n\nif(check_obj(body)){\n    if(has_key(body, 'access_token')){\n        if(body.access_token === \"1488979858724.yv76fk01o41gu8fr\"){\n            msg.payload = { \n                \"_id\": \"5f490c0ae2ee7321dc891a3e59bd64c6\",\n                \"_rev\": \"2-c9ffd4c38b354a276870e7407cb0c9b7\",\n                \"long_url\": null,\n                \"access_token\": \"1488979858724.yv76fk01o41gu8fr\",\n                \"security_level\": 1,\n                \"virtual_phone\": 15103067789,\n                \"email\": \"test@bot.com\",\n                \"converstation_id\": null,\n                \"first_name\": \"test\",\n                \"last_name\": \"bot\",\n                \"code\": null,\n                \"password\": \"Admin123#\"\n            } ;\n        }else{\n            msg.payload = response(400, true, \"validation error\", \"Token doesn't exists, Please check this again.\");\n        }    \n    }else{\n        msg.payload = response(400, true, \"validation error\", \"Access token is required.\");\n    }\n}else{\n    msg.payload = response(400, true, \"validation error\", \"Empty request body not going to trated.\");\n}\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction has_key(obj, key){\n    return obj[key] ? true : false ;\n}\n\n\nfunction response(code, err, type, msg){\n    return {status: code, err: err ? true : false , type: type, msg: msg} ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 303,
        "y": 145,
        "wires": [
            [
                "e7cbcfaf.a646f"
            ]
        ]
    },
    {
        "id": "e7cbcfaf.a646f",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 451,
        "y": 145,
        "wires": []
    },
    {
        "id": "41a79280.b3214c",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 320,
        "y": 80,
        "wires": []
    },
    {
        "id": "d915338.f85d3d",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "form_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "form_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 88,
        "wires": [
            [
                "4c63cd35.b61c74"
            ]
        ]
    },
    {
        "id": "4c63cd35.b61c74",
        "type": "cloudant in",
        "z": "7fce52ea.7e640c",
        "name": "Users",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 406,
        "y": 89,
        "wires": [
            [
                "ba394890.7ec3a8"
            ]
        ]
    },
    {
        "id": "ba394890.7ec3a8",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "users_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "users_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 555,
        "y": 89,
        "wires": [
            [
                "328a25c.c9973da"
            ]
        ]
    },
    {
        "id": "328a25c.c9973da",
        "type": "cloudant in",
        "z": "7fce52ea.7e640c",
        "name": "templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 706,
        "y": 89,
        "wires": [
            [
                "e4015841.1edc68"
            ]
        ]
    },
    {
        "id": "e4015841.1edc68",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "templates",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "all_templates",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 99,
        "y": 157,
        "wires": [
            [
                "fdc81203.40114"
            ]
        ]
    },
    {
        "id": "fdc81203.40114",
        "type": "function",
        "z": "7fce52ea.7e640c",
        "name": "timeout_id",
        "func": "if(msg.form_data){\n    if(msg.form_data.timeout_id){\n        msg.payload = {\n            _id : msg.form_data.timeout_id\n        };\n    }else{\n        msg.payload = {\n            _id : \"\"\n        };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 263,
        "y": 156,
        "wires": [
            [
                "f010f10b.e9fb"
            ]
        ]
    },
    {
        "id": "f010f10b.e9fb",
        "type": "cloudant in",
        "z": "7fce52ea.7e640c",
        "name": "TimeoutById",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 424,
        "y": 155,
        "wires": [
            [
                "184d3b84.b8f144"
            ]
        ]
    },
    {
        "id": "184d3b84.b8f144",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "timeout_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 589,
        "y": 153,
        "wires": [
            [
                "3b6efaa5.71ed46"
            ]
        ]
    },
    {
        "id": "3b6efaa5.71ed46",
        "type": "cloudant in",
        "z": "7fce52ea.7e640c",
        "name": "locations",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 743,
        "y": 154,
        "wires": [
            [
                "37614730.9995b8"
            ]
        ]
    },
    {
        "id": "37614730.9995b8",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "locationArr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 103,
        "y": 219,
        "wires": [
            [
                "54cba0d5.0fb27"
            ]
        ]
    },
    {
        "id": "9e13f329.594eb",
        "type": "cloudant in",
        "z": "7fce52ea.7e640c",
        "name": "by task name",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getTask",
        "index": "searchTask",
        "x": 425,
        "y": 219,
        "wires": [
            [
                "5f12ee44.297d"
            ]
        ]
    },
    {
        "id": "54cba0d5.0fb27",
        "type": "function",
        "z": "7fce52ea.7e640c",
        "name": "task name",
        "func": "if(msg.form_data){\n    if(msg.form_data.task_name){\n        msg.payload = {\n            query : \"task_name:\" + msg.form_data.task_name\n        } ;\n    }else{\n        msg.payload = {\n            query: \"\" \n        };\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 262,
        "y": 219,
        "wires": [
            [
                "9e13f329.594eb"
            ]
        ]
    },
    {
        "id": "5f12ee44.297d",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "taskByName",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_by_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 591,
        "y": 217,
        "wires": [
            [
                "6bdf6385.1f5e3c"
            ]
        ]
    },
    {
        "id": "5e11b2f2.297cbc",
        "type": "inject",
        "z": "7fce52ea.7e640c",
        "name": "start",
        "topic": "start",
        "payload": "{ \"user_id\": \"5f490c0ae2ee7321dc891a3e59bd64c6\", \"task_name\": \"task_w_create_task\", \"from_user_id\": \"23d5c58422026c68269cd6e9ac22ca4a\", \"note\": \"the lean statup\" }",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 91,
        "y": 109,
        "wires": [
            [
                "d915338.f85d3d"
            ]
        ]
    },
    {
        "id": "7027bf3c.45267",
        "type": "function",
        "z": "7fce52ea.7e640c",
        "name": "big_record",
        "func": "var form_data       = msg.form_data ,\n    user_obj        = get_obj(form_data.user_id, msg.users_data),\n    templates       = msg.all_templates,\n    timeout         = msg.timeout_obj,\n    locations       = msg.location_arr ,\n    task_arr        = msg.task_by_name ,\n    watson_output   = msg.watson_output,\n    big_record      = {},\n    page_id         = generate_page_id(6);\n    \nif(form_data._id){\n    //from the below code is working for the update case.\n    big_record._id              = form_data._id ;\n    big_record.page_id          = page_id ;\n    big_record.task_name        = form_data.task_name;\n    big_record.user_id          = user_obj._id;\n    big_record.phone            = user_obj.virtual_phone;\n    big_record.access_token     = user_obj.access_token;\n    big_record.note             = form_data.note || \"the lean startup\" ;\n    big_record.task             = create_task_obj(form_data, msg.users_data, templates, locations, task_arr, watson_output);\n}else{\n    //from the below code is working for the create record case.\n    big_record.task_name        = form_data.task_name;\n    big_record.page_id          = page_id ;\n    big_record.user_id          = user_obj._id;\n    big_record.phone            = user_obj.virtual_phone;\n    big_record.access_token     = user_obj.access_token;\n    big_record.note             = form_data.note || \"the lean startup\" ;\n    big_record.task             = create_task_obj(form_data, msg.users_data, templates, locations, task_arr, timeout, watson_output);\n\n}\nmsg.payload = big_record ;\nreturn msg;\n\nfunction create_task_obj(form, users_arr, templates, locations, task_arr, timeout, watson_output){\n    var task_obj = get_task_from_arr(task_arr);\n    var task ={\n        task_id                     : task_obj._id ,\n        user_id                     : task_obj.user_id ,\n        task_name                   : task_obj.name ,\n        header_template_id          : get_obj(task_obj.header_template_id, templates) ,\n        detail_template_id          : get_obj(task_obj.details_template_id, templates) ,\n        footer_template_id          : get_obj(task_obj.footer_template_id, templates) ,\n        timeout_id                  : task_obj.timeout_id ,\n        location_ids                : task_obj.location_ids ? get_all_loc_obj(task_obj.location_ids) : null,\n        child_defaults_task_id      : task_obj.child_default_task_id || null ,\n        child_default_task_name     : task_obj.child_default_task_name || null, \n        date_created                : task_obj.date_created || new Date().toJSON() ,\n        category                    : task_obj.category || null ,\n        status                      : task_obj.status || null ,\n        additional_data_fn          : task_obj.additional_data_fn || null,\n        optional_data               : task_obj.optional_data || {},\n        required_data               : task_obj.required_data || {} ,\n        offline_expiration_seconds  : task_obj.offline_expiration_time || 0,\n        display_if_empty            : task_obj.display_if_empty || true ,\n        type                        : {\n            public                  : task_obj.type || \"public\"\n        },\n        image                       : task_obj.image || form.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\" ,\n        child_defaults_task         : form.child_defaults_task || null ,\n        template                    : {\n            header                  : get_obj(task_obj.header_template_id, templates),\n            detail                  : get_obj(task_obj.details_template_id, templates),\n            footer                  : get_obj(task_obj.footer_template_id, templates)\n        } ,\n        detail                      : create_detail_obj(form, users_arr, templates, locations, task_obj, timeout, watson_output)\n    } ;\n    return task ;\n}\n\nfunction create_detail_obj(form, users, templates, locations, task_obj, timeout, watson_output){\n    var detail = {\n        task_id                     : task_obj._id,\n        child_task_id               : task_obj.child_default_task_id,\n        user_id                     : get_obj(form.user_id, users), \n        from_user_id                : get_obj(form.from_user_id, users),\n        page_id                     : page_id,\n        synchronized                : true,\n        processed                   : true,\n        status                      : \"active\",\n        read                        : true,\n        display_if_empty            : true,\n        date_created                : new Date().toJSON(),\n        due_date                    : new Date().toJSON(),\n        offline_expiration_seconds  : 0,\n        priority                    : 1,\n        user_incoming               : {\n            note                    : form.note || \"the lean startup\"\n        },\n        watson_incoming             : {\n            message                 : \"watson_response_to: \" + form.note ,\n            output                  : watson_output.output\n        },\n        timeout                     : create_timeout_obj(timeout, users),\n        location                    : task_obj.location_ids ? get_all_loc_obj(task_obj.location_ids) : null,\n        defaults: {\n            parent                  : {},\n            next_child              : {},\n            children                : {}\n        }\n    };\n    return detail ;\n}\n\nfunction get_obj(id, arr){\n    var obj = {} ;\n    if(id && arr.length){\n        for(var i=0; i<arr.length; i++){\n            if(sanitize(id) === sanitize(arr[i]._id)){\n                obj = arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction get_task_from_arr(arr){\n    if(arr !== null){\n        if(arr.length){\n            return arr[arr.length - 1];\n        }else{\n            return arr ;\n        }    \n    }\n}\n\nfunction get_all_loc_obj(arr){\n    var obj = {};\n    if(arr !== null){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction create_timeout_obj(timeout_obj, users){\n    if(check_obj(timeout_obj.timeout_list) > 0){\n        for(var list in timeout_obj.timeout_list){\n            if(timeout_obj.timeout_list[list]){\n                timeout_obj.timeout_list[list].users = get_delivery_user_ids(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                timeout_obj.timeout_list[list].delivery_user_ids = get_delivery_user_ids(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                timeout_obj.timeout_list[list].template = {\n                    message: {},\n                    from   : {}\n                };\n                timeout_obj.timeout_list[list].defaults = {\n                    parent                  : {},\n                    next_child              : {},\n                    children                : {}\n                };\n            }\n        }\n        return timeout_obj ;   \n    }else{\n        return {} ;\n    }\n}\n\nfunction get_delivery_user_ids(ids, users){\n    var obj = {};\n    if(ids !== null){\n        ids = ids.split(',');\n    }\n    \n    if(users.length){\n        for(var i=0; i< users.length; i++){\n            if(ids.indexOf(users[i]._id) > -1 ){\n                delete users[i].password ;\n                obj[users[i]._id] = users[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        if(obj[keys]){\n            count++ ;\n        }\n    }\n    return count ;\n}\n\nfunction sanitize(data){\n    if(data){\n        return data.trim().toString();\n    }\n}\n\nfunction generate_page_id(length) {\n    return Math.floor(Math.pow(10, length-1) + Math.random() * (Math.pow(10, length) - Math.pow(10, length-1) - 1));\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 456,
        "y": 287,
        "wires": [
            [
                "addc1beb.7297f8",
                "4dedc89e.9da2d8"
            ]
        ]
    },
    {
        "id": "addc1beb.7297f8",
        "type": "debug",
        "z": "7fce52ea.7e640c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 648,
        "y": 389,
        "wires": []
    },
    {
        "id": "6bdf6385.1f5e3c",
        "type": "function",
        "z": "7fce52ea.7e640c",
        "name": "input",
        "func": "msg.payload  = msg.form_data.note || \"the lean startup\" ;\nmsg.params = {\n    workspace_id : \"42015e53-bdb9-4a23-87b5-f382d5e12dbb\",\n    username     : \"4db58c57-6d89-4382-9d34-c4044b5fce11\",\n    password     : \"eG0ctZRJO42s\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 742,
        "y": 218,
        "wires": [
            [
                "20c99b1e.68bd94"
            ]
        ]
    },
    {
        "id": "20c99b1e.68bd94",
        "type": "watson-conversation-v1",
        "z": "7fce52ea.7e640c",
        "name": "Watson",
        "workspaceid": "42015e53-bdb9-4a23-87b5-f382d5e12dbb",
        "multiuser": false,
        "context": true,
        "x": 96,
        "y": 285,
        "wires": [
            [
                "f7f2e56c.5c4158"
            ]
        ]
    },
    {
        "id": "f7f2e56c.5c4158",
        "type": "change",
        "z": "7fce52ea.7e640c",
        "name": "watson_payload",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "watson_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 267,
        "y": 285,
        "wires": [
            [
                "7027bf3c.45267"
            ]
        ]
    },
    {
        "id": "bda60a90.46f698",
        "type": "cloudant out",
        "z": "7fce52ea.7e640c",
        "name": "Save Obj",
        "cloudant": "",
        "database": "big_record_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 634,
        "y": 288,
        "wires": []
    },
    {
        "id": "4dedc89e.9da2d8",
        "type": "http response",
        "z": "7fce52ea.7e640c",
        "name": "",
        "x": 628,
        "y": 336,
        "wires": []
    },
    {
        "id": "5de2de5d.a5ff9",
        "type": "http in",
        "z": "7fce52ea.7e640c",
        "name": "Big record",
        "url": "/create_big_record",
        "method": "post",
        "swaggerDoc": "",
        "x": 82,
        "y": 64,
        "wires": [
            [
                "d915338.f85d3d"
            ]
        ]
    },
    {
        "id": "b7a9302f.262bb",
        "type": "debug",
        "z": "7fce52ea.7e640c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 320,
        "y": 38,
        "wires": []
    },
    {
        "id": "88eefbac.c3c3b8",
        "type": "ui_form",
        "z": "7fce52ea.7e640c",
        "name": "Big record table",
        "label": "",
        "group": "605089c4.c715b8",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Id",
                "value": "_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Assign user",
                "value": "user_id",
                "type": "text",
                "required": false
            },
            {
                "label": "Task name",
                "value": "task_name",
                "type": "text",
                "required": false
            },
            {
                "label": "From user ",
                "value": "from_user_id",
                "type": "text",
                "required": false
            }
        ],
        "formValue": {
            "_id": "",
            "user_id": "",
            "task_name": "",
            "from_user_id": ""
        },
        "payload": "",
        "topic": "big_record_table",
        "x": 101,
        "y": 22,
        "wires": [
            [
                "d915338.f85d3d",
                "b7a9302f.262bb"
            ]
        ]
    },
    {
        "id": "e6da2739.c08068",
        "type": "inject",
        "z": "d9e3488f.8f93b8",
        "name": "Start",
        "topic": "Start",
        "payload": "{ \t\"name\": \"test_task\", \t\"user_id\": \"5f490c0ae2ee7321dc891a3e59bd64c6\", \t\"header_template_id\": \"108ac1779a89aaf68db2fa7db81e2cab\", \t\"details_template_id\": \"e2d9ea9b31fd26126d3a782e29b60657\", \t\"footer_template_id\": \"52fcded5701e1d38fe92e748059fcbb7\", \t\"timeout_id\": \"\", \t\"location_id\": \"\", \t\"child_default_task_id\": \"\", \t\"child_default_task_name\": \"\", \t\"date_created\": \"\", \t\"status\": \"active\", \t\"category\": \"book\", \t\"additional_data_fn\": \"\", \t\"optional_data\": \"\", \t\"required_data\": \"\", \t\"offline_expiration_time\": 0, \t\"display_if_empty\": \"true\", \t\"type\": \"public\", \t\"image\": \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\" }",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 111,
        "y": 117,
        "wires": [
            [
                "33fb9251.e043ae"
            ]
        ]
    },
    {
        "id": "fa5b152c.505728",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 319,
        "y": 297,
        "wires": [
            [
                "c044651d.cc7628"
            ]
        ]
    },
    {
        "id": "89c4da2f.3f4e68",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "setup",
        "func": "if(msg.payload === null || msg.payload === undefined){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(msg.payload.access_token === null || msg.payload.access_token === undefined || msg.payload.access_token === \"\"){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(msg.payload.note === null || msg.payload.note === undefined || msg.payload.note === \"\"){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(msg.payload.page_id === null || msg.payload.page_id === undefined || msg.payload.page_id === \"\"){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(msg.payload.from_page_id === null || msg.payload.from_page_id === undefined ){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(msg.payload.task_id === null || msg.payload.task_id === undefined ){\n    msg.flow_status = \"API_RESPONSE\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.form_data    = msg.payload ;\n    msg.task_payload = { _id: msg.payload.task_id };\n    node.warn(\"task_payload\");\n    node.warn(msg.task_payload);\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 212,
        "y": 63,
        "wires": [
            [
                "fd001b8a.3c2e28"
            ]
        ]
    },
    {
        "id": "ce10d70a.553b78",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "db_user",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 431,
        "y": 156,
        "wires": [
            [
                "8fef5107.4f42b"
            ]
        ]
    },
    {
        "id": "d202018e.aa9e6",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "details",
        "func": "var big_record_tables   = {} , \n    details             = {},\n    details_arr         = msg.details_obj,\n    users_arr           = msg.user_obj ,\n    form_data           = msg.form_data ;\n    \nbig_record_tables.user  = msg.db_user ;\nbig_record_tables.task  = msg.task_obj_by_name ;\n\n//setting up some obj from big_record_tables\n//big_record_tables.task.child_default = big_record_tables.task.child_default_task_id ? get_obj_from_array(big_record_tables.task.child_default_task_id, msg.task_obj) : null;\n\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(msg.timeout_obj, msg.templates, msg.user_obj, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(msg.timeout_obj, msg.templates, msg.user_obj, \"user_calculated\"),\n    location : get_location_obj(msg.task_obj_by_name.location_id) \n} ;\n\n//creating the details obj\ndetails.task_id                         = msg.task_obj_by_name._id || null;\ndetails.child_task_id                   = msg.task_obj_by_name.child_default_task_id || null;\ndetails.user_id                         = msg.db_user._id || null;\ndetails.from_user_id                    = form_data.from_user_id || null ;\n\ndetails.page_id                         = check_number(form_data.page_id) || calculate_page_id(msg.task_obj_by_name, details_arr) ;\ndetails.from_page_id                    = check_number(msg.task_obj_by_name.from_page_id) || calculate_from_page_id(msg.task_obj_by_name, details_arr);\ndetails.to_page_id                      = if_detail_is_msg(msg.task_obj_by_name.child_default_task_id);\n\ndetails.synchronized                    = 0 ;\ndetails.processed                       = 0 ;\ndetails.status                          = 0 ;\ndetails.read                            = 0 ;\ndetails.display_if_empty                = msg.task_obj_by_name.display_if_empty || 1;\ndetails.date_created                    = new Date().toJSON() ;\ndetails.due_date                        = big_record_tables.task.details.user_calculated.delivery_due;\ndetails.offline_expiration_seconds      = msg.task_obj_by_name.offline_expiration_time ;\ndetails.priority                        = 1;\ndetails.type                            = {\n                                            \"public\" : msg.task_obj_by_name.type || \"public\"\n                                        };\ndetails.image                           = msg.task_obj_by_name.image ;\ndetails.from_user                       = get_from_user(form_data.from_user_id, users_arr);\ndetails.user_incoming                   = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\ndetails.watson_incoming                 = {\n                                            message :   \"Watson response to : \" + form_data.note,\n                                            response : {},\n                                            \n                                        } ;\ndetails.template                        = {\n                                            details : get_template(msg.task_obj_by_name.details_template_id, msg.templates)\n                                        };\n\ndetails.timeout                         = big_record_tables.task.details.timeout ;\ndetails.user_calculate                  = big_record_tables.task.details.user_calculated ;\ndetails.location                        = big_record_tables.task.details.location ;\ndetails.default                         = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetails.count_status\t= {\n    active : 1,\n    unread : 0\n};\ndetails.count\t        = {\n    active : 1,\n    unread : 0\n};\ndetails.count_if        = {\n    active : 1,\n    unread : 0\n};\n\ndetails.createdAt                       = Number(new Date().getTime()) ;\n\nif(check_timeout_obj(msg.task_obj_by_name)){\n    msg.default_child_task_id = msg.task_obj_by_name.child_default_task_id ;\n    msg.payload = details ;\n    return msg;    \n}else{\n    msg.payload = details ;\n    return msg;    \n}\n\nfunction check_timeout_obj(task_obj){\n    //msg.task_obj_by_name.child_default_name\n    \n    if(task_obj !== null || task_obj !== undefined){\n        if(task_obj.length){\n            return true ;\n        }else{\n            return false ;\n        }\n    }else{\n        return false ;\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj.name === undefined || timeout_obj.name === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction calculate_page_id(task_obj, details_arr){\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details.length; i++){\n                if(details[i].task_id === task_id){\n                  page_id = details[i].page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\nfunction calculate_from_page_id(task_obj, details_arr){\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details.length; i++){\n                if(details[i].task_id === task_id){\n                  page_id = details[i].from_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details.length; i++){\n                if(details[i].task_id === task_id){\n                  page_id = details[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined && locations.length){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n    var obj = {} ;\n\n    if(arr !== null && arr !== undefined && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction generate_page_id(length) {\n    return new Date().getTime();\n}\n\nfunction get_from_user(id, user_arr){\n    var obj = {};\n    if(id !== null && user_arr !== null){\n        for(var i=0; i<user_arr.length; i++){\n            if(id === user_arr[i]._id){\n                delete user_arr[i].access_token ;\n                delete user_arr[i].security_level;\n                delete user_arr[i].converstation_id ;\n                delete user_arr[i].password ;\n                delete user_arr[i].code ;\n                obj[user_arr[i]._id] = user_arr[i];\n            }\n        }\n    }else{\n        return obj ;\n    }\n    \n    return obj;\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction if_detail_is_msg(child_task_id){\n   // return check_number(msg.task_obj_by_name.to_page_id) || calculate_to_page_id(msg.task_obj_by_name, details_arr);\n    if(child_task_id === undefined || child_task_id === null || child_task_id === \"\"){\n        return check_number(msg.task_obj_by_name.page_id) ;\n    }else{\n        return check_number(msg.task_obj_by_name.to_page_id) || calculate_to_page_id(msg.task_obj_by_name, details_arr);\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 442,
        "y": 421,
        "wires": [
            [
                "dcd29eda.dbf69",
                "afb043c.18d09c",
                "f41c87a4.8fc5c8",
                "65595459.47cbdc",
                "c2821303.e3abb",
                "86859bf3.c76ff8"
            ]
        ]
    },
    {
        "id": "8fef5107.4f42b",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "all_users",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 572,
        "y": 157,
        "wires": [
            [
                "b1a8676a.a88a68"
            ]
        ]
    },
    {
        "id": "c4e12bed.db4da8",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "task_payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 109,
        "y": 214,
        "wires": [
            [
                "2893dcb1.4ebc54"
            ]
        ]
    },
    {
        "id": "2943b32c.cff1fc",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "task",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj_by_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 441,
        "y": 208,
        "wires": [
            [
                "219cfedf.7e4f12"
            ]
        ]
    },
    {
        "id": "219cfedf.7e4f12",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "timeout id",
        "func": "\nif(check_timeout_obj(msg.task_obj_by_name) !== null && check_timeout_obj(msg.task_obj_by_name) !== \"\"){\n    msg.db_req_obj_timeout = {_id : check_timeout_obj(msg.task_obj_by_name)};\n    return msg;   \n}else{\n    return msg ;\n}\n\nfunction check_timeout_obj(task_obj){\n    if(task_obj !== null){\n        if(task_obj.length){\n            return msg.task_obj_by_name[0].timeout_id ;\n        }else{\n            return \"\" ;\n        }\n    }else{\n        return \"\" ;\n    }\n}\n\n//msg.task_obj_by_name ? msg.task_obj_by_name[0].timeout_id: \"\"",
        "outputs": 1,
        "noerr": 0,
        "x": 598,
        "y": 203,
        "wires": [
            [
                "883c996b.34ef48"
            ]
        ]
    },
    {
        "id": "883c996b.34ef48",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "timeout",
        "rules": [
            {
                "t": "move",
                "p": "db_req_obj_timeout",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 756,
        "y": 202,
        "wires": [
            [
                "f5884722.8bb178"
            ]
        ]
    },
    {
        "id": "f5884722.8bb178",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "db_timeout",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 96,
        "y": 280,
        "wires": [
            [
                "4802cc2a.f0e894"
            ]
        ]
    },
    {
        "id": "4802cc2a.f0e894",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "timeout_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 284,
        "y": 278,
        "wires": [
            [
                "83e4ce60.00e92"
            ]
        ]
    },
    {
        "id": "83e4ce60.00e92",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 459,
        "y": 275,
        "wires": [
            [
                "f6ce4c82.ce29e"
            ]
        ]
    },
    {
        "id": "f6ce4c82.ce29e",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "temp obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "templates",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 619,
        "y": 273,
        "wires": [
            [
                "91176fc8.ffbe1"
            ]
        ]
    },
    {
        "id": "91176fc8.ffbe1",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "user",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 766,
        "y": 270,
        "wires": [
            [
                "8653b3de.e08a2"
            ]
        ]
    },
    {
        "id": "8653b3de.e08a2",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "user obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 83,
        "y": 347,
        "wires": [
            [
                "1d23c3db.02034c"
            ]
        ]
    },
    {
        "id": "1d23c3db.02034c",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 263,
        "y": 344,
        "wires": [
            [
                "ca779d76.0f6fc"
            ]
        ]
    },
    {
        "id": "ca779d76.0f6fc",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "task_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "all_task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 446,
        "y": 338,
        "wires": [
            [
                "d202018e.aa9e6"
            ]
        ]
    },
    {
        "id": "a8615336.c6996",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "input",
        "func": "msg.payload  = \"the lean startup\" ;\nmsg.params = {\n    workspace_id : \"42015e53-bdb9-4a23-87b5-f382d5e12dbb\",\n    username     : \"4db58c57-6d89-4382-9d34-c4044b5fce11\",\n    password     : \"eG0ctZRJO42s\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 599,
        "y": 341,
        "wires": [
            [
                "4874347.c143dcc"
            ]
        ]
    },
    {
        "id": "4874347.c143dcc",
        "type": "watson-conversation-v1",
        "z": "3b9a3280.9d537e",
        "name": "Watson",
        "workspaceid": "42015e53-bdb9-4a23-87b5-f382d5e12dbb",
        "multiuser": false,
        "context": true,
        "x": 744,
        "y": 338,
        "wires": [
            [
                "70aa59d6.600068"
            ]
        ]
    },
    {
        "id": "70aa59d6.600068",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "watson_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 243,
        "y": 433,
        "wires": [
            []
        ]
    },
    {
        "id": "8f4addc2.a5347",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "create_optional_task",
        "func": "msg.recent_detail = msg.payload ;\nmsg.optional_task = create_optonal_task(msg.payload, msg.all_task_obj, msg.default_child_task_id);\nreturn msg ;\n\n\nfunction create_optonal_task(details, task_obj, default_child_task_id){\n    var default_task = get_task_by_name(task_obj, default_child_task_id);\n        current_task = get_current_task(task_obj, details.task_id) ;\n        task_obj = {} ;\n    \n    if(check_obj(default_task) > 0){\n        task_obj = {\n            task_name               : details.user_incoming.message , \n            user_id                 : default_task.user_id || current_task.user_id,\n            \n            page_id                 : details.to_page_id, \n            from_page_id            : details.from_page_id,\n            parent_id               : details.task_id, \n            // from_page_id            : parseInt(details.page_id),\n            // parent_id               : parseInt(details.from_page_id),\n\n            header_template_id      : default_task.header_template_id || current_task.header_template_id,\n            detail_template_id      : default_task.detail_template_id || current_task.detail_template_id,\n            footer_template_id      : default_task.footer_template_id || current_task.footer_template_id,\n            timeout_id              : default_task.timeout_id || current_task.timeout_id,\n            location_id             : default_task.location_id || current_task.location_id,\n            child_default_task_id   : default_task.child_default_task_id || current_task.child_default_task_id,\n            child_default_task_name : default_task.child_default_task_name || current_task.child_default_task_name,\n            date_created            : new Date().toJSON(),\n            type                    : default_task.type || current_task.type,\n            status                  : default_task.status || current_task.status,\n            category                : default_task.category || current_task.category,\n            additional_data_fn      : default_task.additional_data_fn || current_task.additional_data_fn,\n            optional_data           : default_task.optional_data || current_task.optional_data,\n            required_data           : default_task.required_data || current_task.required_data,\n            offline_expiration_time : default_task.offline_expiration_time || current_task.offline_expiration_time,\n            display_if_empty        : default_task.display_if_empty || current_task.display_if_empty ,\n            count_status : {\n                active : 1,\n                unread : 0,\n            },\n            count : {\n                active : 1,\n                unread : 0,\n            },\n            count_if : {\n                active : 1,\n                unread : 0,\n            }\n        };\n    }else{\n        task_obj = {\n            task_name               : details.user_incoming.message, \n            user_id                 : current_task.user_id || null,\n            page_id                 : details.to_page_id, \n            from_page_id            : details.page_id,\n            parent_id               : details.task_id, \n            header_template_id      : current_task.header_template_id || null,\n            detail_template_id      : current_task.detail_template_id || null,\n            footer_template_id      : current_task.footer_template_id || null,\n            timeout_id              : current_task.timeout_id || null,\n            location_id             : current_task.location_id || null,\n            child_default_task_id   : current_task.child_default_task_id || null,\n            child_default_task_name : current_task.child_default_task_name || null,\n            date_created            : new Date().toJSON(),\n            type                    : current_task.type || null,\n            status                  : current_task.status || 0,\n            category                : current_task.category || null,\n            additional_data_fn      : current_task.additional_data_fn || null,\n            optional_data           : current_task.optional_data || {},\n            required_data           : current_task.required_data || {},\n            offline_expiration_time : current_task.offline_expiration_time || 0,\n            display_if_empty        : current_task.display_if_empty || 1 ,\n            count_status : {\n                active : 1,\n                unread : 0,\n            },\n            count : {\n                active : 1,\n                unread : 0,\n            },\n            count_if : {\n                active : 1,\n                unread : 0,\n            }\n        };\n    }\n    return task_obj;\n}\n\nfunction get_task_by_name(arr, id){\n    var obj = {} ;\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]._id === id){\n            obj = arr[i]    ;\n        }\n    }\n    \n    return obj ;\n}\n\nfunction get_current_task(arr, task_id){\n    var obj = {} ;\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]._id === task_id){\n            obj = arr[i];\n        }\n    }\n    return obj ;\n}\n\nfunction check_obj(obj){\n   return Object.keys(obj).length ;\n}\n\nfunction generate_page_id(length) {\n    return new Date().getTime();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 426,
        "y": 543,
        "wires": [
            [
                "e52b0911.cbb018"
            ]
        ]
    },
    {
        "id": "f41c87a4.8fc5c8",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 700,
        "y": 392,
        "wires": []
    },
    {
        "id": "dcd29eda.dbf69",
        "type": "http response",
        "z": "3b9a3280.9d537e",
        "name": "Result",
        "x": 691,
        "y": 433,
        "wires": []
    },
    {
        "id": "7bc9f32a.a6f09c",
        "type": "http in",
        "z": "3b9a3280.9d537e",
        "name": "Detail",
        "url": "/add_detail",
        "method": "post",
        "swaggerDoc": "",
        "x": 70,
        "y": 31,
        "wires": [
            [
                "89c4da2f.3f4e68"
            ]
        ]
    },
    {
        "id": "8cdd1a5b.3ba338",
        "type": "inject",
        "z": "3b9a3280.9d537e",
        "name": "Start",
        "topic": "Start",
        "payload": "{\"access_token\": \"1489486409169.1pjwj8zy69v\",\"task_name\": \"sub_category_task\",\"note\": \"testing task\" ,\"page_id\": 789456,\"from_page_id\": 2}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 81,
        "y": 89,
        "wires": [
            [
                "89c4da2f.3f4e68"
            ]
        ]
    },
    {
        "id": "afb043c.18d09c",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "Details",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "65595459.47cbdc",
        "type": "delay",
        "z": "3b9a3280.9d537e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 109,
        "y": 545,
        "wires": [
            [
                "8f4addc2.a5347"
            ]
        ]
    },
    {
        "id": "e52b0911.cbb018",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "optional_task",
        "rules": [
            {
                "t": "move",
                "p": "optional_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 631,
        "y": 559,
        "wires": [
            [
                "843d9e0c.8819e",
                "a3cd6ad9.5090e8"
            ]
        ]
    },
    {
        "id": "843d9e0c.8819e",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "Optional Task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 832,
        "y": 601,
        "wires": []
    },
    {
        "id": "313adc4c.440314",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 93,
        "y": 155,
        "wires": [
            [
                "ccdc3936.795c68"
            ]
        ]
    },
    {
        "id": "ccdc3936.795c68",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "details_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "details_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 258,
        "y": 155,
        "wires": [
            [
                "ce10d70a.553b78"
            ]
        ]
    },
    {
        "id": "8b8c9ab7.b4a8e8",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_obj;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n  msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(typeof id === \"object\"){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 730,
        "wires": [
            [
                "fef6332d.0662",
                "567c8943.df9218",
                "d9ae70b8.7f1d1"
            ]
        ]
    },
    {
        "id": "f221c3b4.94472",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 812,
        "y": 789,
        "wires": []
    },
    {
        "id": "c2821303.e3abb",
        "type": "delay",
        "z": "3b9a3280.9d537e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 114,
        "y": 614,
        "wires": [
            [
                "56201e3c.1f82d"
            ]
        ]
    },
    {
        "id": "2eb2b368.8322ec",
        "type": "function",
        "z": "a38007c3.b0ee68",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f7272181.dd58e",
        "type": "function",
        "z": "a4a278a8.fe0848",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "e6a2312.44f20d",
        "type": "function",
        "z": "61a5aa7a.4c84c4",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "fd001b8a.3c2e28",
        "type": "switch",
        "z": "3b9a3280.9d537e",
        "name": "process",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_RESPONSE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 346,
        "y": 64,
        "wires": [
            [
                "a41358b2.73b008"
            ],
            [
                "313adc4c.440314"
            ]
        ]
    },
    {
        "id": "ae60b474.b9ff18",
        "type": "function",
        "z": "d9e3488f.8f93b8",
        "name": "create user task",
        "func": "var task_obj = msg.task_obj ;\n    task_arr = msg.task_arr ;\n    \nmsg.payload = {\n\ttask_id \t\t: get_task_obj_from_arr(task_obj, task_arr),\n\tuser_id\t\t\t: task_obj.user_id,\n\tpage_id         : task_obj.page_id,\n\tsynchronized    : 0,\n    status          : 0, \n\tdate_updated\t: null,\t\n\tparent_id\t\t: task_obj.parent_id,\n\tcount_status\t: {\n\t   active       : 1,\n\t   unread       : 0,\n\t},\n\tcount\t\t\t: {\n\t    active      : 1,\n\t    unread      : 0,\n\t},\n\tcount_if\t\t: {\n\t    active      : 1,\n\t    unread      : 0\n\t},\n\ttemplates\t\t: {},\n\ttimeout\t\t\t: {}\n};\nreturn msg;\n\nfunction get_task_obj_from_arr(obj, arr){\n    var data = null ;\n    if(arr.length && arr !== null){\n        for(var i=0; i < arr.length; i++){\n            if( obj.page_id === arr[i].page_id && \n                sanitize(obj.task_name) === sanitize(arr[i].task_name) &&\n                obj.user_id === arr[i].user_id\n            ){\n                data = arr[i]._id ;\n            }\n        }\n    }\n    \n    return data ;\n}\n\nfunction sanitize(data){\n    if(data && typeof data === \"string\"){\n        return data.trim().toString();\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 184,
        "y": 655,
        "wires": [
            [
                "67fb882b.7660e8",
                "1c870585.74aeea"
            ]
        ]
    },
    {
        "id": "5d5a3b7.c20e2c4",
        "type": "delay",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 161,
        "y": 433,
        "wires": [
            [
                "6b13a73d.1a9ce8"
            ]
        ]
    },
    {
        "id": "1c870585.74aeea",
        "type": "cloudant out",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 434,
        "y": 570,
        "wires": []
    },
    {
        "id": "6b4dfa1f.2d3144",
        "type": "cloudant in",
        "z": "d9e3488f.8f93b8",
        "name": "",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 173,
        "y": 543,
        "wires": [
            [
                "bb78e02a.2bc28"
            ]
        ]
    },
    {
        "id": "bb78e02a.2bc28",
        "type": "change",
        "z": "d9e3488f.8f93b8",
        "name": "changer",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 167,
        "y": 601,
        "wires": [
            [
                "ae60b474.b9ff18"
            ]
        ]
    },
    {
        "id": "67fb882b.7660e8",
        "type": "debug",
        "z": "d9e3488f.8f93b8",
        "name": "User task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 432,
        "y": 624,
        "wires": []
    },
    {
        "id": "b2123a08.b67888",
        "type": "debug",
        "z": "d9e3488f.8f93b8",
        "name": "Create task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 378,
        "y": 494,
        "wires": []
    },
    {
        "id": "6b13a73d.1a9ce8",
        "type": "change",
        "z": "d9e3488f.8f93b8",
        "name": "changer",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 162,
        "y": 487,
        "wires": [
            [
                "6b4dfa1f.2d3144"
            ]
        ]
    },
    {
        "id": "961414da.90cd38",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "Changer",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 111,
        "y": 843,
        "wires": [
            [
                "34e6e0dc.23e03"
            ]
        ]
    },
    {
        "id": "34e6e0dc.23e03",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "User Task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 262,
        "y": 867,
        "wires": [
            [
                "5aa5a2ef.6f208c"
            ]
        ]
    },
    {
        "id": "5aa5a2ef.6f208c",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "Changer",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_task_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 446,
        "y": 868,
        "wires": [
            [
                "c2434c91.73c5a"
            ]
        ]
    },
    {
        "id": "19a36b57.8fdda5",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail_obj ,\n    task_arr            = msg.task_table ,\n    user_arr            = msg.users_arr ,\n    user_task_arr       = msg.user_task_arr ,\n    isCreated           = isUserTaskCreated(detail_obj.user_id, detail_obj.task_id, user_task_arr);\n\nif(check_obj(isCreated) > 0){\n    msg.payload = update_user_task(detail_obj.user_id, detail_obj.task_id, 0, 1);\n    return msg;\n}else{\n    msg.payload = {\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: null,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 0,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {}\n    };\n    return msg;\n}\n\n\nfunction update_user_task(user_id, task_id, status, synchronized){\n    var obj = {} ;\n    var user_task = search_user_task_from_table(user_id, task_id);\n\n    if(check_obj(user_task) > 0){\n        user_task.synchronized          = synchronized  ;\n        user_task.date_updated          = new Date().toJSON();\n        user_task.templates             = detail_obj.template ;\n        user_task.timeout               = detail_obj.timeout ;\n        user_task.count_status.unread   = detail_obj.read ;\n        user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n        user_task.status                = detail_obj.status || status;\n\n        if(!user_task.update_read){\n            if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n                user_task.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task.update_active){\n            if( user_task.count_status.active && user_task.count_if.active){\n                user_task.count.active += 1 ;  \n            }\n        }\n        \n        if(user_task.parent_id) update_user_task(user_id, user_task.parent_id, 0, 1);\n        \n        user_task.update_read   = 1 ;\n        user_task.update_active = 1 ;\n        return user_task;\n    }else{\n        var user_id_to_calculate = calculate_default_user_from_task_table(detail_obj.task_id, task_arr) ;\n        return calculate_default_user(user_id_to_calculate, user_arr);\n    }\n}\n\nfunction search_user_task_from_table(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== undefined && user_task_arr !== null){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id    === user_id &&\n                user_task_arr[i].task_id    === task_id\n            ){\n                obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isUserTaskCreated(user_id, task_id, user_task_arr){\n    var obj = {} ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i < user_task_arr.length; i++){\n            if(\n                user_task_arr[i].task_id === task_id &&\n                user_task_arr[i].user_id === user_id \n            ){\n                obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction calculate_default_user(id, user_arr){\n    var obj = {};\n    if(id !== null && user_arr !== null){\n        for(var i=0; i<user_arr.length; i++){\n            if(id === user_arr[i]._id){\n                delete user_arr[i].access_token ;\n                delete user_arr[i].security_level;\n                delete user_arr[i].converstation_id ;\n                delete user_arr[i].password ;\n                delete user_arr[i].code ;\n                obj = user_arr[i];\n            }\n        }\n    }else{\n        return obj ;\n    }\n    \n    return obj;\n}\n\nfunction calculate_default_user_from_task_table(task_id , arr){\n    var obj = {} ;\n    if(\n        task_id !== undefined && task_id !== null &&\n        arr     !== undefined && arr     !== null  \n    ){\n        for(var i=0; i< arr.length; i++){\n            if(task_id === arr[i]._id){\n                if(arr.defaults !== null && arr.defaults !== undefined ){\n                    obj = arr.defaults.user ;\n                }else{\n                    return obj ;\n                }\n            }\n        }\n    }else{\n        return obj;\n    }\n}\n\nfunction search_user_task_from_table(user_id, task_id){\n    var obj = {};\n    \n    for(var i=0; i< user_task_arr.length; i++){\n        if(\n            user_task_arr[i].user_id    === user_id &&\n            user_task_arr[i].task_id    === task_id\n        ){\n            obj = user_task_arr[i];\n        }\n    }\n    \n    return obj ;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 613,
        "y": 941,
        "wires": [
            [
                "964de244.07a1a",
                "76c37c35.65d3a4"
            ]
        ]
    },
    {
        "id": "964de244.07a1a",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "User task processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 854,
        "y": 880,
        "wires": []
    },
    {
        "id": "a3cd6ad9.5090e8",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "Add to task table",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 839,
        "y": 523,
        "wires": []
    },
    {
        "id": "d9ae70b8.7f1d1",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "Add to details ",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 801,
        "y": 697,
        "wires": []
    },
    {
        "id": "76c37c35.65d3a4",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "Add to user_task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 846,
        "y": 938,
        "wires": []
    },
    {
        "id": "a41358b2.73b008",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "create response",
        "func": "msg.status = 400 ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 554,
        "y": 48,
        "wires": [
            [
                "c7def129.0fdfb"
            ]
        ]
    },
    {
        "id": "6d1dc023.a4902",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Templates list",
        "url": "/get_all_templates",
        "method": "get",
        "swaggerDoc": "",
        "x": 91,
        "y": 296,
        "wires": [
            [
                "fa5b152c.505728"
            ]
        ]
    },
    {
        "id": "c044651d.cc7628",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 485,
        "y": 296,
        "wires": []
    },
    {
        "id": "c7def129.0fdfb",
        "type": "http response",
        "z": "3b9a3280.9d537e",
        "name": "",
        "x": 740,
        "y": 50,
        "wires": []
    },
    {
        "id": "b1a8676a.a88a68",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "get_users",
        "func": "var access_token = msg.form_data.access_token,\n    users        = msg.all_users;\n\nmsg.db_user = get_user_with_ac(access_token, users);\nmsg.form_data.user_id       = msg.db_user._id ;\nmsg.form_data.from_user_id  = msg.db_user._id ;\nreturn msg;\n\nfunction get_user_with_ac(ac, users){\n    var obj = {};\n    if(users !== undefined && users !== null){\n        if(users.length){\n            for(var i=0; i < users.length; i++){\n                if(sanitize(ac) === sanitize(users[i].access_token)){\n                    obj = users[i];\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction sanitize(data){\n    if(data && typeof data === \"string\"){\n        return data.trim().toString();\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 727,
        "y": 158,
        "wires": [
            [
                "c4e12bed.db4da8"
            ]
        ]
    },
    {
        "id": "56201e3c.1f82d",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "init loop",
        "func": "var detail_obj = msg.payload ;\n\nif(detail_obj.timeout !== undefined || detail_obj.timeout !== null){\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}else{\n    msg.timeoutLength = 0;\n}\nmsg.count = 0;\n\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 391,
        "y": 619,
        "wires": [
            [
                "feb6e5db.5b8b68"
            ]
        ]
    },
    {
        "id": "feb6e5db.5b8b68",
        "type": "switch",
        "z": "3b9a3280.9d537e",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 325,
        "y": 736,
        "wires": [
            [
                "8b8c9ab7.b4a8e8"
            ],
            [
                "5257247c.cbfafc"
            ]
        ]
    },
    {
        "id": "5257247c.cbfafc",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 519,
        "y": 782,
        "wires": [
            [
                "f221c3b4.94472"
            ]
        ]
    },
    {
        "id": "fef6332d.0662",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 481,
        "y": 676,
        "wires": [
            [
                "feb6e5db.5b8b68"
            ]
        ]
    },
    {
        "id": "567c8943.df9218",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 789,
        "y": 745,
        "wires": []
    },
    {
        "id": "207a643.253979c",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "prepare data for user_task",
        "func": "var task_obj = msg.optional_task ;\n    task_arr = msg.payload ;\n\nmsg.payload = {\n\ttask_id \t\t: get_task_obj_from_arr(task_obj, task_arr),\n\tuser_id\t\t\t: task_obj.user_id,\n\tdate_updated\t: null,\t\n\tparent_id\t\t: task_obj.page_id,\n\tcount_status\t: {\n\t   active       : 1,\n\t   unread       : 0,\n\t},\n\tcount\t\t\t: {\n\t    active      : 0,\n\t    unread      : 0,\n\t},\n\tcount_if\t\t: {\n\t    active      : 1,\n\t    unread      : 0\n\t},\n\ttemplates\t\t: {},\n\ttimeout\t\t\t: {},\n\tdefaults                : {\n        parent              : null,\n        next_child          : null,\n        all_children        : null,\n        user                : task_obj.user_id\n    }\n};\nreturn msg;\n\nfunction get_task_obj_from_arr(obj, arr){\n    var data = null ;\n    if(arr.length && arr !== null){\n        for(var i=0; i < arr.length; i++){\n            if( obj.page_id === arr[i].page_id && \n                sanitize(obj.task_name) === sanitize(arr[i].task_name) &&\n                obj.user_id === arr[i].user_id\n            ){\n                data = arr[i]._id ;\n            }\n        }\n    }\n    return data ;\n}\n\nfunction sanitize(data){\n    if(data && typeof data === \"string\"){\n        return data.trim().toString();\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1343,
        "y": 571,
        "wires": [
            [
                "15fa1f6c.25fd71",
                "2491b81f.bb8518"
            ]
        ]
    },
    {
        "id": "2491b81f.bb8518",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "Add to user_task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1462,
        "y": 625,
        "wires": []
    },
    {
        "id": "86859bf3.c76ff8",
        "type": "delay",
        "z": "3b9a3280.9d537e",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 111,
        "y": 734,
        "wires": [
            [
                "961414da.90cd38"
            ]
        ]
    },
    {
        "id": "15fa1f6c.25fd71",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "creating user_task after optional task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1524,
        "y": 667,
        "wires": []
    },
    {
        "id": "b3663c9c.97a75",
        "type": "delay",
        "z": "3b9a3280.9d537e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 969,
        "y": 564,
        "wires": [
            [
                "354f7585.d9a95a"
            ]
        ]
    },
    {
        "id": "c59e5b3a.8c02c8",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "optional_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 812,
        "y": 563,
        "wires": [
            [
                "b3663c9c.97a75"
            ]
        ]
    },
    {
        "id": "354f7585.d9a95a",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "task_table",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1128,
        "y": 568,
        "wires": [
            [
                "207a643.253979c"
            ]
        ]
    },
    {
        "id": "c2434c91.73c5a",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "task_table",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 615,
        "y": 867,
        "wires": [
            [
                "a0410c5b.dbcbf"
            ]
        ]
    },
    {
        "id": "a0410c5b.dbcbf",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_table",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 111,
        "y": 945,
        "wires": [
            [
                "23020e1a.1fb342"
            ]
        ]
    },
    {
        "id": "23020e1a.1fb342",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "users",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 252,
        "y": 945,
        "wires": [
            [
                "509a6e9c.2c03a"
            ]
        ]
    },
    {
        "id": "509a6e9c.2c03a",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "users_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 942,
        "wires": [
            [
                "19a36b57.8fdda5"
            ]
        ]
    },
    {
        "id": "1254f6b3.9afac9",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "create Detail",
        "func": "var recent_task         = msg.optional_task ,\n    recent_detail       = msg.recent_detail,\n    recent_task         = msg.payload ;\n    \nmsg.payload = create_detail_message_screen(recent_task, recent_detail);\nreturn msg;\n\nfunction create_detail_message_screen(recent_task, recent_detail){\n    recent_detail.task_id           = recent_task[0]._id ;\n    recent_detail.child_task_id     = recent_task[0]._id ;\n    recent_detail.page_id           = recent_detail.to_page_id ;\n    recent_from_page_id             = recent_detail.page_id ;\n    recent_detail.to_page_id        = recent_task[0].page_id || 2 ;    \n    \n    recent_detail.user_incoming     = {} ;\n    recent_detail.watson_incoming   = {} ;\n    return recent_detail ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1138,
        "y": 701,
        "wires": [
            [
                "26810e84.140202",
                "5440a7c3.3849b8"
            ]
        ]
    },
    {
        "id": "87580122.66588",
        "type": "delay",
        "z": "3b9a3280.9d537e",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 811,
        "y": 647,
        "wires": [
            [
                "fede9208.077da"
            ]
        ]
    },
    {
        "id": "9d8962c2.9a2ab",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getTask",
        "index": "get_by_page_id",
        "x": 1159,
        "y": 646,
        "wires": [
            [
                "1254f6b3.9afac9"
            ]
        ]
    },
    {
        "id": "fede9208.077da",
        "type": "change",
        "z": "3b9a3280.9d537e",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "optional_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 947,
        "y": 646,
        "wires": [
            [
                "a824ce8e.87719"
            ]
        ]
    },
    {
        "id": "26810e84.140202",
        "type": "debug",
        "z": "3b9a3280.9d537e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1314,
        "y": 722,
        "wires": []
    },
    {
        "id": "5440a7c3.3849b8",
        "type": "cloudant out",
        "z": "3b9a3280.9d537e",
        "name": "",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1298,
        "y": 667,
        "wires": []
    },
    {
        "id": "640b76f.1a7a188",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Tasks list",
        "url": "/get_all_tasks",
        "method": "get",
        "swaggerDoc": "",
        "x": 83,
        "y": 348,
        "wires": [
            [
                "22484f2f.bb6d9"
            ]
        ]
    },
    {
        "id": "22484f2f.bb6d9",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 299,
        "y": 344,
        "wires": [
            [
                "b107a530.dac408"
            ]
        ]
    },
    {
        "id": "b107a530.dac408",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 483,
        "y": 344,
        "wires": []
    },
    {
        "id": "b5ee00e8.18692",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 491,
        "y": 400,
        "wires": []
    },
    {
        "id": "5a2459bc.be12c8",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 299,
        "y": 403,
        "wires": [
            [
                "b5ee00e8.18692"
            ]
        ]
    },
    {
        "id": "eebe8495.62faa8",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Details list",
        "url": "/get_all_details",
        "method": "get",
        "swaggerDoc": "",
        "x": 82,
        "y": 402,
        "wires": [
            [
                "5a2459bc.be12c8"
            ]
        ]
    },
    {
        "id": "928d835f.dd798",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Delete Detail",
        "url": "/delete_detail",
        "method": "post",
        "swaggerDoc": "",
        "x": 96,
        "y": 474,
        "wires": [
            [
                "28e35d64.8f7cd2"
            ]
        ]
    },
    {
        "id": "28e35d64.8f7cd2",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "condition",
        "func": "var req_body = msg.req.body ;\n\nnode.warn(\"Reached here..........\");\nnode.warn(req_body);\n\nif(req_body === null || req_body === undefined){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"req_body is required.\"};\n}else if(req_body._id === null || req_body._id === undefined){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"id is required to delete detail.\"};\n}else if(req_body.access_token === undefined && req_body.access_token === null && req_body.access_token === \"\"){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"user_id is required to delete detail.\"};\n}else{\n    msg.status = \"API_SUCCESS\";\n    msg.payload     = {_id : req_body._id};\n    msg.detail_id   = req_body._id ;\n    msg.access_token    = {query: \"access_token:\"+req_body.access_token} ;\n    node.warn(\"access_toekn\");\n    node.warn(msg.access_token);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 262,
        "y": 472,
        "wires": [
            [
                "a45d9678.7fce78",
                "e2e3e5c9.f47188"
            ]
        ]
    },
    {
        "id": "b0ec03c4.6ef99",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 412,
        "y": 469,
        "wires": [
            [
                "c81ea1aa.d7a9c"
            ],
            [
                "e2e3e5c9.f47188",
                "5716e9f7.1fd3e8"
            ]
        ]
    },
    {
        "id": "e2e3e5c9.f47188",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 556,
        "y": 525,
        "wires": []
    },
    {
        "id": "c81ea1aa.d7a9c",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 555,
        "y": 462,
        "wires": [
            [
                "8ec1d3be.4a9bc"
            ]
        ]
    },
    {
        "id": "3b2ea0e7.15de2",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1408,
        "y": 428,
        "wires": []
    },
    {
        "id": "9ba3f480.b346a8",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "res",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.payload[0] ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.API_STATUS = \"VALID_CONTENT\";\n    msg.payload = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n}else{\n    msg.API_STATUS = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.api_result = {status: 403, error: false, data: \"You are not authorized to remove record\"};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1004,
        "y": 467,
        "wires": [
            [
                "44a7e793.d5de78"
            ]
        ]
    },
    {
        "id": "5ed6659b.03c98c",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "api_result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1177,
        "y": 435,
        "wires": [
            [
                "3b2ea0e7.15de2",
                "246b98f2.516a08"
            ]
        ]
    },
    {
        "id": "d45bdfe1.6ec55",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "Update record",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1194,
        "y": 333,
        "wires": []
    },
    {
        "id": "1518dd68.3c4743",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Users Task",
        "url": "/get_user_task/:page_id/:user_id",
        "method": "get",
        "swaggerDoc": "",
        "x": 87,
        "y": 530,
        "wires": [
            [
                "88bf9057.51f98"
            ]
        ]
    },
    {
        "id": "88bf9057.51f98",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "params",
        "func": "msg.params = {\n    page_id : msg.req.params.page_id,\n    user_id : msg.req.params.user_id\n};\n\nif(msg.params.page_id === null || msg.params.page_id === \"\"){\n    msg.status  = \"API_VALIDATION_ERR\";\n    msg.payload = {status: 400, error: true, msg: \"Please check `page_id`\"};\n    return msg;\n}else if(msg.params.user_id === null || msg.params.user_id === \"\"){\n    msg.status  = \"API_VALIDATION_ERR\";\n    msg.payload = {status: 400, error: true, msg: \"Please check `user_id`\"};\n    return msg;\n}else{\n    msg.status = \"API_SUCCESS\";\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 246,
        "y": 531,
        "wires": [
            [
                "2fc8a34d.1074ec"
            ]
        ]
    },
    {
        "id": "157970cf.a0728f",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 830,
        "y": 584,
        "wires": []
    },
    {
        "id": "27a5aa33.e225f6",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 851,
        "y": 626,
        "wires": []
    },
    {
        "id": "db82b7e9.c32098",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "User task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 471,
        "y": 582,
        "wires": [
            [
                "5b1af1b0.9e25b"
            ]
        ]
    },
    {
        "id": "5b1af1b0.9e25b",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "calculate userTask",
        "func": "var params          = msg.params ,\n    user_task_arr   = msg.payload ; \nmsg.payload = get_user_task(params, user_task_arr);\n\nreturn msg;\n\n\nfunction get_user_task(params, arr){\n    var obj = {} ;\n    if(check_obj(params) > 0){\n        if(arr !== undefined && arr !== null){\n            for(var i=0; i < arr.length; i++){\n                if(\n                    parseInt(arr[i].page_id) === parseInt(params.page_id) &&\n                    arr[i].user_id === params.user_id \n                ){\n                    obj = arr[i];\n                }\n            }\n        }else{\n            obj.status = 400 ;\n            obj.error  = true ;\n            obj.msg    = \"Unable to fetch user task.\";\n            return obj;    \n        }\n    }else{\n        obj.status = 400 ;\n        obj.error  = true ;\n        obj.msg    = \"Required params like `page_id` and `user_id` to get user_task.\";\n        return obj;\n    }\n    \n    if(check_obj(obj) > 0){\n        return obj;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is no task associated with this user\";\n        obj.data   = [];\n        return obj;\n    }\n    \n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 647,
        "y": 583,
        "wires": [
            [
                "27a5aa33.e225f6",
                "157970cf.a0728f"
            ]
        ]
    },
    {
        "id": "2fc8a34d.1074ec",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 326,
        "y": 586,
        "wires": [
            [
                "db82b7e9.c32098"
            ],
            [
                "a5cbc8d.a6d5b38"
            ]
        ]
    },
    {
        "id": "a5cbc8d.a6d5b38",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 466,
        "y": 636,
        "wires": []
    },
    {
        "id": "dc0515bd.504c68",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Formatted Task",
        "url": "/get_task_names",
        "method": "get",
        "swaggerDoc": "",
        "x": 116,
        "y": 1042,
        "wires": [
            [
                "72bed019.e97e9"
            ]
        ]
    },
    {
        "id": "72bed019.e97e9",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 362,
        "y": 1040,
        "wires": [
            [
                "df53b7d2.08d318"
            ]
        ]
    },
    {
        "id": "df53b7d2.08d318",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "response",
        "func": "var tasks_arr = msg.payload , obj = {} ;\n\nif(tasks_arr === null || tasks_arr === undefined){\n    obj.status = 400 ;\n    obj.error  = true ;\n    obj.msg    = \"Unable to get the tasks\";\n    msg.paylod = obj ;\n}else{\n    if(tasks_arr.length){\n        var tasks = [];\n        for(var i=0; i < tasks_arr.length; i++){\n            tasks.push({\n                id           : tasks_arr[i]._id,\n                task_name    : tasks_arr[i].task_name || \"N/A\"     \n            });\n        }\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"Record fecthed successfully\";\n        obj.data   = tasks ;\n        msg.payload = obj ;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is not task present\";\n        msg.paylod = obj ;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 558,
        "y": 1040,
        "wires": [
            [
                "d1999932.e7a968"
            ]
        ]
    },
    {
        "id": "d1999932.e7a968",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 740,
        "y": 1038,
        "wires": []
    },
    {
        "id": "4123a06.222a66",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "update_detail -- not in use",
        "url": "/update_detail",
        "method": "put",
        "swaggerDoc": "",
        "x": 144,
        "y": 814,
        "wires": [
            [
                "5acf1735.00c968"
            ]
        ]
    },
    {
        "id": "5acf1735.00c968",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "condition",
        "func": "var req_body  = msg.req.body;\n\nif(detail_id === null || detail_id === undefined){\n    msg.status = \"API_VALIDATION_ERR\"   ;\n    msg.payload = {status: 400, error: true, msg: \"detail_id is missing to update record\"};\n}else if(req_body !== undefined && req_body !== null){\n    if(count_obj(req_body) < 0){\n        msg.status = \"API_VALIDATION_ERR\"   ;\n        msg.payload = {status: 400, error: true, msg: \"req_body must to present to update detail\"};    \n    }else{\n        msg.status = \"API_VALIDATION_ERR\"   ;\n        msg.payload = {status: 400, error: true, msg: \"req_body must be a object.\"};    \n    }\n}else{\n    msg.status      = \"API_SUCCESS\";\n    msg.detail_id   = req_body._id ;\n    msg.body        = req_body;\n}\n\nreturn msg;\n\nfunction count_obj(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 263,
        "y": 769,
        "wires": [
            [
                "d77ee050.52188"
            ]
        ]
    },
    {
        "id": "d77ee050.52188",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 395,
        "y": 770,
        "wires": [
            [
                "43e9689a.7afbd8"
            ],
            [
                "3e540348.c1461c"
            ]
        ]
    },
    {
        "id": "3e540348.c1461c",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 510,
        "y": 817,
        "wires": []
    },
    {
        "id": "43e9689a.7afbd8",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "",
        "func": "msg.payload = {_id : msg.detail_id}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 519,
        "y": 763,
        "wires": [
            [
                "ef052bf2.286e88"
            ]
        ]
    },
    {
        "id": "ef052bf2.286e88",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 637,
        "y": 763,
        "wires": [
            [
                "c4c99940.ca2708"
            ]
        ]
    },
    {
        "id": "c4c99940.ca2708",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "",
        "func": "var db_detail_obj = msg.payload ;\n    req_obj       = msg.body ;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 768,
        "y": 762,
        "wires": [
            [
                "e1a15e47.3c6a6"
            ]
        ]
    },
    {
        "id": "e1a15e47.3c6a6",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 895,
        "y": 810,
        "wires": []
    },
    {
        "id": "39239aa4.ae8f86",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "Change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1182,
        "y": 556,
        "wires": [
            [
                "fd4bca54.23f438"
            ]
        ]
    },
    {
        "id": "fd4bca54.23f438",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1331,
        "y": 554,
        "wires": [
            [
                "365294ec.37f20c"
            ]
        ]
    },
    {
        "id": "365294ec.37f20c",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "init",
        "func": "var detail          = msg.detail_obj ,\n    user_task_arr   = msg.payload ;       \n\nmsg.calculated_task = get_user_task(detail, user_task_arr);\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nnode.warn(msg.calculated_task);\nnode.warn(msg.calculated_task.length);\nreturn msg;\n\nfunction get_user_task(detail, user_tasks){\n    var tasks = [];\n    if(detail !== null && detail !== undefined){\n        if(user_tasks !== null && user_tasks !== undefined){\n            for(var i=0; i < user_tasks.length; i++){\n                console.log(parseInt(detail.to_page_id));\n                console.log(parseInt(user_tasks[i].page_id));\n                console.log(detail.user_id);\n                console.log(user_tasks[i].user_id);\n                \n                \n                if(\n                    parseInt(detail.to_page_id) === parseInt(user_tasks[i].page_id)  &&\n                    detail.user_id    === user_tasks[i].user_id\n                ){\n                    user_tasks[i].status = false   ;\n                    if(user_tasks[i].count){\n                        user_tasks[i].count.active = 0 ;\n                        user_tasks[i].count.unread = 0 ;\n                    }\n                    tasks.push(user_tasks[i]);  \n                }\n            }\n        }\n    }\n    return tasks ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1471,
        "y": 606,
        "wires": [
            [
                "d335c687.81a508"
            ]
        ]
    },
    {
        "id": "d335c687.81a508",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1606,
        "y": 708,
        "wires": [
            [
                "e9b16fbd.58f52"
            ],
            [
                "21047536.37830a"
            ]
        ]
    },
    {
        "id": "e9b16fbd.58f52",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\nmsg.payload = {\n  \"_id\": user_task_obj._id,\n  \"_rev\": user_task_obj._rev, \n  \"task_id\": user_task_obj.task_id,\n  \"user_id\": user_task_obj.user_id,\n  \"page_id\": user_task_obj.page_id,\n  \"synchronized\": user_task_obj.synchronized,\n  \"status\": user_task_obj.status,\n  \"date_updated\": user_task_obj.date_updated,\n  \"parent_id\": user_task_obj.parent_id,\n  \"count_status\": user_task_obj.count_status,\n  \"count\": user_task_obj.count,\n  \"count_if\": user_task_obj.count_if,\n  \"templates\": user_task_obj.templates,\n  \"timeout\": user_task_obj.timeout\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1755,
        "y": 705,
        "wires": [
            [
                "28038b9e.d664b4",
                "9f6187c7.343728"
            ]
        ]
    },
    {
        "id": "28038b9e.d664b4",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1684,
        "y": 640,
        "wires": [
            [
                "d335c687.81a508"
            ]
        ]
    },
    {
        "id": "21047536.37830a",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1747,
        "y": 745,
        "wires": [
            [
                "2b0b116d.d75cee"
            ]
        ]
    },
    {
        "id": "2b0b116d.d75cee",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1951,
        "y": 747,
        "wires": []
    },
    {
        "id": "9f6187c7.343728",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "user_task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1941,
        "y": 651,
        "wires": []
    },
    {
        "id": "325c4c3.eb40eb4",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "updatedObj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1182,
        "y": 506,
        "wires": [
            [
                "1377accf.f97593"
            ]
        ]
    },
    {
        "id": "1377accf.f97593",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1321,
        "y": 505,
        "wires": [
            [
                "64366a88.dc8704"
            ]
        ]
    },
    {
        "id": "64366a88.dc8704",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "init",
        "func": "var detail_arr = msg.payload ,\n    detail_obj = msg.updatedObj ;\n\nmsg.filtredArr = getDetailByToPageId(detail_arr, detail_obj);\nmsg.counter = 0;\nmsg.detail_length = msg.filtredArr.length;\nreturn msg;\n\nfunction getDetailByToPageId(arr, obj){\n    var results = [];\n    for(var i=0; i < arr.length; i++){\n        if(parseInt(arr[i].page_id) === parseInt(obj.to_page_id)){\n            results.push(arr[i]);\n        }\n    }\n    return results;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1462,
        "y": 524,
        "wires": [
            [
                "562bf1ae.3ec36"
            ]
        ]
    },
    {
        "id": "562bf1ae.3ec36",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1604,
        "y": 549,
        "wires": [
            [
                "37795d13.bf9ef2"
            ],
            [
                "cfa5eee7.77022"
            ]
        ]
    },
    {
        "id": "37795d13.bf9ef2",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1803,
        "y": 542,
        "wires": [
            [
                "d1e38600.dd4d58",
                "5902c867.47da38"
            ]
        ]
    },
    {
        "id": "d1e38600.dd4d58",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1682,
        "y": 470,
        "wires": [
            [
                "562bf1ae.3ec36"
            ]
        ]
    },
    {
        "id": "5902c867.47da38",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "Update Detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1959,
        "y": 508,
        "wires": []
    },
    {
        "id": "cfa5eee7.77022",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1795,
        "y": 578,
        "wires": [
            [
                "4c0c30d5.c81f1"
            ]
        ]
    },
    {
        "id": "4c0c30d5.c81f1",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1949,
        "y": 578,
        "wires": []
    },
    {
        "id": "680941b7.3f0d6",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Formatted Users",
        "url": "/get_users",
        "method": "get",
        "swaggerDoc": "",
        "x": 112,
        "y": 894,
        "wires": [
            [
                "5cafb19.b3b295"
            ]
        ]
    },
    {
        "id": "5cafb19.b3b295",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "users",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 337,
        "y": 891,
        "wires": [
            [
                "5fa8c572.597dbc"
            ]
        ]
    },
    {
        "id": "5fa8c572.597dbc",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "response",
        "func": "var users   = msg.payload , updated_user = [];\n\nif(users === null || users === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!users.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: users};\n}else{\n    for(var i=0; i< users.length; i++){\n        updated_user.push({id : users[i]._id, name: generate_name(users[i]) || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_user};\n}\n\nreturn msg;\n\nfunction generate_name(obj){\n    return (obj.firstname + \" \" + obj.lastname).trim();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 556,
        "y": 890,
        "wires": [
            [
                "40296a0d.f9d2b4"
            ]
        ]
    },
    {
        "id": "40296a0d.f9d2b4",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 737,
        "y": 888,
        "wires": []
    },
    {
        "id": "82b3d811.452e08",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Formatted Timeout",
        "url": "/get_all_timeout",
        "method": "get",
        "swaggerDoc": "",
        "x": 123,
        "y": 949,
        "wires": [
            [
                "9dc9694.382d798"
            ]
        ]
    },
    {
        "id": "9dc9694.382d798",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Timeout",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 350,
        "y": 946,
        "wires": [
            [
                "6547f3fe.49394c"
            ]
        ]
    },
    {
        "id": "6547f3fe.49394c",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "response",
        "func": "var timeout   = msg.payload , updated_timeout = [];\n\nif(timeout === null || timeout === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!timeout.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: timeout};\n}else{\n    for(var i=0; i< timeout.length; i++){\n        updated_timeout.push({id : timeout[i]._id, name: timeout[i].name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_timeout};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 556,
        "y": 943,
        "wires": [
            [
                "5c8c358c.02801c"
            ]
        ]
    },
    {
        "id": "5c8c358c.02801c",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 736,
        "y": 941,
        "wires": []
    },
    {
        "id": "6d573f5a.bef1e",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Formatted location",
        "url": "/get_all_location",
        "method": "get",
        "swaggerDoc": "",
        "x": 125,
        "y": 995,
        "wires": [
            [
                "5ada7917.c34df8"
            ]
        ]
    },
    {
        "id": "5ada7917.c34df8",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Location",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 352,
        "y": 992,
        "wires": [
            [
                "189bb926.855f77"
            ]
        ]
    },
    {
        "id": "189bb926.855f77",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "response",
        "func": "var location   = msg.payload , updated_location = [];\n\nif(location === null || location === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!location.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: location};\n}else{\n    for(var i=0; i< location.length; i++){\n        updated_location.push({id : location[i]._id, name: location[i].location_name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_location};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 553,
        "y": 990,
        "wires": [
            [
                "5084712e.18164"
            ]
        ]
    },
    {
        "id": "5084712e.18164",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 736,
        "y": 991,
        "wires": []
    },
    {
        "id": "a824ce8e.87719",
        "type": "function",
        "z": "3b9a3280.9d537e",
        "name": "recent_task",
        "func": "msg.payload = {\n    query:\"page_id:\"+ check_number(msg.optional_task.page_id),\n    sort:[\"_id<string>\"]\n};\nreturn msg;\n\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1082,
        "y": 611,
        "wires": [
            [
                "9d8962c2.9a2ab"
            ]
        ]
    },
    {
        "id": "fea269eb.c14618",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Task by Id",
        "url": "/get_task_by/:task_id",
        "method": "get",
        "swaggerDoc": "",
        "x": 92,
        "y": 703,
        "wires": [
            [
                "2c90a94d.4decf6"
            ]
        ]
    },
    {
        "id": "2c90a94d.4decf6",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "condition",
        "func": "var params = msg.req.params;\n\nif(params.task_id !== undefined && params.task_id !== \"\"){\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.payload    = {_id : params.task_id};\n    return msg;\n}else{\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Validation error\", data: null};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 275,
        "y": 703,
        "wires": [
            [
                "1a5e5607.2f0a0a"
            ]
        ]
    },
    {
        "id": "1a5e5607.2f0a0a",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 405,
        "y": 701,
        "wires": [
            [
                "7db3d66e.175c28"
            ],
            [
                "176a8c07.210764"
            ]
        ]
    },
    {
        "id": "176a8c07.210764",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 815,
        "y": 717,
        "wires": []
    },
    {
        "id": "7db3d66e.175c28",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 526,
        "y": 687,
        "wires": [
            [
                "b02a73fd.69344"
            ]
        ]
    },
    {
        "id": "b02a73fd.69344",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "res",
        "func": "if(msg.payload === null){\n    msg.payload = {status: 200, error: false, msg:\"No record found\", data: {}};\n    return msg;\n}else{\n    msg.payload = {status: 200, error: false, msg:\"Record fecthed successfully\", data: msg.payload};\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 651,
        "y": 686,
        "wires": [
            [
                "176a8c07.210764"
            ]
        ]
    },
    {
        "id": "8ec1d3be.4a9bc",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 692,
        "y": 461,
        "wires": [
            [
                "fc41ca86.c75b38"
            ]
        ]
    },
    {
        "id": "ca159d1d.d25c7",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 1002,
        "y": 514,
        "wires": [
            [
                "9ba3f480.b346a8"
            ]
        ]
    },
    {
        "id": "5bdf73aa.a1ae3c",
        "type": "inject",
        "z": "b36c258c.f48c68",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 84,
        "y": 394,
        "wires": [
            [
                "37b16c28.badbd4"
            ]
        ]
    },
    {
        "id": "37b16c28.badbd4",
        "type": "function",
        "z": "b36c258c.f48c68",
        "name": "",
        "func": "msg.payload = {\n    query: \"access_token:1491559739601.9v8j0nep470vygb9\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 231,
        "y": 422,
        "wires": [
            [
                "414c1708.25b468"
            ]
        ]
    },
    {
        "id": "414c1708.25b468",
        "type": "cloudant in",
        "z": "b36c258c.f48c68",
        "name": "",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 383,
        "y": 419,
        "wires": [
            [
                "68cf7e0d.648f9"
            ]
        ]
    },
    {
        "id": "68cf7e0d.648f9",
        "type": "debug",
        "z": "b36c258c.f48c68",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 608,
        "y": 467,
        "wires": []
    },
    {
        "id": "fc41ca86.c75b38",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "move",
        "rules": [
            {
                "t": "move",
                "p": "access_token",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 836,
        "y": 460,
        "wires": [
            [
                "ca159d1d.d25c7",
                "d7fc86f2.a4f358"
            ]
        ]
    },
    {
        "id": "44a7e793.d5de78",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "Condition",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "VALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1011,
        "y": 417,
        "wires": [
            [
                "d45bdfe1.6ec55",
                "39239aa4.ae8f86",
                "f1cf2a9a.3914a8",
                "82e347f.1fb19b8",
                "325c4c3.eb40eb4"
            ],
            [
                "5ed6659b.03c98c"
            ]
        ]
    },
    {
        "id": "246b98f2.516a08",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1425,
        "y": 377,
        "wires": []
    },
    {
        "id": "f1cf2a9a.3914a8",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "api res",
        "func": "msg.payload = {status: 200, error: false, data: \"Record deleted successfully\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 389,
        "wires": [
            [
                "59a5d5af.49e60c"
            ]
        ]
    },
    {
        "id": "59a5d5af.49e60c",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1392,
        "y": 325,
        "wires": []
    },
    {
        "id": "82e347f.1fb19b8",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1182,
        "y": 294,
        "wires": []
    },
    {
        "id": "eeddd1cb.d3c1f",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Update Task",
        "url": "/update_task",
        "method": "post",
        "swaggerDoc": "",
        "x": 108,
        "y": 1118,
        "wires": [
            [
                "3603261a.78605a"
            ]
        ]
    },
    {
        "id": "53b876a.63a0788",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 629,
        "y": 1155,
        "wires": []
    },
    {
        "id": "3603261a.78605a",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "msg.payload",
        "func": "var task_obj = msg.req.body;\n\nmsg.payload = {\n        _id                         : task_obj._id,\n        _rev                        : task_obj._rev,\n        task_name                   : task_obj.task_name,\n        user_id                     : task_obj.user_id,\n        page_id                     : task_obj.page_id,\n        from_page_id                : task_obj.from_page_id,\n        parent_id                   : task_obj.parent_id,\n        header_template_id          : task_obj.header_template_id,\n        detail_template_id          : task_obj.detail_template_id,\n        footer_template_id          : task_obj.footer_template_id,\n        timeout_id                  : task_obj.timeout_id,\n        child_default_task_id       : task_obj.child_default_task_id,\n        child_default_task_name     : task_obj.child_default_task_name,\n        date_created                : task_obj.date_created,\n        type                        : task_obj.type,\n        status                      : task_obj.status,\n        category                    : task_obj.category,\n        additional_data_fn          : task_obj.additional_data_fn,\n        optional_data               : task_obj.optional_data,\n        required_data               : task_obj.required_data,\n        offline_expiration_time     : task_obj.offline_expiration_time,\n        display_if_empty            : task_obj.display_if_empty,\n        image                       : task_obj.image\n    };\n    \nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1118,
        "wires": [
            [
                "bce76a51.a086d8",
                "30a70443.cc294c"
            ]
        ]
    },
    {
        "id": "bce76a51.a086d8",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "Update record",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 508,
        "y": 1106,
        "wires": []
    },
    {
        "id": "30a70443.cc294c",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 487,
        "y": 1159,
        "wires": [
            [
                "53b876a.63a0788"
            ]
        ]
    },
    {
        "id": "781230d2.ba8ef",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Users",
        "url": "/get_all_users",
        "method": "get",
        "swaggerDoc": "",
        "x": 517,
        "y": 91,
        "wires": [
            [
                "1a775952.aabea7"
            ]
        ]
    },
    {
        "id": "1a775952.aabea7",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Users Collections",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 675,
        "y": 142,
        "wires": [
            [
                "8463e60d.def898"
            ]
        ]
    },
    {
        "id": "8463e60d.def898",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 876,
        "y": 142,
        "wires": []
    },
    {
        "id": "caf3d191.e43cf",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Update User",
        "url": "/update_user_info/:user_id",
        "method": "put",
        "swaggerDoc": "",
        "x": 109,
        "y": 1213,
        "wires": [
            [
                "62dfd57.897002c"
            ]
        ]
    },
    {
        "id": "62dfd57.897002c",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "payload",
        "func": "\nif(msg.req.params.user_id !== undefined && msg.req.params.user_id !== null && msg.req.params.user_id !== \"\"){\n    msg.API_STATUS = \"SUCESS\" ;\n    msg.payload = {_id : msg.req.params.user_id};    \n    msg.req_body = msg.req.body;\n    return msg;\n}else{\n    msg.API_STATUS = \"ERROR\" ;\n    msg.api_result = {status: 400, error: true, msg: \"`user_id` is missing\", data: []};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 1213,
        "wires": [
            [
                "cde2cc11.96925"
            ]
        ]
    },
    {
        "id": "5294f6b.d894108",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 924,
        "y": 1259,
        "wires": []
    },
    {
        "id": "ac862531.cdfeb8",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 778,
        "y": 1259,
        "wires": [
            [
                "5294f6b.d894108"
            ]
        ]
    },
    {
        "id": "23ea141b.8110bc",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "payload",
        "func": "var req_body = msg.req.body;\n    user_obj = msg.payload ;\nmsg.payload = {\n            _id: req_body.user_id,\n            _rev: user_obj._rev,\n            virtual_phone: req_body.phone,\n            email: req_body.email,\n            first_name: req_body.f_name,\n            last_name: req_body.l_name,\n            password: req_body.phone,\n        };\n    node.warn(msg.payload);\nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 619,
        "y": 1219,
        "wires": [
            [
                "ac862531.cdfeb8",
                "cbcc8872.c2da48"
            ]
        ]
    },
    {
        "id": "66c4ba2.65ed844",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "User",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 492,
        "y": 1220,
        "wires": [
            [
                "23ea141b.8110bc"
            ]
        ]
    },
    {
        "id": "cbcc8872.c2da48",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 772,
        "y": 1217,
        "wires": []
    },
    {
        "id": "cde2cc11.96925",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 379,
        "y": 1252,
        "wires": [
            [
                "66c4ba2.65ed844"
            ],
            [
                "ac862531.cdfeb8"
            ]
        ]
    },
    {
        "id": "44ad3842.62e8a8",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Update short detail",
        "url": "/update_short_details",
        "method": "put",
        "swaggerDoc": "",
        "x": 126,
        "y": 1324,
        "wires": [
            [
                "eeb733fb.99ea5"
            ]
        ]
    },
    {
        "id": "7186c287.a7506c",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "phone",
        "func": "//node.warn(JSON.stringify(msg.user_data));\nmsg.access_token = msg.user_data.access_token;\n\nmsg.payload = {\n    query: \"virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "d86876c3.a368d8"
            ]
        ]
    },
    {
        "id": "41a10368.8822bc",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "7855dba7.bded24",
        "type": "http in",
        "z": "505a09c5.621328",
        "name": "",
        "url": "/api/gettoken",
        "method": "get",
        "swaggerDoc": "",
        "x": 230,
        "y": 80,
        "wires": [
            [
                "ee5676a9.76c848"
            ]
        ]
    },
    {
        "id": "ee5676a9.76c848",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "generate ac",
        "func": "var rand = function() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n};\nvar time = function() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n};\n\nvar token = function() {\n    return time()+'.'+rand(); // to make it longer\n};\n\nvar access_token = token();\nvar payload = {\"access_token\": access_token};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "41a10368.8822bc"
            ]
        ]
    },
    {
        "id": "7803a4ba.36e64c",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 409,
        "y": 287,
        "wires": []
    },
    {
        "id": "d58df840.89ee38",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\nmsg.verification_code = rand();\n\nfunction check_obj(obj){\n    // node.warn(\"obj check obj >>>\");\n    // node.warn(obj);\n    \n    if(obj === null || obj === undefined ){\n        return 0 ;\n    }else{\n        return Object.keys(obj).length ;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    payload = {\n        _id:            db_data[0]._id,\n        _rev:           db_data[0]._rev,\n        access_token:   user_data.access_token || db_data[0].access_token,\n        virtual_phone:          parseInt(user_data.phone),\n        security_level: db_data[0].security_level,\n        code:           db_data[0].code\n    };\n    node.warn(payload);\n}\nelse {\n    //node.warn(\"comes in else case\");\n    payload = {\n        access_token:   user_data.access_token,\n        virtual_phone:          parseInt(user_data.phone),\n        security_level: 0,\n        code:           msg.verification_code\n    };\n}\n\nmsg.payload = payload;\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "7803a4ba.36e64c",
                "b75807ef.c8af88",
                "426e5187.75c3d"
            ]
        ]
    },
    {
        "id": "61e00bf5.7542f4",
        "type": "http in",
        "z": "505a09c5.621328",
        "name": "",
        "url": "/api/login",
        "method": "get",
        "swaggerDoc": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "db69296f.28fea8",
                "b77a7a77.4d7c98"
            ]
        ]
    },
    {
        "id": "db69296f.28fea8",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "7186c287.a7506c"
            ]
        ]
    },
    {
        "id": "d86876c3.a368d8",
        "type": "cloudant in",
        "z": "505a09c5.621328",
        "name": "get user by phone",
        "cloudant": "76512216.4472ac",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_user",
        "index": "phone",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "de85adbc.6754",
                "628b31ce.f25a"
            ]
        ]
    },
    {
        "id": "de85adbc.6754",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "d58df840.89ee38"
            ]
        ]
    },
    {
        "id": "426e5187.75c3d",
        "type": "cloudant out",
        "z": "505a09c5.621328",
        "name": "save user to db",
        "cloudant": "76512216.4472ac",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "c3b5731.5c1fc9",
        "type": "http in",
        "z": "505a09c5.621328",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "42191b01.3a5b14",
                "2c072fa6.f5b59"
            ]
        ]
    },
    {
        "id": "42191b01.3a5b14",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 600,
        "wires": [
            [
                "e56e2da1.ba451"
            ]
        ]
    },
    {
        "id": "e56e2da1.ba451",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. access_token",
        "func": "msg.access_token = msg.request_data.access_token; \nmsg.payload = {\"access_token\": msg.request_data.access_token};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 600,
        "wires": [
            [
                "f7ec356e.eb9568"
            ]
        ]
    },
    {
        "id": "b75807ef.c8af88",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "security_level",
        "property": "payload.security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "c73b58c0.0a4d18"
            ],
            [
                "8c38552f.3e1b78"
            ]
        ]
    },
    {
        "id": "8c38552f.3e1b78",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. return menu page",
        "func": "//node.warn(\"comes in this case.....\");\nvar response = {\n    \"page_id\":      2,\n    \"access_token\": msg.access_token\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 655,
        "y": 526,
        "wires": [
            [
                "dd88b5c9.2e1168",
                "3ea3a102.57f93e"
            ]
        ]
    },
    {
        "id": "3ea3a102.57f93e",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 989,
        "y": 536,
        "wires": []
    },
    {
        "id": "f7ec356e.eb9568",
        "type": "cloudant in",
        "z": "505a09c5.621328",
        "name": "get user by token",
        "cloudant": "76512216.4472ac",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 742,
        "y": 600,
        "wires": [
            [
                "b426c1f6.f09e8"
            ]
        ]
    },
    {
        "id": "b426c1f6.f09e8",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 202,
        "y": 680,
        "wires": [
            [
                "4924a8d8.356e18"
            ]
        ]
    },
    {
        "id": "4924a8d8.356e18",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n// node.warn(JSON.stringify(db_data));\n// node.warn(JSON.stringify(request_data));\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].phone).length == 4){\n        if(request_data.code == 1234){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].phone).length == 7){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 462,
        "y": 680,
        "wires": [
            [
                "74d84c05.9f6ee4"
            ]
        ]
    },
    {
        "id": "b7b07cb6.8ee87",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 982,
        "y": 840,
        "wires": []
    },
    {
        "id": "74d84c05.9f6ee4",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 242,
        "y": 760,
        "wires": [
            [
                "45c09b7.5237264"
            ],
            [
                "8e411c33.cb121"
            ]
        ]
    },
    {
        "id": "f46a8552.d393f8",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  2,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 752,
        "y": 780,
        "wires": [
            [
                "b7b07cb6.8ee87"
            ]
        ]
    },
    {
        "id": "5740c095.59b7d",
        "type": "cloudant out",
        "z": "505a09c5.621328",
        "name": "update security level",
        "cloudant": "76512216.4472ac",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 772,
        "y": 720,
        "wires": []
    },
    {
        "id": "45c09b7.5237264",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0];\n//node.warn(JSON.stringify(db_data));\n\npayload = {\n    _id:            db_data._id,\n    _rev:           db_data._rev,\n    access_token:   db_data.access_token,\n    virtual_phone:          parseInt(db_data.phone),\n    security_level: 1,\n    code:           db_data.code\n};\n    \nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 472,
        "y": 760,
        "wires": [
            [
                "f46a8552.d393f8",
                "5740c095.59b7d"
            ]
        ]
    },
    {
        "id": "8e411c33.cb121",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 472,
        "y": 840,
        "wires": [
            [
                "b7b07cb6.8ee87"
            ]
        ]
    },
    {
        "id": "eeb733fb.99ea5",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "payload",
        "func": "msg.req_body = msg.req.body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 311,
        "y": 1337,
        "wires": [
            [
                "8bda7451.d16258",
                "8ae121a8.38b74"
            ]
        ]
    },
    {
        "id": "8bda7451.d16258",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "detail_payload",
        "func": "msg.payload = {_id : msg.req_body.detail.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 494,
        "y": 1334,
        "wires": [
            [
                "b41c8ab4.6685d8"
            ]
        ]
    },
    {
        "id": "8ae121a8.38b74",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "task_payload",
        "func": "msg.payload = {_id: msg.req_body.task.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 486,
        "y": 1386,
        "wires": [
            [
                "6fbe078c.8dd708"
            ]
        ]
    },
    {
        "id": "b41c8ab4.6685d8",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 643,
        "y": 1334,
        "wires": [
            [
                "aedff6f3.104678"
            ]
        ]
    },
    {
        "id": "6fbe078c.8dd708",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Tasks",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 645,
        "y": 1388,
        "wires": [
            [
                "13fe9be2.8efc44"
            ]
        ]
    },
    {
        "id": "aedff6f3.104678",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "populate",
        "func": "var detail_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(check_obj(detail_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        msg.payload = {\n              _id: detail_obj._id,\n              _rev: detail_obj._rev,\n              task_id: detail_obj.task_id,\n              child_task_id: detail_obj.child_task_id,\n              user_id: detail_obj.user_id,\n              from_user_id: detail_obj.from_user_id,\n              page_id: detail_obj.page_id,\n              from_page_id: detail_obj.from_page_id,\n              to_page_id: detail_obj.to_page_id,\n              synchronized: detail_obj.synchronized,\n              processed: detail_obj.processed,\n              status: detail_obj.status,\n              read: detail_obj.read,\n              display_if_empty: detail_obj.display_if_empty,\n              date_created: detail_obj.date_created,\n              offline_expiration_seconds: detail_obj.offline_expiration_seconds,\n              priority: detail_obj.priority,\n              type: detail_obj.type,\n              from_user: detail_obj.from_user,\n              user_incoming: {\n                note: req_body.detail.message,\n                message: req_body.detail.message \n              },\n              watson_incoming: {\n                message: \"Watson response to : \" + req_body.detail.message,\n                response: {}\n              },\n              template: detail_obj.template,\n              timeout: detail_obj.timeout,\n              user_calculate: detail_obj.user_calculate,\n              location: detail_obj.location,\n              default: detail_obj.default,\n              createdAt: detail_obj.createdAt\n            };\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update data\", data: []};\n    }\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 787,
        "y": 1334,
        "wires": [
            [
                "1462d3bd.6e0bac"
            ]
        ]
    },
    {
        "id": "1462d3bd.6e0bac",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 958,
        "y": 1338,
        "wires": [
            [
                "c63b26ed.7d9658",
                "8389ab5e.dbacb8"
            ],
            [
                "481d2a96.39eb64"
            ]
        ]
    },
    {
        "id": "c63b26ed.7d9658",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1167,
        "y": 1318,
        "wires": []
    },
    {
        "id": "481d2a96.39eb64",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1186,
        "y": 1360,
        "wires": []
    },
    {
        "id": "13fe9be2.8efc44",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "populate",
        "func": "var task_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(check_obj(task_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            task_name                   : req_body.task.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : req_body.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update task obj\", data: []};\n    }\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 792,
        "y": 1390,
        "wires": [
            [
                "a44065e9.873ba8"
            ]
        ]
    },
    {
        "id": "a44065e9.873ba8",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 955,
        "y": 1381,
        "wires": [
            [
                "b2a0d56f.c35bd8"
            ],
            [
                "481d2a96.39eb64"
            ]
        ]
    },
    {
        "id": "b2a0d56f.c35bd8",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1189,
        "y": 1398,
        "wires": []
    },
    {
        "id": "8389ab5e.dbacb8",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "res",
        "rules": [
            {
                "t": "move",
                "p": "apiResult",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1165,
        "y": 1277,
        "wires": [
            [
                "a3502143.58678"
            ]
        ]
    },
    {
        "id": "a3502143.58678",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1306,
        "y": 1277,
        "wires": []
    },
    {
        "id": "d7fc86f2.a4f358",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1024,
        "y": 573,
        "wires": []
    },
    {
        "id": "ee3e58da.73d358",
        "type": "http in",
        "z": "c80a9dd2.e75c1",
        "name": "Get page",
        "url": "/api/getpage",
        "method": "get",
        "swaggerDoc": "",
        "x": 86,
        "y": 69,
        "wires": [
            [
                "46571991.08ef08"
            ]
        ]
    },
    {
        "id": "46571991.08ef08",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 223,
        "y": 119,
        "wires": [
            [
                "fd10684c.bdb418",
                "cb90d33.8efda3"
            ]
        ]
    },
    {
        "id": "77cb89bd.2042b8",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "get user by token",
        "cloudant": "5e923e83.d5527",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "e5da9c71.f4718"
            ]
        ]
    },
    {
        "id": "e5da9c71.f4718",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 269,
        "y": 244,
        "wires": [
            [
                "450b1c37.751644"
            ]
        ]
    },
    {
        "id": "450b1c37.751644",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "check access token",
        "func": "var user_data = msg.db_user;\nvar response = {};\nnode.warn(JSON.stringify(user_data));\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(user_data) > 0) {//if access token exist\n    var security_level = user_data[0].security_level;\n    \n    if(!security_level){\n        response.status = \"verify\";\n    }\n    else{\n        response.status = \"valid\";\n    }\n}\nelse{\n    response.status = \"invalid\";\n}\n\nmsg.payload = response;\n\nnode.warn(\"before return the page\");\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 240,
        "wires": [
            [
                "cf40c8e5.1f9dd8"
            ]
        ]
    },
    {
        "id": "cf40c8e5.1f9dd8",
        "type": "switch",
        "z": "c80a9dd2.e75c1",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "b6a06be7.34a818"
            ],
            [
                "1b7d6a53.4e8eb6"
            ],
            [
                "a11dba74.944348"
            ]
        ]
    },
    {
        "id": "12701435.928c3c",
        "type": "inject",
        "z": "c80a9dd2.e75c1",
        "name": "get table data",
        "topic": "table",
        "payload": "{\"id\": \"11_h\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 716,
        "wires": [
            [
                "7f5840e4.04827"
            ]
        ]
    },
    {
        "id": "60f7ee46.3744a",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "get data",
        "func": "msg.payload = msg.db_data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 716,
        "wires": [
            [
                "98698b74.e93ba8",
                "7407a770.f114a8"
            ]
        ]
    },
    {
        "id": "98698b74.e93ba8",
        "type": "http response",
        "z": "c80a9dd2.e75c1",
        "name": "API Result",
        "x": 970,
        "y": 716,
        "wires": []
    },
    {
        "id": "7407a770.f114a8",
        "type": "debug",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 970,
        "y": 756,
        "wires": []
    },
    {
        "id": "c006cbaa.9b3808",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "get table by id",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "getPage",
        "index": "page_id",
        "x": 500,
        "y": 716,
        "wires": [
            [
                "c4520e08.3f5f4"
            ]
        ]
    },
    {
        "id": "c4520e08.3f5f4",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "db_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 716,
        "wires": [
            [
                "60f7ee46.3744a"
            ]
        ]
    },
    {
        "id": "7f5840e4.04827",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "obj_id",
        "func": "msg.payload = {\"_id\": msg.payload.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 716,
        "wires": [
            [
                "ce68f3c8.15a1",
                "c006cbaa.9b3808"
            ]
        ]
    },
    {
        "id": "ce68f3c8.15a1",
        "type": "debug",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 788.0000305175781,
        "wires": []
    },
    {
        "id": "f53b112e.de6d8",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "task_id",
        "func": "//node.warn(JSON.stringify(msg.detail_data));\nvar task_data = msg.task_data;\n\nif(task_data === undefined || task_data === null){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {\n        status : 400,\n        error: true,\n        msg: \"Unable to populate page using `page_id`\",\n        data: null\n    };\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.detail_payload = {\"page_id\": task_data[0].page_id};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 352,
        "wires": [
            [
                "c6ea2276.35e88"
            ]
        ]
    },
    {
        "id": "59a6f508.0e870c",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "task_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 259,
        "y": 300,
        "wires": [
            [
                "f53b112e.de6d8"
            ]
        ]
    },
    {
        "id": "a11dba74.944348",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "page_id",
        "func": "msg.payload = {\n    query:\"page_id:\"+ check_number(msg.request_data.page_id),\n    sort:[\"_id<string>\"]\n};\n\nnode.warn(\"preparing the msg.payload\");\nnode.warn(msg.payload);\nreturn msg;\n\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "d0cf4057.e9198"
            ]
        ]
    },
    {
        "id": "2eca6439.239b7c",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "detail_payload",
        "rules": [
            {
                "t": "move",
                "p": "detail_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 643,
        "y": 351,
        "wires": [
            [
                "e1a6364f.f45ef8"
            ]
        ]
    },
    {
        "id": "e1a6364f.f45ef8",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_details",
        "index": "page_id",
        "x": 813,
        "y": 347,
        "wires": [
            [
                "75f40c7e.55bd54"
            ]
        ]
    },
    {
        "id": "75f40c7e.55bd54",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "detail_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 411,
        "y": 416,
        "wires": [
            [
                "ecf03812.48f8f8"
            ]
        ]
    },
    {
        "id": "ecf03812.48f8f8",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "all templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "getPage",
        "index": "page_id",
        "x": 610,
        "y": 416,
        "wires": [
            [
                "683c5742.39f7f8"
            ]
        ]
    },
    {
        "id": "683c5742.39f7f8",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "template_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "template_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 809,
        "y": 420,
        "wires": [
            [
                "f5e54702.9ac248"
            ]
        ]
    },
    {
        "id": "dfa70542.f2fb98",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "detailObj",
        "func": "//node.warn(JSON.stringify(msg.detail_data));\nvar detail_data = msg.detail_data;\nvar detailObj = [];\nif(detail_data === undefined || detail_data === null){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find detail with `page_id`\", data: null};\n    return msg;\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n//**********    detailObj     *******//\nvar detailRecord = {\n    \"_id\": \t\"\",\n    \"image\":\t\t\"\",\n    \"to_page_id\": \t\"\",\n    \"user_id\": \t\t\"\",\n    \"task_id\":      \"\",\n    \"page_id\":      \"\",\n    \"from_user_id\": \"\",\n\t\"user_incoming\":{},\n    \"watson_incoming\":{},\n    \"type\":         {},\n    \"date_created\": \"\",\n    \"from_user\":    {},\n    \"count\":{\"active\":0, \"unread\":0}\n};\nif(detail_data.length){\n    for(var d=0; d<detail_data.length; d++){\n        detail_data[d]._id = detail_data[d]._id;\n        detail_data[d].to_page_id = detail_data[d].to_page_id;\n        \n        if(check_isDisplay(detail_data[d].display_if_empty)){\n            detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n            detailObj[d].task_name = msg.taskObj.task_name ;\n        }else{\n            detail_data.splice(d, 0)    ;\n        }\n    }\n    msg.detailObj = removeEmptyArrayElements(detailObj);     \n}else{\n    msg.detailObj = [] ;\n}\n\nreturn msg;\n\nfunction check_isDisplay(d){\n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 603,
        "y": 497,
        "wires": [
            [
                "b5d0e512.1ee5a8"
            ]
        ]
    },
    {
        "id": "f5e54702.9ac248",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "taskObj",
        "func": "var task_data = msg.task_data[0];\nvar templateObj = {};\nvar header_template_id = task_data.header_template_id;\nvar detail_template_id = task_data.detail_template_id;\nvar footer_template_id = task_data.footer_template_id;\nvar template_data = msg.template_data;\n\nfor(var ind=0; ind<template_data.length; ind++){\n    if(header_template_id == template_data[ind]._id){\n        templateObj.header = template_data[ind];\n    }\n    if(detail_template_id == template_data[ind]._id){\n        templateObj.detail = template_data[ind];\n    }\n    if(footer_template_id == template_data[ind]._id){\n        templateObj.footer = template_data[ind];\n    }\n}\n\n\nvar taskObj = {\n    \"task_id\":\t\t    task_data._id,\n    \"task_name\":\t\ttask_data.task_name,\n    \"template\": \t\ttemplateObj,\n    \"from_page_id\":\t\ttask_data.from_page_id,\n    \"child_task_id\":    task_data.child_default_task_id,\n    \"date_created\":     task_data.date_created\n};\n\nmsg.taskObj = taskObj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 427,
        "y": 495,
        "wires": [
            [
                "dfa70542.f2fb98"
            ]
        ]
    },
    {
        "id": "61f90ea0.c2877",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_details",
        "index": "page_id",
        "x": 650,
        "y": 860,
        "wires": [
            [
                "6d234add.a72654"
            ]
        ]
    },
    {
        "id": "3d0a0f60.d21f5",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "page_id",
        "func": "msg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"-_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 860,
        "wires": [
            [
                "61f90ea0.c2877"
            ]
        ]
    },
    {
        "id": "6d234add.a72654",
        "type": "debug",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 830,
        "y": 864,
        "wires": []
    },
    {
        "id": "2534480e.566668",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 860,
        "wires": [
            [
                "3d0a0f60.d21f5"
            ]
        ]
    },
    {
        "id": "4b4d4938.388e68",
        "type": "inject",
        "z": "c80a9dd2.e75c1",
        "name": "get page data",
        "topic": "table",
        "payload": "{\"page_id\":11}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 132,
        "y": 859,
        "wires": [
            [
                "2534480e.566668"
            ]
        ]
    },
    {
        "id": "fd10684c.bdb418",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "access_token",
        "func": "node.warn(msg);\nvar access_token = msg.request_data.access_token;\nif(!access_token){\n    msg.payload = {\"access_token\": null};\n}\nelse {\n    msg.payload = {\"access_token\": access_token};\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "4371ecd0.91cc14"
            ]
        ]
    },
    {
        "id": "4371ecd0.91cc14",
        "type": "switch",
        "z": "c80a9dd2.e75c1",
        "name": "exist?",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "b6a06be7.34a818"
            ],
            [
                "77cb89bd.2042b8"
            ]
        ]
    },
    {
        "id": "b6a06be7.34a818",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "generate ac",
        "func": "var rand = function() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n};\nvar time = function() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n};\n\nvar token = function() {\n    return time()+'.'+rand(); // to make it longer\n};\n\nvar access_token = token();\nglobal.set('access_token', access_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 60,
        "wires": [
            [
                "2e725374.8a90fc"
            ]
        ]
    },
    {
        "id": "2e725374.8a90fc",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "page_id=1",
        "func": "msg.request_data.page_id = 1;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\n\nnode.warn(\"reached here.....\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 120,
        "wires": [
            [
                "d0cf4057.e9198"
            ]
        ]
    },
    {
        "id": "1b7d6a53.4e8eb6",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "page_id=11",
        "func": "msg.request_data.page_id = 11;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "d0cf4057.e9198"
            ]
        ]
    },
    {
        "id": "3e01db63.255ac4",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "userObj",
        "func": "var db_user = msg.db_user;\nnode.warn(\">>>>>>>>>>>>\");\n\nnode.warn(msg);\nif(db_user !== undefined  && db_user !== null && db_user.length) {\n    var user_type = {\"public\":\"public\"};\n    if(typeof db_user[0].type !=\"undefined\") {\n\t\tuser_type = db_user[0].type;\n\t}\n    var userObj = {\n        \"user_id\":\t\t\tdb_user[0]._id,\n        \"long_url\": \t\t\"\",\n        \"access_token\":\t\t\"\",\n        \"security_level\":\t\"\",\n        \"phone\":\t\t\t\"\",\n        \"virtual_phone\":\t\"\",\n        \"email\":\t\t\t\"\",\n        \"other\":\t\t\t\"\",\n        \"conversation_id\":\t\"\",\n        \"firstname\": \t\t\"\",\n        \"lastname\": \t\t\"\",\n        \"type\": \t\t    user_type,\n        \"image\":\t\t\t\"\",\n    };\n    msg.userObj = get_obj_data(userObj, db_user[0]);\n}else{\n    msg.userObj = {};\n}\nreturn msg;\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = obj1;\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t}\n\treturn obj;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 879,
        "y": 504,
        "wires": [
            [
                "1710dc2c.f7b9a4"
            ]
        ]
    },
    {
        "id": "1710dc2c.f7b9a4",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "User_Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 148,
        "y": 592,
        "wires": [
            [
                "e7cd8859.436ee8"
            ]
        ]
    },
    {
        "id": "ca42ebf0.f519c8",
        "type": "cloudant out",
        "z": "c80a9dd2.e75c1",
        "name": "Update User Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1292,
        "y": 548,
        "wires": []
    },
    {
        "id": "e7cd8859.436ee8",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_task_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 591,
        "wires": [
            [
                "ed816793.a03318"
            ]
        ]
    },
    {
        "id": "4ddbbae7.ff70a4",
        "type": "function",
        "z": "c80a9dd2.e75c1",
        "name": "return page",
        "func": "var page_id         = msg.request_data.page_id;\nvar userObj         = msg.userObj;\nvar taskObj         = msg.taskObj;\nvar user_task_arr   = msg.user_task_arr ;\nvar details         = [];\n\ntry{\n    details =  msg.detail_arr.sort(function(a,b){\n        details = details.sort(function(a,b){\n        \tif(typeof a.page_id === 'number'){\n        \t\treturn (a.page_id - b.page_id);\t\n        \t}else{\n        \t\treturn (a.createdAt - b.createdAt);\t\n        \t}\n        \t\n        });\n    \t//return (a.createdAt - b.createdAt);\n    });\n    \n    var apiResult = {\n            \"page_id\":  page_id,\n            \"user\":     userObj,\n            \"task\":     taskObj,\n            \"detail\":   getpage()\n    \t};\n    if(page_id == 1){\n    \tapiResult.access_token = global.get('access_token');\n    }    \n    msg.payload = apiResult;\n}catch(e){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Exception occured while populating page\", data: e};\n}\n\n\nreturn msg;\n\nfunction getpage(page_id){\n    var result = get_page_array(page_id) ,\n        detail = result.detail_array ;\n        //update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: result.count}, false);\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(page_id){\n    var detail_array = msg.detailObj ;\n\n    node.warn(\"get_page_array fn\");\n    node.warn(detail_array);\n    \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        if(detail_array[itr].to_page_id){   \n            //count = user_task(userObj.user_id, taskObj.task_id, detail_array[itr].page_id).count ;\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            if(count){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: count}, false);\n            }\n            //count = get_sub_detail_counts(userObj.user_id, taskObj.task_id, detail_array[itr].page_id);\n        }else{\n            var user_task_obj = user_task(detail_array[itr].user_id, detail_array[itr].task_id, detail_array[itr].page_id);\n            if (check_obj(user_task_obj) > 0){\n                 // do count_if check using user_task fields as do in update_user_task\n                current_count_active = user_task_obj.count.active ;\n                current_count_unread = user_task_obj.count.unread ;\n            }else{ // otherwise use defaults\n                 // do count_if check using detail fields as do in update_user_task\n                current_count_active = detail_array[itr].count.active ;\n                current_count_unread = detail_array[itr].count.unread ;\n            }\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        detail_array[itr].count.active = active ;\n        detail_array[itr].count.unread = unread ;\n    }\n    \n    \n    return {\n        detail_array :   detail_array\n        // count        : {\n        //     active   : active ,\n        //     unread   : unread \n        // }\n    };\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction user_task(user_id, task_id, page_id){\n    var obj = {} ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i < user_task_arr.length; i++){\n            if(\n                user_task_arr[i].task_id === task_id &&\n                user_task_arr[i].user_id === user_id &&\n                user_task_arr[i].page_id === page_id \n            ){\n                obj = user_task_arr[i];\n            }\n        }\n        return obj;\n    }else{\n        return obj;\n    }\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id    === user_id &&\n                user_task_arr[i].task_id    === task_id\n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true ;\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n        \n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:1, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n    \n    if ( create_user_task_flag ) {\n        msg.updated_user_task = {\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: null,\n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 0,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {}\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n    \n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0} ;\n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n           // to_page_id = details[itr].to_page_id ;\n            count.active += details[itr].count.active ;\n            count.unread += details[itr].count.unread ;\n        }\n    }\n    return count;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 780.9999694824219,
        "y": 588,
        "wires": [
            [
                "d0358179.b9e4e"
            ]
        ]
    },
    {
        "id": "13bc99e5.59f2d6",
        "type": "http response",
        "z": "c80a9dd2.e75c1",
        "name": "API Result",
        "x": 1120,
        "y": 599,
        "wires": []
    },
    {
        "id": "5716e9f7.1fd3e8",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 713,
        "y": 510,
        "wires": []
    },
    {
        "id": "c9c51f27.133f",
        "type": "http in",
        "z": "f92f7e23.5ef5b",
        "name": "cerntral api endpoint",
        "url": "/api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 157,
        "y": 497,
        "wires": [
            [
                "ffe0465e.ecbe18"
            ]
        ]
    },
    {
        "id": "ffe0465e.ecbe18",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "spliter",
        "func": "var req_body = msg.req.body;\n\nif(isEmpty(req_body)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status:400, error:true, msg: \"Empty request body cannot be treated.\" ,data:null};\n    return msg.payload ;\n}else{\n    node.warn(req_body);\n    if(isEmpty(req_body.type)){\n        msg.API_STATUS = \"API_ERROR\";\n        msg.payload = {status:400, error:true, msg: \"Api type must be specified\" ,data:null};\n        return msg ;\n    }else{\n        msg.API_STATUS = \"API_SUCCESS\";\n        msg.req_body = req_body;\n        msg.API_TYPE = req_body.type ;\n        return msg;\n    }\n}\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return ;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 136,
        "y": 551,
        "wires": [
            [
                "5dbea6f0.3f56b8"
            ]
        ]
    },
    {
        "id": "5dbea6f0.3f56b8",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 239,
        "y": 600,
        "wires": [
            [
                "836bb616.a7dbe8"
            ],
            [
                "f216693e.9ea298"
            ]
        ]
    },
    {
        "id": "836bb616.a7dbe8",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 377,
        "y": 593,
        "wires": []
    },
    {
        "id": "f216693e.9ea298",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "API_TYPE",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_user_task_list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_location_list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_timeout_list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_templates",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_details",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_task_by_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_location",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "formatted_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_user_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_screen",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 22,
        "x": 380,
        "y": 778,
        "wires": [
            [
                "cce73912.3ab918"
            ],
            [
                "81ce98fe.b4b2b8"
            ],
            [
                "27c521c2.84d83e"
            ],
            [
                "60a1e5bf.a8e1dc"
            ],
            [
                "94123576.ed7f58"
            ],
            [
                "9b2a3e9f.177c7"
            ],
            [
                "711d0f5f.69194"
            ],
            [
                "59b293d2.491cfc"
            ],
            [
                "d5b8dab4.ee1138"
            ],
            [
                "2b51ca5e.101f86"
            ],
            [
                "d0fdab6c.42b7d8"
            ],
            [
                "a4c67b92.f623e8"
            ],
            [
                "c22dbe6e.be3c5"
            ],
            [
                "c1e2be84.136b"
            ],
            [
                "4c296a25.9701e4"
            ],
            [
                "925a9a35.fcb608"
            ],
            [
                "c609444a.7f4c68"
            ],
            [
                "c4a23a37.ee6958"
            ],
            [
                "fb5c869b.fe2118"
            ],
            [
                "b0c1804d.d7f77"
            ],
            [
                "ece6dbea.d72238"
            ],
            [
                "f19e7ab2.806638"
            ]
        ]
    },
    {
        "id": "60a1e5bf.a8e1dc",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_all_templates",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 713,
        "y": 303,
        "wires": [
            [
                "1055dff7.d20fb"
            ]
        ]
    },
    {
        "id": "94123576.ed7f58",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_all_tasks",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 693,
        "y": 348,
        "wires": [
            [
                "c1768b20.bf7808"
            ]
        ]
    },
    {
        "id": "9b2a3e9f.177c7",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_all_users",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 695,
        "y": 396,
        "wires": [
            [
                "e98ce4ac.1dbdc8"
            ]
        ]
    },
    {
        "id": "59b293d2.491cfc",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_task_by_id",
        "func": "var body = msg.req_body.body;\n\nif(isEmpty(body.task_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Please specify `task_id` to get task\", data: null};\n    return msg;\n}else{\n    msg.payload    = {_id : body.task_id};\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if(obj){\n            return false ;\n        }else{\n            return ;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 707,
        "y": 493,
        "wires": [
            [
                "2bf194de.5760ac"
            ]
        ]
    },
    {
        "id": "1055dff7.d20fb",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 901,
        "y": 302,
        "wires": [
            [
                "d1dfc06a.583e"
            ]
        ]
    },
    {
        "id": "c1768b20.bf7808",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 881,
        "y": 349,
        "wires": [
            [
                "1e1a3fd6.c6cdf"
            ]
        ]
    },
    {
        "id": "d1dfc06a.583e",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1066,
        "y": 300,
        "wires": []
    },
    {
        "id": "1e1a3fd6.c6cdf",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1064,
        "y": 348,
        "wires": []
    },
    {
        "id": "e98ce4ac.1dbdc8",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Users",
        "cloudant": "5281de41.649f",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 882,
        "y": 395,
        "wires": [
            [
                "1456d417.1917ac"
            ]
        ]
    },
    {
        "id": "1456d417.1917ac",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1064,
        "y": 390,
        "wires": []
    },
    {
        "id": "2bf194de.5760ac",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 882,
        "y": 492,
        "wires": [
            [
                "e59d5fb2.ce5c3"
            ],
            [
                "2a779973.a50db6"
            ]
        ]
    },
    {
        "id": "2a779973.a50db6",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 1063,
        "y": 480,
        "wires": [
            [
                "4fb36bdf.38a834"
            ]
        ]
    },
    {
        "id": "4fb36bdf.38a834",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "res",
        "func": "\n\nif(msg.payload === null){\n    msg.payload = {status: 200, error: false, msg:\"No record found\", data: {}};\n    return msg;\n}else{\n    msg.payload = {status: 200, error: false, msg:\"Record fecthed successfully\", data: msg.payload};\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1197,
        "y": 480,
        "wires": [
            [
                "f04ebdb1.8be77"
            ]
        ]
    },
    {
        "id": "e59d5fb2.ce5c3",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1064,
        "y": 518,
        "wires": []
    },
    {
        "id": "f04ebdb1.8be77",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1352,
        "y": 480,
        "wires": []
    },
    {
        "id": "711d0f5f.69194",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_all_details",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 706,
        "y": 446,
        "wires": [
            [
                "3a84151d.56014a"
            ]
        ]
    },
    {
        "id": "3a84151d.56014a",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 883,
        "y": 445,
        "wires": [
            [
                "ce6b2cf3.5c2fc"
            ]
        ]
    },
    {
        "id": "ce6b2cf3.5c2fc",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1065,
        "y": 439,
        "wires": []
    },
    {
        "id": "d5b8dab4.ee1138",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "delete_detail",
        "func": "var req_body = msg.req_body.body ;\n\nif(req_body === null || req_body === undefined){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"req_body is required.\"};\n}else if(req_body._id === null || req_body._id === undefined){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"id is required to delete detail.\"};\n}else if(req_body.access_token === undefined && req_body.access_token === null && req_body.access_token === \"\"){\n    msg.status = \"API_ERROR\";\n    msg.paylod = {status: 400, error: true, type: \"Validation error\", msg: \"user_id is required to delete detail.\"};\n}else{\n    msg.status = \"API_SUCCESS\";\n    msg.payload     = {_id : req_body._id};\n    msg.detail_id   = req_body._id ;\n    msg.access_token    = {query: \"access_token:\"+req_body.access_token} ;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 697,
        "y": 585,
        "wires": [
            [
                "42895935.46c948"
            ]
        ]
    },
    {
        "id": "42895935.46c948",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 837,
        "y": 582,
        "wires": [
            [
                "7af9eb6.c404d14"
            ],
            [
                "47b557a.fc1aca8",
                "250469b1.546436"
            ]
        ]
    },
    {
        "id": "7af9eb6.c404d14",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 980,
        "y": 575,
        "wires": [
            [
                "a3dca2ff.1a57f"
            ]
        ]
    },
    {
        "id": "47b557a.fc1aca8",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 981,
        "y": 638,
        "wires": []
    },
    {
        "id": "250469b1.546436",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1138,
        "y": 623,
        "wires": []
    },
    {
        "id": "a3dca2ff.1a57f",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1117,
        "y": 574,
        "wires": [
            [
                "ef37f53.55de108"
            ]
        ]
    },
    {
        "id": "ef37f53.55de108",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "move",
        "rules": [
            {
                "t": "move",
                "p": "access_token",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1261,
        "y": 573,
        "wires": [
            [
                "21569773.f98a88",
                "c77230df.b5a31"
            ]
        ]
    },
    {
        "id": "416c29c4.38fb08",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "Condition",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "VALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1436,
        "y": 530,
        "wires": [
            [
                "1d3dcf71.bfba71",
                "9d580bfa.f19ce8",
                "f29c64c7.b69ad8",
                "9a1afe02.92fa",
                "7659a343.825c7c"
            ],
            [
                "b1a09b3.f3e1f68"
            ]
        ]
    },
    {
        "id": "a2d026d2.c282d8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "res",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.payload[0] ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.API_STATUS = \"VALID_CONTENT\";\n    msg.payload = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n}else{\n    msg.API_STATUS = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.api_result = {status: 403, error: false, data: \"You are not authorized to remove record\"};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1429,
        "y": 580,
        "wires": [
            [
                "416c29c4.38fb08"
            ]
        ]
    },
    {
        "id": "21569773.f98a88",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 1427,
        "y": 627,
        "wires": [
            [
                "a2d026d2.c282d8"
            ]
        ]
    },
    {
        "id": "c77230df.b5a31",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1449,
        "y": 686,
        "wires": []
    },
    {
        "id": "9d580bfa.f19ce8",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "Change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1607,
        "y": 669,
        "wires": [
            [
                "30973183.39113e"
            ]
        ]
    },
    {
        "id": "7659a343.825c7c",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "updatedObj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1607,
        "y": 619,
        "wires": [
            [
                "52d612a4.193b3c"
            ]
        ]
    },
    {
        "id": "b1a09b3.f3e1f68",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "api_result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1603,
        "y": 562.0000305175781,
        "wires": [
            [
                "e709fceb.eef9",
                "84d557da.3564e8"
            ]
        ]
    },
    {
        "id": "f29c64c7.b69ad8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "api res",
        "func": "msg.payload = {status: 200, error: false, data: \"Record deleted successfully\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1595,
        "y": 502,
        "wires": [
            [
                "2bc8eebf.247832"
            ]
        ]
    },
    {
        "id": "1d3dcf71.bfba71",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "Update record",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1619,
        "y": 446,
        "wires": []
    },
    {
        "id": "9a1afe02.92fa",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1607,
        "y": 407,
        "wires": []
    },
    {
        "id": "2bc8eebf.247832",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1817,
        "y": 438,
        "wires": []
    },
    {
        "id": "84d557da.3564e8",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1850,
        "y": 490,
        "wires": []
    },
    {
        "id": "e709fceb.eef9",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1833,
        "y": 541,
        "wires": []
    },
    {
        "id": "52d612a4.193b3c",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1746,
        "y": 618,
        "wires": [
            [
                "726feb1e.9a21d4"
            ]
        ]
    },
    {
        "id": "30973183.39113e",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1756,
        "y": 667,
        "wires": [
            [
                "ed58352b.774948"
            ]
        ]
    },
    {
        "id": "726feb1e.9a21d4",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "init",
        "func": "var detail_arr = msg.payload ,\n    detail_obj = msg.updatedObj ;\n\nmsg.filtredArr = getDetailByToPageId(detail_arr, detail_obj);\nmsg.counter = 0;\nmsg.detail_length = msg.filtredArr.length;\nreturn msg;\n\nfunction getDetailByToPageId(arr, obj){\n    var results = [];\n    for(var i=0; i < arr.length; i++){\n        if(parseInt(arr[i].page_id) === parseInt(obj.to_page_id)){\n            results.push(arr[i]);\n        }\n    }\n    return results;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1887,
        "y": 637,
        "wires": [
            [
                "d134688d.0c9fe8"
            ]
        ]
    },
    {
        "id": "ed58352b.774948",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "init",
        "func": "var detail          = msg.detail_obj ,\n    user_task_arr   = msg.payload ;       \n\nmsg.calculated_task = get_user_task(detail, user_task_arr);\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nnode.warn(msg.calculated_task);\nnode.warn(msg.calculated_task.length);\nreturn msg;\n\nfunction get_user_task(detail, user_tasks){\n    var tasks = [];\n    if(detail !== null && detail !== undefined){\n        if(user_tasks !== null && user_tasks !== undefined){\n            for(var i=0; i < user_tasks.length; i++){\n                console.log(parseInt(detail.to_page_id));\n                console.log(parseInt(user_tasks[i].page_id));\n                console.log(detail.user_id);\n                console.log(user_tasks[i].user_id);\n                \n                \n                if(\n                    parseInt(detail.to_page_id) === parseInt(user_tasks[i].page_id)  &&\n                    detail.user_id    === user_tasks[i].user_id\n                ){\n                    user_tasks[i].status = false   ;\n                    if(user_tasks[i].count){\n                        user_tasks[i].count.active = 0 ;\n                        user_tasks[i].count.unread = 0 ;\n                    }\n                    tasks.push(user_tasks[i]);  \n                }\n            }\n        }\n    }\n    return tasks ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1896,
        "y": 719,
        "wires": [
            [
                "35bb4ce.b1c27b4"
            ]
        ]
    },
    {
        "id": "35bb4ce.b1c27b4",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2031,
        "y": 821,
        "wires": [
            [
                "e2436282.35331"
            ],
            [
                "e524c629.1a6498"
            ]
        ]
    },
    {
        "id": "a24542f7.0b405",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2109,
        "y": 753,
        "wires": [
            [
                "35bb4ce.b1c27b4"
            ]
        ]
    },
    {
        "id": "e2436282.35331",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\nmsg.payload = {\n  \"_id\": user_task_obj._id,\n  \"_rev\": user_task_obj._rev, \n  \"task_id\": user_task_obj.task_id,\n  \"user_id\": user_task_obj.user_id,\n  \"page_id\": user_task_obj.page_id,\n  \"synchronized\": user_task_obj.synchronized,\n  \"status\": user_task_obj.status,\n  \"date_updated\": user_task_obj.date_updated,\n  \"parent_id\": user_task_obj.parent_id,\n  \"count_status\": user_task_obj.count_status,\n  \"count\": user_task_obj.count,\n  \"count_if\": user_task_obj.count_if,\n  \"templates\": user_task_obj.templates,\n  \"timeout\": user_task_obj.timeout\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2180,
        "y": 818,
        "wires": [
            [
                "a24542f7.0b405",
                "11414ad3.1a3a45"
            ]
        ]
    },
    {
        "id": "e524c629.1a6498",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2172,
        "y": 858,
        "wires": [
            [
                "27883eca.3bd9c2"
            ]
        ]
    },
    {
        "id": "d134688d.0c9fe8",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2029,
        "y": 662,
        "wires": [
            [
                "b495f1f5.4c003"
            ],
            [
                "1b08a329.d0bb6d"
            ]
        ]
    },
    {
        "id": "859c29cf.0b4818",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2107,
        "y": 583,
        "wires": [
            [
                "d134688d.0c9fe8"
            ]
        ]
    },
    {
        "id": "b495f1f5.4c003",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2228,
        "y": 655,
        "wires": [
            [
                "859c29cf.0b4818",
                "89761101.c6376"
            ]
        ]
    },
    {
        "id": "1b08a329.d0bb6d",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2220,
        "y": 691,
        "wires": [
            [
                "1e4f7c75.322f34"
            ]
        ]
    },
    {
        "id": "1e4f7c75.322f34",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2374,
        "y": 691,
        "wires": []
    },
    {
        "id": "89761101.c6376",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "Update Detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2384,
        "y": 621,
        "wires": []
    },
    {
        "id": "11414ad3.1a3a45",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "user_task",
        "cloudant": "",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2366,
        "y": 764,
        "wires": []
    },
    {
        "id": "27883eca.3bd9c2",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2376,
        "y": 860,
        "wires": []
    },
    {
        "id": "326427aa.a9d868",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1214,
        "y": 748,
        "wires": []
    },
    {
        "id": "9694d12f.52758",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "var task_obj = msg.req_body.body;\n\nmsg.payload = {\n        _id                         : task_obj._id,\n        _rev                        : task_obj._rev,\n        task_name                   : task_obj.task_name,\n        user_id                     : task_obj.user_id,\n        page_id                     : task_obj.page_id,\n        from_page_id                : task_obj.from_page_id,\n        parent_id                   : task_obj.parent_id,\n        header_template_id          : task_obj.header_template_id,\n        detail_template_id          : task_obj.detail_template_id,\n        footer_template_id          : task_obj.footer_template_id,\n        timeout_id                  : task_obj.timeout_id,\n        child_default_task_id       : task_obj.child_default_task_id,\n        child_default_task_name     : task_obj.child_default_task_name,\n        date_created                : task_obj.date_created,\n        type                        : task_obj.type,\n        status                      : task_obj.status,\n        category                    : task_obj.category,\n        additional_data_fn          : task_obj.additional_data_fn,\n        optional_data               : task_obj.optional_data,\n        required_data               : task_obj.required_data,\n        offline_expiration_time     : task_obj.offline_expiration_time,\n        display_if_empty            : task_obj.display_if_empty,\n        image                       : task_obj.image\n    };\n    \nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 863,
        "y": 710,
        "wires": [
            [
                "b5488ba0.9acff8",
                "65321c88.c1aa74"
            ]
        ]
    },
    {
        "id": "b5488ba0.9acff8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "Update record",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1093,
        "y": 699,
        "wires": []
    },
    {
        "id": "65321c88.c1aa74",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1072,
        "y": 752,
        "wires": [
            [
                "326427aa.a9d868"
            ]
        ]
    },
    {
        "id": "1944ec9a.221e33",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "var req_body = msg.req_body.body;\n\nif(req_body.user_id !== undefined && req_body.user_id !== null && req_body.user_id !== \"\"){\n    msg.API_STATUS = \"SUCESS\" ;\n    msg.payload = {_id : req_body.user_id};    \n    msg.req_body = req_body;\n    return msg;\n}else{\n    msg.API_STATUS = \"ERROR\" ;\n    msg.api_result = {status: 400, error: true, msg: \"`user_id` is missing\", data: []};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 856,
        "y": 824,
        "wires": [
            [
                "ef3c7018.a5eda"
            ]
        ]
    },
    {
        "id": "ace79893.9c7368",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1627,
        "y": 781,
        "wires": []
    },
    {
        "id": "256cf926.7ca836",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1474,
        "y": 818,
        "wires": [
            [
                "ace79893.9c7368"
            ]
        ]
    },
    {
        "id": "802ed7cc.d89488",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload ;\n\nmsg.payload ={\n          \"_id\": req_body.user_id,\n          \"_rev\": user_obj._rev,\n          \"long_url\": req_body.long_url || user_obj.long_url,\n          \"access_token\": req_body.access_token || user_obj.access_token,\n          \"security_level\": req_body.security_level || user_obj.security_level,\n          \"virtual_phone\": req_body.phone || user_obj.virtual_phone,\n          \"email\": req_body.email || user_obj.email,\n          \"converstation_id\": req_body.converstation_id || user_obj.converstation_id,\n          \"firstname\": req_body.firstname || user_obj.first_name,\n          \"lastname\": req_body.lastname || user_obj.last_name,\n          \"code\": req_body.code || user_obj.code,\n          \"password\": req_body.password || user_obj.password,\n          \"image\": req_body.image || user_obj.image\n        };\n\nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1303,
        "y": 800,
        "wires": [
            [
                "256cf926.7ca836",
                "b96fbcf7.1d07f"
            ]
        ]
    },
    {
        "id": "c7407d1e.fba15",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "User",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 1160,
        "y": 801,
        "wires": [
            [
                "802ed7cc.d89488"
            ]
        ]
    },
    {
        "id": "b96fbcf7.1d07f",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1462,
        "y": 771,
        "wires": []
    },
    {
        "id": "ef3c7018.a5eda",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1008,
        "y": 823,
        "wires": [
            [
                "c7407d1e.fba15"
            ],
            [
                "2025316c.ba62ce"
            ]
        ]
    },
    {
        "id": "c2ee108c.52629",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "msg.req_body = msg.req_body.body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 894,
        "y": 924,
        "wires": [
            [
                "c7f66400.f4fd48",
                "e061da39.d04d38"
            ]
        ]
    },
    {
        "id": "c7f66400.f4fd48",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "detail_payload",
        "func": "msg.payload = {_id : msg.req_body.detail.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1079,
        "y": 927,
        "wires": [
            [
                "666be3dd.e32f2c"
            ]
        ]
    },
    {
        "id": "e061da39.d04d38",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "task_payload",
        "func": "msg.payload = {_id: msg.req_body.task.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1071,
        "y": 979,
        "wires": [
            [
                "19aec329.d9c15d"
            ]
        ]
    },
    {
        "id": "666be3dd.e32f2c",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 1228,
        "y": 927,
        "wires": [
            [
                "8fdfebc8.fbc008"
            ]
        ]
    },
    {
        "id": "19aec329.d9c15d",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Tasks",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 1230,
        "y": 981,
        "wires": [
            [
                "48225967.e72a88"
            ]
        ]
    },
    {
        "id": "8fdfebc8.fbc008",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "populate",
        "func": "var detail_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(check_obj(detail_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        msg.payload = {\n              _id: detail_obj._id,\n              _rev: detail_obj._rev,\n              task_id: detail_obj.task_id,\n              child_task_id: detail_obj.child_task_id,\n              user_id: detail_obj.user_id,\n              from_user_id: detail_obj.from_user_id,\n              page_id: detail_obj.page_id,\n              from_page_id: detail_obj.from_page_id,\n              to_page_id: detail_obj.to_page_id,\n              synchronized: detail_obj.synchronized,\n              processed: detail_obj.processed,\n              status: detail_obj.status,\n              read: detail_obj.read,\n              display_if_empty: detail_obj.display_if_empty,\n              date_created: detail_obj.date_created,\n              offline_expiration_seconds: detail_obj.offline_expiration_seconds,\n              priority: detail_obj.priority,\n              type: detail_obj.type,\n              from_user: detail_obj.from_user,\n              user_incoming: {\n                note: req_body.detail.message,\n                message: req_body.detail.message \n              },\n              watson_incoming: {\n                message: \"Watson response to : \" + req_body.detail.message,\n                response: {}\n              },\n              template: detail_obj.template,\n              timeout: detail_obj.timeout,\n              user_calculate: detail_obj.user_calculate,\n              location: detail_obj.location,\n              default: detail_obj.default,\n              createdAt: detail_obj.createdAt\n            };\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update data\", data: []};\n    }\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1372,
        "y": 927,
        "wires": [
            [
                "ee0ba115.742f5"
            ]
        ]
    },
    {
        "id": "ee0ba115.742f5",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1543,
        "y": 931,
        "wires": [
            [
                "d2a60912.6699d8",
                "5dd39800.2e5158"
            ],
            [
                "aac86e92.d8096"
            ]
        ]
    },
    {
        "id": "d2a60912.6699d8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1752,
        "y": 911,
        "wires": []
    },
    {
        "id": "aac86e92.d8096",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1771,
        "y": 953,
        "wires": []
    },
    {
        "id": "48225967.e72a88",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "populate",
        "func": "var task_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(check_obj(task_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            task_name                   : req_body.task.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : req_body.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update task obj\", data: []};\n    }\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1377,
        "y": 983,
        "wires": [
            [
                "c8be7aac.4a99a8"
            ]
        ]
    },
    {
        "id": "c8be7aac.4a99a8",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1540,
        "y": 974,
        "wires": [
            [
                "23d8bed6.749602"
            ],
            [
                "aac86e92.d8096"
            ]
        ]
    },
    {
        "id": "23d8bed6.749602",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1774,
        "y": 991,
        "wires": []
    },
    {
        "id": "5dd39800.2e5158",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "res",
        "rules": [
            {
                "t": "move",
                "p": "apiResult",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 870,
        "wires": [
            [
                "884a48e1.7b2b48"
            ]
        ]
    },
    {
        "id": "884a48e1.7b2b48",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1891,
        "y": 870,
        "wires": []
    },
    {
        "id": "2b51ca5e.101f86",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_task",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 697,
        "y": 711,
        "wires": [
            [
                "9694d12f.52758"
            ]
        ]
    },
    {
        "id": "d0fdab6c.42b7d8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_user",
        "func": "node.warn(\"Reached here....\");\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 699,
        "y": 825,
        "wires": [
            [
                "1944ec9a.221e33"
            ]
        ]
    },
    {
        "id": "a4c67b92.f623e8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_short_detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 719,
        "y": 924,
        "wires": [
            [
                "c2ee108c.52629"
            ]
        ]
    },
    {
        "id": "2025316c.ba62ce",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1171,
        "y": 852,
        "wires": [
            [
                "ef3e62f3.cf1d4"
            ]
        ]
    },
    {
        "id": "ef3e62f3.cf1d4",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1299,
        "y": 851,
        "wires": []
    },
    {
        "id": "cd24fff7.8d256",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 925,
        "y": 1200,
        "wires": [
            [
                "ad57da4b.9d5328"
            ]
        ]
    },
    {
        "id": "ad57da4b.9d5328",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "response",
        "func": "var tasks_arr = msg.payload , obj = {} ;\n\nif(tasks_arr === null || tasks_arr === undefined){\n    obj.status = 400 ;\n    obj.error  = true ;\n    obj.msg    = \"Unable to get the tasks\";\n    msg.paylod = obj ;\n}else{\n    if(tasks_arr.length){\n        var tasks = [];\n        for(var i=0; i < tasks_arr.length; i++){\n            tasks.push({\n                id           : tasks_arr[i]._id,\n                task_name    : tasks_arr[i].task_name || \"N/A\"     \n            });\n        }\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"Record fecthed successfully\";\n        obj.data   = tasks ;\n        msg.payload = obj ;\n    }else{\n        obj.status = 200 ;\n        obj.error  = false ;\n        obj.msg    = \"There is not task present\";\n        msg.paylod = obj ;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1121,
        "y": 1200,
        "wires": [
            [
                "edfc12a7.60cc9"
            ]
        ]
    },
    {
        "id": "edfc12a7.60cc9",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1303,
        "y": 1198,
        "wires": []
    },
    {
        "id": "7dff7314.52f13c",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "users",
        "cloudant": "",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 900,
        "y": 1051,
        "wires": [
            [
                "d08dd552.17b7c8"
            ]
        ]
    },
    {
        "id": "d08dd552.17b7c8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "response",
        "func": "var users   = msg.payload , updated_user = [];\n\nif(users === null || users === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!users.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: users};\n}else{\n    for(var i=0; i< users.length; i++){\n        updated_user.push({id : users[i]._id, name: generate_name(users[i]) || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_user};\n}\n\nreturn msg;\n\nfunction generate_name(obj){\n    return (obj.firstname + \" \" + obj.lastname).trim();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1119,
        "y": 1050,
        "wires": [
            [
                "6df4d166.3b3a8"
            ]
        ]
    },
    {
        "id": "6df4d166.3b3a8",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1300,
        "y": 1048,
        "wires": []
    },
    {
        "id": "117ffdc1.99e1a2",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Timeout",
        "cloudant": "",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 913,
        "y": 1106,
        "wires": [
            [
                "e2e1bce8.51af2"
            ]
        ]
    },
    {
        "id": "e2e1bce8.51af2",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "response",
        "func": "var timeout   = msg.payload , updated_timeout = [];\n\nif(timeout === null || timeout === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!timeout.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: timeout};\n}else{\n    for(var i=0; i< timeout.length; i++){\n        updated_timeout.push({id : timeout[i]._id, name: timeout[i].name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_timeout};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1119,
        "y": 1103,
        "wires": [
            [
                "67103d4c.0cb244"
            ]
        ]
    },
    {
        "id": "67103d4c.0cb244",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1299,
        "y": 1101,
        "wires": []
    },
    {
        "id": "bcff8182.2d0bd",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Location",
        "cloudant": "",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 915,
        "y": 1152,
        "wires": [
            [
                "1d35d988.9ab836"
            ]
        ]
    },
    {
        "id": "1d35d988.9ab836",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "response",
        "func": "var location   = msg.payload , updated_location = [];\n\nif(location === null || location === undefined){\n    msg.payload = {status: 400, error: true, msg: \"Validation error\", data: []};\n}else if(!location.length){\n    msg.payload = {status: 200, error: false, msg: \"No record found\", data: location};\n}else{\n    for(var i=0; i< location.length; i++){\n        updated_location.push({id : location[i]._id, name: location[i].location_name || 'N/A'});\n    }\n    msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: updated_location};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1116,
        "y": 1150,
        "wires": [
            [
                "7819182d.b1e918"
            ]
        ]
    },
    {
        "id": "7819182d.b1e918",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1299,
        "y": 1151,
        "wires": []
    },
    {
        "id": "c22dbe6e.be3c5",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "formatted_user",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 712,
        "y": 1045,
        "wires": [
            [
                "7dff7314.52f13c"
            ]
        ]
    },
    {
        "id": "c1e2be84.136b",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "formatted_timeout",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 719,
        "y": 1100,
        "wires": [
            [
                "117ffdc1.99e1a2"
            ]
        ]
    },
    {
        "id": "4c296a25.9701e4",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "formatted_location",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 719,
        "y": 1153,
        "wires": [
            [
                "bcff8182.2d0bd"
            ]
        ]
    },
    {
        "id": "925a9a35.fcb608",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "formatted_task",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 708,
        "y": 1203,
        "wires": [
            [
                "cd24fff7.8d256"
            ]
        ]
    },
    {
        "id": "fb7fc661.d9c208",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "Page list",
        "func": "msg.req_body = msg.payload;\n\nif(msg.req_body.access_token === undefined){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, err: true, msg: \"Access_token is required\", data: null};\n    return msg;\n}else{\n    msg.payload = {\n        query: \"access_token:\" + msg.req_body.access_token\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 228,
        "y": 1455,
        "wires": [
            [
                "9e7d0107.0cd34"
            ]
        ]
    },
    {
        "id": "2b1f7815.010118",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "Users",
        "cloudant": "5281de41.649f",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 385,
        "y": 1548,
        "wires": [
            [
                "78208261.02786c"
            ]
        ]
    },
    {
        "id": "78208261.02786c",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "search_user_task",
        "func": "msg.req_user = msg.payload[0] ;\nmsg.payload = {\n    query: \"user_id:\" + msg.payload[0]._id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 557,
        "y": 1547,
        "wires": [
            [
                "7e3e61ae.a7e85",
                "3d296dd6.aa1722"
            ]
        ]
    },
    {
        "id": "7e3e61ae.a7e85",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "user_task",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "custom_search",
        "index": "user_id",
        "x": 742,
        "y": 1545,
        "wires": [
            [
                "d9db60ee.e0ca5",
                "bb802625.3b34b8"
            ]
        ]
    },
    {
        "id": "3d296dd6.aa1722",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 759,
        "y": 1479,
        "wires": []
    },
    {
        "id": "d9db60ee.e0ca5",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "user_task",
        "func": "var req_user_task = get_req_user_task(msg.req_body.user_task_list),\n    users_task ;\n\nif(req_user_task.length){\n    users_task = req_user_task ;\n}else{\n    users_task = msg.payload;\n}\n\n// node.warn(\"going to log the users_task obj\");\n// node.warn(users_task);\n//return the user_task which is synchronizd false ;\n\nvar filtred_user_task = get_filtred_user_task(users_task);\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.payload = filtred_user_task ;\n\n\n//return the user_task which is synchronizd true ;\n// msg.filtred_user_task_length = users_task.length;\n// msg.counter = 0 ;\n// msg.page_list = [];\n// msg.filtred_payload = users_task ;\nreturn msg;\n\nfunction get_filtred_user_task(users_task){\n    var return_arr = [] ;\n    if(users_task !== null && users_task !== undefined){\n        for(var i=0; i< users_task.length; i++){\n            if(JSON.parse(users_task[i].synchronized) === 0){\n                return_arr.push(users_task[i]);\n            }\n        }\n        return return_arr;\n    }else{\n        return return_arr;\n    }\n}\n\nfunction get_req_user_task(user_task){\n    try{\n        var task = JSON.parse(user_task);\n        if(task.length){\n            return task;\n        }else{\n            return [] ;\n        }\n    }catch(e){\n        return [] ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 907,
        "y": 1544,
        "wires": [
            [
                "c5702098.b7052"
            ]
        ]
    },
    {
        "id": "c5702098.b7052",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1050,
        "y": 1545,
        "wires": [
            [
                "5c1d2161.9ecef"
            ],
            [
                "d0e454b1.0fe468",
                "13f0e44c.2a02ac"
            ]
        ]
    },
    {
        "id": "5c1d2161.9ecef",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "create_url",
        "func": "msg.url     = msg.req.headers.host + \"/api/page_list?page_id=\"+ msg.filtred_payload[msg.counter].page_id +\"&access_token=\" + msg.req_user.access_token ;\nmsg.method  = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1196,
        "y": 1534,
        "wires": [
            [
                "11eeecf2.41d5c3"
            ]
        ]
    },
    {
        "id": "11eeecf2.41d5c3",
        "type": "http request",
        "z": "b36c2dc1.25c34",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1348,
        "y": 1534,
        "wires": [
            [
                "5f4b26da.6671c8"
            ]
        ]
    },
    {
        "id": "5f4b26da.6671c8",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "api_res",
        "func": "node.warn(msg.payload);\nmsg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1518,
        "y": 1536,
        "wires": [
            [
                "3255dde5.5a6db2"
            ]
        ]
    },
    {
        "id": "d0e454b1.0fe468",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1223,
        "y": 1599,
        "wires": []
    },
    {
        "id": "c149c47a.28f9a8",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Page List",
        "url": "/get_updated_pages",
        "method": "get",
        "swaggerDoc": "",
        "x": 77,
        "y": 1453,
        "wires": [
            [
                "fb7fc661.d9c208",
                "e23511e2.39cb4"
            ]
        ]
    },
    {
        "id": "f982dd7f.86515",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1338,
        "y": 1647,
        "wires": []
    },
    {
        "id": "13f0e44c.2a02ac",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "res",
        "func": "\nif(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1192,
        "y": 1646,
        "wires": [
            [
                "f982dd7f.86515"
            ]
        ]
    },
    {
        "id": "3255dde5.5a6db2",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1261,
        "y": 1456,
        "wires": [
            [
                "c5702098.b7052"
            ]
        ]
    },
    {
        "id": "bb802625.3b34b8",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 939,
        "y": 1614,
        "wires": []
    },
    {
        "id": "9e7d0107.0cd34",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 360,
        "y": 1454,
        "wires": [
            [
                "909138af.774b18"
            ],
            [
                "2b1f7815.010118"
            ]
        ]
    },
    {
        "id": "909138af.774b18",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 522,
        "y": 1449,
        "wires": []
    },
    {
        "id": "e23511e2.39cb4",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 237,
        "y": 1413,
        "wires": []
    },
    {
        "id": "9af934d2.6185f8",
        "type": "http in",
        "z": "b36c2dc1.25c34",
        "name": "Update user task",
        "url": "/update_get_user_tasks",
        "method": "put",
        "swaggerDoc": "",
        "x": 106,
        "y": 1677,
        "wires": [
            [
                "a1060621.f1f618"
            ]
        ]
    },
    {
        "id": "a1060621.f1f618",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "params",
        "func": "msg.req_body = msg.payload ;\n\nmsg.payload = {\n    query : create_filtred_query(msg.req_body.user_id, msg.req_body.filter)\n};\nreturn msg;\n\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n        \n        if(!(\"synchronized\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" synchronized:false\";\n        }\n        \n        if(!(\"synchronized\" in filter_obj) && !(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" synchronized:false AND user_id\" + user_id  ;\n        }\n        \n        if((\"user_id\" in filter_obj) && (\"synchronized\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id + \" AND synchrnozed:false\"    ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    if( (\"synchronized\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter <= length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 302,
        "y": 1680,
        "wires": [
            [
                "dcdaa100.4ead4",
                "f495666e.b0a208"
            ]
        ]
    },
    {
        "id": "13b7c1f0.fabbfe",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1219,
        "y": 1785,
        "wires": []
    },
    {
        "id": "dcdaa100.4ead4",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "search",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "custom_search",
        "index": "custom_search",
        "x": 452,
        "y": 1681,
        "wires": [
            [
                "6a282d6.b3d69d4"
            ]
        ]
    },
    {
        "id": "6a282d6.b3d69d4",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "calculate result",
        "func": "msg.filtred_user_task_list = msg.payload ;\ntry{\n    var update_user_task = msg.req_body.user_task_obj ;\n    if(objLength(update_user_task) > 0){\n        msg.api_status = \"update_user_task\";\n        msg.payload = {\n            _id : update_user_task._id\n        };\n    }else{\n        msg.api_response = {status: 400, error: true, msg:\"Unable to update `user_task` with empty values\", data: msg.filtred_user_task_list };\n    }    \n}catch(e){\n    node.warn(\"Reacehed in this case....\")\n    node.warn(JSON.stringify(e));\n    msg.api_response = {status: 400, error: true, msg:\"Please check `user_task` object. Unable parse to JSON object.\", data: msg.filtred_user_task_list };\n}\n\nreturn msg;\nfunction objLength(obj){\n    return Object.keys(obj).length;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 618,
        "y": 1681,
        "wires": [
            [
                "d009b683.399628"
            ]
        ]
    },
    {
        "id": "f495666e.b0a208",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 461,
        "y": 1768,
        "wires": []
    },
    {
        "id": "d009b683.399628",
        "type": "switch",
        "z": "b36c2dc1.25c34",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update_user_task",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 780,
        "y": 1719,
        "wires": [
            [
                "141d3215.b8fd4e"
            ],
            [
                "9e2aebfa.597578"
            ]
        ]
    },
    {
        "id": "141d3215.b8fd4e",
        "type": "cloudant in",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 931,
        "y": 1729,
        "wires": [
            [
                "2a41223.0dfbcde"
            ]
        ]
    },
    {
        "id": "2a41223.0dfbcde",
        "type": "function",
        "z": "b36c2dc1.25c34",
        "name": "update_task",
        "func": "var user_task       = msg.payload ,\n    updated_content = msg.req_body.user_task_obj ;\n\n    msg.payload = {\n          \"_id\": user_task._id,\n          \"_rev\": user_task._rev,\n          \"task_id\": updated_content.task_id || user_task.task_id,\n          \"user_id\": updated_content.user_id || user_task.user_id,\n          \"page_id\": updated_content.page_id || user_task.page_id,\n          \"update_read\": updated_content.updated_read || user_task.updated_read,\n          \"update_active\": updated_content.updated_active || user_task.updated_active,\n          \"synchronized\": updated_content.synchronized || user_task.synchronized, \n          \"status\": updated_content.status || user_task.status,\n          \"date_updated\": updated_content.date_updated || user_task.date_updated,\n          \"parent_id\": updated_content.parent_id || user_task.parent_id,\n          \"count_status\": user_task.count_status,\n          \"count\": user_task.count,\n          \"count_if\": user_task.count_if,\n          \"templates\": user_task.templates,\n          \"timeout\": user_task.timeout\n        };\n    msg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.filtred_user_task_list};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1087,
        "y": 1728,
        "wires": [
            [
                "a663ead5.b26858",
                "b0b74da2.e4761"
            ]
        ]
    },
    {
        "id": "a663ead5.b26858",
        "type": "cloudant out",
        "z": "b36c2dc1.25c34",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1243,
        "y": 1703,
        "wires": []
    },
    {
        "id": "b0b74da2.e4761",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1293,
        "y": 1750,
        "wires": [
            [
                "b8f84ed9.1c303"
            ]
        ]
    },
    {
        "id": "b8f84ed9.1c303",
        "type": "http response",
        "z": "b36c2dc1.25c34",
        "name": "",
        "x": 1511,
        "y": 1751,
        "wires": []
    },
    {
        "id": "9e2aebfa.597578",
        "type": "change",
        "z": "b36c2dc1.25c34",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 979,
        "y": 1780,
        "wires": [
            [
                "13b7c1f0.fabbfe"
            ]
        ]
    },
    {
        "id": "a45d9678.7fce78",
        "type": "debug",
        "z": "b36c2dc1.25c34",
        "name": "debug",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 387,
        "y": 522,
        "wires": []
    },
    {
        "id": "c609444a.7f4c68",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "add_details",
        "func": "msg.req_body.body.user_id = \"5c08a4ff792d3fb660f4bbb585334498\";\nif(isValidBody.isError){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = isValidBody.msg ;\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload     = msg.req_body.body ;\n}\nreturn msg;\n\nfunction isValidBody(obj){\n    if(obj){\n        if( !(\"access_token\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`access_token` in missing.\", data: null}};\n        }\n        \n        if( !(\"from_page_id\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`from_page_id` in missing.\", data: null}};\n        }\n        \n        if( !(\"note\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`note` in missing.\", data: null}};\n        }\n        \n        if( !(\"page_id\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`page_id` in missing.\", data: null}};\n        }\n        \n        if( !(\"task_id\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`task_id` in missing.\", data: null}};\n        }\n        \n        if( !(\"user_id\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`user_id` in missing.\", data: null}};\n        }\n        return {isError: false};\n    }else{\n        return false ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 698,
        "y": 1268,
        "wires": [
            [
                "a2d99e58.f0d93"
            ]
        ]
    },
    {
        "id": "a2d99e58.f0d93",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 844,
        "y": 1267,
        "wires": [
            [
                "d63e8ddf.16e14"
            ],
            [
                "ccab1afc.ce47b8"
            ]
        ]
    },
    {
        "id": "d63e8ddf.16e14",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1000,
        "y": 1239,
        "wires": []
    },
    {
        "id": "ccab1afc.ce47b8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "create_url",
        "func": "msg.method  = \"POST\";\nmsg.url     = msg.req.headers.host + \"/add_detail\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1012,
        "y": 1285,
        "wires": [
            [
                "5e9b702a.aa79e"
            ]
        ]
    },
    {
        "id": "5e9b702a.aa79e",
        "type": "http request",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1169,
        "y": 1284,
        "wires": [
            [
                "9ac53152.f164f"
            ]
        ]
    },
    {
        "id": "9ac53152.f164f",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1329,
        "y": 1283,
        "wires": []
    },
    {
        "id": "2893dcb1.4ebc54",
        "type": "cloudant in",
        "z": "3b9a3280.9d537e",
        "name": "task by id",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 290,
        "y": 216,
        "wires": [
            [
                "2943b32c.cff1fc"
            ]
        ]
    },
    {
        "id": "c4a23a37.ee6958",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_get_pages",
        "func": "var req_body = msg.payload.body ;\n\nif(req_body.access_token === undefined || req_body.access_token === null){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, err: true, msg: \"Access_token is required\", data: null};\n    return msg;\n}else{\n    msg.payload = {\n        query: \"access_token:\" + req_body.access_token\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 717,
        "y": 1342,
        "wires": [
            [
                "556b941d.85aedc"
            ]
        ]
    },
    {
        "id": "556b941d.85aedc",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 910,
        "y": 1342,
        "wires": [
            [
                "3eaffb6b.dc03f4"
            ],
            [
                "141795be.57959a"
            ]
        ]
    },
    {
        "id": "3eaffb6b.dc03f4",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1050,
        "y": 1336,
        "wires": []
    },
    {
        "id": "141795be.57959a",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Users",
        "cloudant": "5281de41.649f",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 1058,
        "y": 1385,
        "wires": [
            [
                "77dd6ec9.e9967"
            ]
        ]
    },
    {
        "id": "77dd6ec9.e9967",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "search_user_task",
        "func": "node.warn(\"inside search_user_task\");\nnode.warn(msg.payload);\nif(msg.payload.length){\n    msg.api_stat = \"API_SUCCESS\";\n    msg.req_user = msg.payload[0] ;    \n    msg.payload = {\n        query: \"user_id:\" + msg.payload[0]._id\n    };\n}else{\n    msg.api_stat = \"API_ERROR\";\n    msg.payload = {\n        status: 400 ,\n        error: true ,\n        msg: \"Unable to find user with `access_token`.\",\n        data: null\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 1384,
        "wires": [
            [
                "7120f023.49c7a",
                "dfda5806.4cfe48"
            ]
        ]
    },
    {
        "id": "7120f023.49c7a",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1432,
        "y": 1316,
        "wires": []
    },
    {
        "id": "a667a360.e6343",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "user_task",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "custom_search",
        "index": "user_id",
        "x": 1617,
        "y": 1386,
        "wires": [
            [
                "77c0d57c.480a9c",
                "8ff1d276.3aa81"
            ]
        ]
    },
    {
        "id": "77c0d57c.480a9c",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "user_task",
        "func": "var req_body = msg.req_body.body ,\n    req_user_task = get_req_user_task(req_body.user_task_list);\n\nif(check_obj(req_user_task) > 0){\n    msg.isUpdatedUser_task = \"update_user_task\";\n    msg.payload = {\n        \"_id\": req_user_task._id || msg.payload[0]._id,\n        \"_rev\": req_user_task._rev || msg.payload[0]._rev,\n        \"task_id\": req_user_task.task_id || msg.payload[0].task_id,\n        \"user_id\": req_user_task.user_id || msg.payload[0].user_id,\n        \"page_id\": req_user_task.page_id || msg.payload[0].page_id,\n        \"update_read\": req_user_task.update_read || msg.payload[0].update_read,\n        \"update_active\": req_user_task.update_active || msg.payload[0].update_active,\n        \"synchronized\": req_user_task.synchronized || msg.payload[0].synchronized,\n        \"status\": req_user_task.status || msg.payload[0].status,\n        \"date_updated\": req_user_task.date_updated || msg.payload[0].date_updated,\n        \"parent_id\": req_user_task.parent_id || msg.payload[0].parent_id,\n        \"count_status\": req_user_task.count_status || msg.payload[0].count_status,\n        \"count\": req_user_task.count || msg.payload[0].count,\n        \"count_if\": req_user_task.count_if || msg.payload[0].count_if,\n        \"templates\": req_user_task.templates || msg.payload[0].templates,\n        \"timeout\": req_user_task.timeout || msg.payload[0].timeout,\n    };\n    var users_task = req_user_task ;\n}else{\n    var users_task = msg.payload;\n}\n\n//return the user_task which is synchronizd false ;\nvar filtred_user_task = get_filtred_user_task(users_task);\n\nnode.warn(\"filtred_user_task\");\nnode.warn(filtred_user_task);\n\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.filtred_payload = filtred_user_task ;\nreturn msg;\n\n\nfunction get_filtred_user_task(users_task){\n    var return_arr = [] ;\n    if(users_task !== null && users_task !== undefined){\n        for(var i=0; i< users_task.length; i++){\n            if(JSON.parse(users_task[i].synchronized) === 0){\n                return_arr.push(users_task[i]);\n            }\n        }\n        return return_arr;\n    }else{\n        return return_arr;\n    }\n}\n\nfunction get_req_user_task(user_task){\n    try{\n        return JSON.parse(user_task);\n    }catch(e){\n        return {} ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1850,
        "y": 1365,
        "wires": [
            [
                "3a853784.e78338"
            ]
        ]
    },
    {
        "id": "8ff1d276.3aa81",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1812,
        "y": 1308,
        "wires": []
    },
    {
        "id": "a011832f.69113",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2414,
        "y": 1289,
        "wires": [
            [
                "a66cc163.98513"
            ]
        ]
    },
    {
        "id": "a66cc163.98513",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2205,
        "y": 1392,
        "wires": [
            [
                "e7b54071.91bad"
            ],
            [
                "4646747d.12bacc",
                "76eb4f9d.598c6"
            ]
        ]
    },
    {
        "id": "4646747d.12bacc",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2507,
        "y": 1429,
        "wires": []
    },
    {
        "id": "e7b54071.91bad",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "create_url",
        "func": "msg.url     = msg.req.headers.host + \"/api/page_list?page_id=\"+ msg.filtred_payload[msg.counter].page_id +\"&access_token=\" + msg.req_user.access_token ;\nmsg.method  = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2351,
        "y": 1381,
        "wires": [
            [
                "d036965b.5f7d38"
            ]
        ]
    },
    {
        "id": "d036965b.5f7d38",
        "type": "http request",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2499,
        "y": 1376,
        "wires": [
            [
                "d29bc970.a2dca8"
            ]
        ]
    },
    {
        "id": "d29bc970.a2dca8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "api_res",
        "func": "node.warn(msg.payload);\nmsg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2669,
        "y": 1378,
        "wires": [
            [
                "a011832f.69113"
            ]
        ]
    },
    {
        "id": "5a051c4e.b07234",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 2485,
        "y": 1484,
        "wires": []
    },
    {
        "id": "76eb4f9d.598c6",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "res",
        "func": "\nif(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2343,
        "y": 1488,
        "wires": [
            [
                "5a051c4e.b07234"
            ]
        ]
    },
    {
        "id": "58fbf7e3.56f2f8",
        "type": "http in",
        "z": "42835cf9.2628c4",
        "name": "",
        "url": "/api/page_list",
        "method": "get",
        "swaggerDoc": "",
        "x": 97,
        "y": 24,
        "wires": [
            [
                "7f8be5b7.13545c"
            ]
        ]
    },
    {
        "id": "24e66865.c05cc8",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 223,
        "y": 119,
        "wires": [
            [
                "352581f3.b4ab8e"
            ]
        ]
    },
    {
        "id": "d8658c13.00553",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "get user by token",
        "cloudant": "5e923e83.d5527",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "94b8fdc0.6d05a"
            ]
        ]
    },
    {
        "id": "94b8fdc0.6d05a",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 269,
        "y": 244,
        "wires": [
            [
                "3a792d06.dcfb92"
            ]
        ]
    },
    {
        "id": "3a792d06.dcfb92",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "check access token",
        "func": "var user_data = msg.db_user[0];\nvar response = {};\n//node.warn(JSON.stringify(user_data));\n\nfunction check_obj(obj){\n    var count = 0;\n    for(var keys in obj){\n        count++;\n    }\n    return count ;\n}\n\nif(check_obj(user_data) > 0) {//if access token exist\n    var security_level = user_data.security_level;\n    if(!security_level){\n        response.status = \"verify\";\n    }\n    else{\n        response.status = \"valid\";\n    }\n}\nelse{\n    response.status = \"invalid\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 240,
        "wires": [
            [
                "924e53d4.a4562"
            ]
        ]
    },
    {
        "id": "924e53d4.a4562",
        "type": "switch",
        "z": "42835cf9.2628c4",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "67798a3f.f03d84"
            ],
            [
                "81a443d7.944d1"
            ],
            [
                "d240a2d9.cdc3b"
            ]
        ]
    },
    {
        "id": "70d5b00a.665cd",
        "type": "inject",
        "z": "42835cf9.2628c4",
        "name": "get table data",
        "topic": "table",
        "payload": "{\"id\": \"11_h\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 716,
        "wires": [
            [
                "22ca70d2.afdb8"
            ]
        ]
    },
    {
        "id": "bcc169bc.880428",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "get data",
        "func": "msg.payload = msg.db_data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 716,
        "wires": [
            [
                "ded250db.b25c",
                "9837858e.503b78"
            ]
        ]
    },
    {
        "id": "ded250db.b25c",
        "type": "http response",
        "z": "42835cf9.2628c4",
        "name": "API Result",
        "x": 970,
        "y": 716,
        "wires": []
    },
    {
        "id": "9837858e.503b78",
        "type": "debug",
        "z": "42835cf9.2628c4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 970,
        "y": 756,
        "wires": []
    },
    {
        "id": "4b48b4a6.1abbec",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "get table by id",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "getPage",
        "index": "page_id",
        "x": 500,
        "y": 716,
        "wires": [
            [
                "be249a0c.fa2918"
            ]
        ]
    },
    {
        "id": "be249a0c.fa2918",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "db_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 716,
        "wires": [
            [
                "bcc169bc.880428"
            ]
        ]
    },
    {
        "id": "22ca70d2.afdb8",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "obj_id",
        "func": "msg.payload = {\"_id\": msg.payload.id};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 716,
        "wires": [
            [
                "7a221957.9f7c38",
                "4b48b4a6.1abbec"
            ]
        ]
    },
    {
        "id": "7a221957.9f7c38",
        "type": "debug",
        "z": "42835cf9.2628c4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 490,
        "y": 756,
        "wires": []
    },
    {
        "id": "feac78c9.25f748",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "task_id",
        "func": "node.warn(msg.detail_data);\n\nvar detail_data = msg.detail_data;\nif(detail_data === undefined || detail_data === null){\n    msg.payload = {status: 400, error: true, msg: \"unable to get the detial_data with `page_id`\", data: null};\n    msg.api_status = \"API_ERROR\";\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_payload = {\"_id\": detail_data[0].task_id};    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 365,
        "y": 347,
        "wires": [
            [
                "fd4a7631.c51808"
            ]
        ]
    },
    {
        "id": "9cb353cb.9f45d",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_details",
        "index": "page_id",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "8512422f.62066"
            ]
        ]
    },
    {
        "id": "8512422f.62066",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "detail_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 356,
        "wires": [
            [
                "feac78c9.25f748"
            ]
        ]
    },
    {
        "id": "d240a2d9.cdc3b",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "page_id",
        "func": "msg.payload = {\n    query:\"page_id:\"+ check_number(msg.request_data.page_id),\n    sort:[\"_id<string>\"]\n};\nreturn msg;\n\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "9cb353cb.9f45d",
                "2d75d6fd.df627a"
            ]
        ]
    },
    {
        "id": "4114be17.84984",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "task_payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 656,
        "y": 345,
        "wires": [
            [
                "d95c7b1b.590ae8"
            ]
        ]
    },
    {
        "id": "d95c7b1b.590ae8",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "task",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_id_",
        "design": "search_details",
        "index": "page_id",
        "x": 810,
        "y": 356,
        "wires": [
            [
                "5b470889.dc5048"
            ]
        ]
    },
    {
        "id": "5b470889.dc5048",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "task_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 416,
        "wires": [
            [
                "76351817.27cfa8"
            ]
        ]
    },
    {
        "id": "76351817.27cfa8",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "all templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "getPage",
        "index": "page_id",
        "x": 610,
        "y": 416,
        "wires": [
            [
                "fb45dc3a.c1e87"
            ]
        ]
    },
    {
        "id": "fb45dc3a.c1e87",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "template_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "template_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 416,
        "wires": [
            [
                "dc505d4.19a77a"
            ]
        ]
    },
    {
        "id": "f6fc1ae8.8dee88",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "detailObj",
        "func": "//node.warn(JSON.stringify(msg.detail_data));\nvar detail_data = msg.detail_data;\nvar detailObj = [];\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n//**********    detailObj     *******//\nvar detailRecord = {\n    \"_id\": \t\"\",\n    \"image\":\t\t\"\",\n    \"to_page_id\": \t\"\",\n    \"user_id\": \t\t\"\",\n    \"from_user_id\": \"\",\n\t\"user_incoming\":{},\n    \"watson_incoming\":{},\n    \"type\":         {},\n    \"date_created\": \"\",\n    \"from_user\":    {},\n    \"count\":{\"active\":0, \"unread\":0}\n};\nfor(var d=0; d<detail_data.length; d++){\n    detail_data[d]._id = detail_data[d]._id;\n    detail_data[d].to_page_id = detail_data[d].to_page_id;\n    \n    if(check_isDisplay(detail_data[d].display_if_empty)){\n        detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n    }else{\n        detail_data.splice(d, 0)    ;\n    }\n}\nmsg.detailObj = removeEmptyArrayElements(detailObj); \nreturn msg;\n\nfunction check_isDisplay(d){\n    if(d === \"true\"){\n        return true ;\n    }else if(d === true){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 476,
        "wires": [
            [
                "438d9799.a12948"
            ]
        ]
    },
    {
        "id": "dc505d4.19a77a",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "taskObj",
        "func": "var task_data = msg.task_data;\nvar templateObj = {};\nvar header_template_id = task_data.header_template_id;\nvar detail_template_id = task_data.detail_template_id;\nvar footer_template_id = task_data.footer_template_id;\nvar template_data = msg.template_data;\n\nfor(var ind=0; ind<template_data.length; ind++){\n    if(header_template_id == template_data[ind]._id){\n        templateObj.header = template_data[ind];\n    }\n    if(detail_template_id == template_data[ind]._id){\n        templateObj.detail = template_data[ind];\n    }\n    if(footer_template_id == template_data[ind]._id){\n        templateObj.footer = template_data[ind];\n    }\n}\n\n\nvar taskObj = {\n    \"task_id\":\t\t    task_data._id,\n    \"task_name\":\t\ttask_data.task_name,\n    \"template\": \t\ttemplateObj,\n    \"from_page_id\":\t\ttask_data.from_page_id,\n    \"child_task_id\":    task_data.child_default_task_id,\n    \"date_created\":     task_data.date_created\n};\n\nmsg.taskObj = taskObj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 460,
        "wires": [
            [
                "f6fc1ae8.8dee88"
            ]
        ]
    },
    {
        "id": "83e24aec.aefcf8",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "details",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_details",
        "index": "page_id",
        "x": 650,
        "y": 860,
        "wires": [
            [
                "a897dd68.ae6de"
            ]
        ]
    },
    {
        "id": "9c7129b8.99c948",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "page_id",
        "func": "msg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"-_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 860,
        "wires": [
            [
                "83e24aec.aefcf8"
            ]
        ]
    },
    {
        "id": "a897dd68.ae6de",
        "type": "debug",
        "z": "42835cf9.2628c4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 830,
        "y": 864,
        "wires": []
    },
    {
        "id": "5c0578a5.718dc8",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 860,
        "wires": [
            [
                "9c7129b8.99c948"
            ]
        ]
    },
    {
        "id": "988713bf.cf226",
        "type": "inject",
        "z": "42835cf9.2628c4",
        "name": "get page data",
        "topic": "table",
        "payload": "{\"page_id\":11}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 132,
        "y": 859,
        "wires": [
            [
                "5c0578a5.718dc8"
            ]
        ]
    },
    {
        "id": "352581f3.b4ab8e",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "access_token",
        "func": "//node.warn(msg);\nvar access_token = msg.request_data.access_token;\nif(!access_token){\n    msg.payload = {\"access_token\": null};\n}\nelse {\n    msg.payload = {\"access_token\": access_token};\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "b82c6842.ba7b88"
            ]
        ]
    },
    {
        "id": "b82c6842.ba7b88",
        "type": "switch",
        "z": "42835cf9.2628c4",
        "name": "exist?",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "67798a3f.f03d84"
            ],
            [
                "d8658c13.00553"
            ]
        ]
    },
    {
        "id": "67798a3f.f03d84",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "generate ac",
        "func": "var rand = function() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n};\nvar time = function() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n};\n\nvar token = function() {\n    return time()+'.'+rand(); // to make it longer\n};\n\nvar access_token = token();\nglobal.set('access_token', access_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 60,
        "wires": [
            [
                "690a732.e7b1f8c"
            ]
        ]
    },
    {
        "id": "690a732.e7b1f8c",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "page_id=1",
        "func": "msg.request_data.page_id = 1;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 120,
        "wires": [
            [
                "9cb353cb.9f45d",
                "2d75d6fd.df627a"
            ]
        ]
    },
    {
        "id": "81a443d7.944d1",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "page_id=11",
        "func": "msg.request_data.page_id = 11;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "9cb353cb.9f45d",
                "2d75d6fd.df627a"
            ]
        ]
    },
    {
        "id": "438d9799.a12948",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "userObj",
        "func": "var db_user = msg.db_user;\n//node.warn(JSON.stringify(db_user));\nif(typeof db_user == \"undefined\" || !db_user.length) {\n    msg.userObj = {};\n}\nelse{\n    var userObj = {\n        \"user_id\":\t\t\tdb_user[0]._id,\n        \"long_url\": \t\t\"\",\n        \"access_token\":\t\t\"\",\n        \"security_level\":\t\"\",\n        \"phone\":\t\t\t\"\",\n        \"virtual_phone\":\t\"\",\n        \"email\":\t\t\t\"\",\n        \"other\":\t\t\t\"\",\n        \"conversation_id\":\t\"\",\n        \"firstname\": \t\t\"\",\n        \"lastname\": \t\t\"\",\n        \"type\": \t\t    {\"public\":\"public\"},\n        \"image\":\t\t\t\"\",\n    };\n    msg.userObj = get_obj_data(userObj, db_user[0]);\n}\nreturn msg;\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = obj1;\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t}\n\treturn obj;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 500,
        "wires": [
            [
                "afcc296a.a42d48"
            ]
        ]
    },
    {
        "id": "c412dd15.9323a",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "update_create_user_task",
        "func": "var user_task_arr = msg.user_task_arr ,\n    page_id = msg.request_data.page_id,\n    userObj = msg.userObj,\n    taskObj = msg.taskObj,\n    user_task = isUserTaskCreated(userObj, taskObj, user_task_arr);\n    \nif(check_obj(user_task) > 1){\n    msg.payload = update_user_task(userObj.user_id, taskObj.task_id, 0, 1) ;\n}else{\n    msg.payload = {\n    \ttask_id \t\t: taskObj.task_id,\n    \tuser_id\t\t\t: userObj.user_id,\n    \tpage_id         : parseInt(page_id),\n    \tupdate_read     : false,\n    \tupdate_active   : false, \n    \tsynchronized    : 1,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: null,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 0,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {}\n    };\n}\nreturn msg ;\n\nfunction update_user_task(user_id, task_id, status, synchronized){\n    var user_task = search_user_task_from_table(user_id, task_id);\n    user_task.synchronized          = synchronized ;\n    user_task.date_updated          = new Date().toJSON();\n    \n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === true || user_task.count_status.unread === \"true\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n\n    if(user_task.parent_id) update_user_task(user_id, user_task.parent_id, false, true);\n    \n    user_task.update_read   = true ;\n    user_task.update_active = true ;\n    return user_task;\n}\n\nfunction search_user_task_from_table(user_id, task_id){\n    var obj = {};\n    \n    for(var i=0; i< user_task_arr.length; i++){\n        if(\n            user_task_arr[i].user_id    === user_id &&\n            user_task_arr[i].task_id    === task_id\n        ){\n            obj = user_task_arr[i];\n        }\n    }\n    \n    return obj ;\n}\n\nfunction isUserTaskCreated(userObj, taskObj, user_task_arr){\n    var obj = {} ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i < user_task_arr.length; i++){\n            if(\n                user_task_arr[i].task_id === taskObj.task_id &&\n                user_task_arr[i].user_id === userObj.user_id \n            ){\n                obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 739,
        "y": 596,
        "wires": [
            [
                "b9119620.cb7738",
                "713347bf.f7a0f8"
            ]
        ]
    },
    {
        "id": "afcc296a.a42d48",
        "type": "cloudant in",
        "z": "42835cf9.2628c4",
        "name": "User_Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 391,
        "y": 596,
        "wires": [
            [
                "9c553ff.9749ec"
            ]
        ]
    },
    {
        "id": "b9119620.cb7738",
        "type": "cloudant out",
        "z": "42835cf9.2628c4",
        "name": "Update User Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1025,
        "y": 555,
        "wires": []
    },
    {
        "id": "9c553ff.9749ec",
        "type": "change",
        "z": "42835cf9.2628c4",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_task_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 545,
        "y": 596,
        "wires": [
            [
                "c412dd15.9323a"
            ]
        ]
    },
    {
        "id": "713347bf.f7a0f8",
        "type": "function",
        "z": "42835cf9.2628c4",
        "name": "return page",
        "func": "var page_id = msg.request_data.page_id;\nvar userObj = msg.userObj;\nvar taskObj = msg.taskObj;\nvar detailObj = msg.detailObj;\nvar apiResult = {\n        \"page_id\":  page_id,\n        \"user\":     userObj,\n        \"task\":     taskObj,\n        \"detail\":   detailObj,\n        \"user_task\": msg.payload \n\t};\nif(page_id == 1){\n\tapiResult.access_token = global.get('access_token');\n}\nmsg.payload = apiResult;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1003,
        "y": 598,
        "wires": [
            [
                "7e761808.384018",
                "48f77390.082bbc"
            ]
        ]
    },
    {
        "id": "7e761808.384018",
        "type": "http response",
        "z": "42835cf9.2628c4",
        "name": "API Result",
        "x": 1179,
        "y": 603,
        "wires": []
    },
    {
        "id": "48f77390.082bbc",
        "type": "debug",
        "z": "42835cf9.2628c4",
        "name": "From GetPage APi endpoint",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1229,
        "y": 658,
        "wires": []
    },
    {
        "id": "b0c1804d.d7f77",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_page",
        "func": "msg.req_body = msg.payload.body ;\nvar isValid = isValidBody(msg.req_body);\n\nif(isValid.isError){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = isValid.msg ;\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload     = msg.req_body ;\n}\nreturn msg;\n\nfunction isValidBody(obj){\n    if(obj){\n        if( !(\"access_token\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`access_token` in missing.\", data: null}};\n        }\n        \n        if( !(\"page_id\" in obj)){\n           return {isError: true, msg: {status: 400, error: true, msg: \"`page_id` in missing.\", data: null}};\n        }\n        \n        return {isError: false};\n    }else{\n        return false ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 685,
        "y": 1605,
        "wires": [
            [
                "a837bcc3.7a38"
            ]
        ]
    },
    {
        "id": "a837bcc3.7a38",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 828,
        "y": 1625,
        "wires": [
            [
                "8c6963c6.24cef"
            ],
            [
                "43db9aa9.b64154"
            ]
        ]
    },
    {
        "id": "8c6963c6.24cef",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 984.0000305175781,
        "y": 1588,
        "wires": []
    },
    {
        "id": "2d75d6fd.df627a",
        "type": "debug",
        "z": "42835cf9.2628c4",
        "name": "detail payload",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1138,
        "y": 175,
        "wires": []
    },
    {
        "id": "cb90d33.8efda3",
        "type": "debug",
        "z": "c80a9dd2.e75c1",
        "name": "get_page_req_log",
        "active": true,
        "console": "false",
        "complete": "request_data",
        "x": 420,
        "y": 51,
        "wires": []
    },
    {
        "id": "b77a7a77.4d7c98",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 293,
        "y": 133,
        "wires": []
    },
    {
        "id": "2c072fa6.f5b59",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 308,
        "y": 537,
        "wires": []
    },
    {
        "id": "d0cf4057.e9198",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "task_table",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getTask",
        "index": "get_by_page_id",
        "x": 1126,
        "y": 220,
        "wires": [
            [
                "59a6f508.0e870c"
            ]
        ]
    },
    {
        "id": "94f54f79.ce9c9",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1111,
        "y": 550,
        "wires": [
            [
                "ca42ebf0.f519c8"
            ]
        ]
    },
    {
        "id": "a83828ae.4fec78",
        "type": "debug",
        "z": "c80a9dd2.e75c1",
        "name": "get_page_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1143,
        "y": 649,
        "wires": []
    },
    {
        "id": "c6ea2276.35e88",
        "type": "switch",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 486,
        "y": 354,
        "wires": [
            [
                "4eee3a07.fbcf44"
            ],
            [
                "2eca6439.239b7c"
            ]
        ]
    },
    {
        "id": "4eee3a07.fbcf44",
        "type": "http response",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "x": 612,
        "y": 298,
        "wires": []
    },
    {
        "id": "b5d0e512.1ee5a8",
        "type": "switch",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 741,
        "y": 499,
        "wires": [
            [
                "3da6eccb.da0dc4"
            ],
            [
                "3e01db63.255ac4"
            ]
        ]
    },
    {
        "id": "3da6eccb.da0dc4",
        "type": "http response",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "x": 870,
        "y": 463,
        "wires": []
    },
    {
        "id": "d0358179.b9e4e",
        "type": "switch",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 923.9999694824219,
        "y": 586,
        "wires": [
            [
                "3e4891ed.4241ee"
            ],
            [
                "94f54f79.ce9c9",
                "13bc99e5.59f2d6",
                "a83828ae.4fec78"
            ]
        ]
    },
    {
        "id": "3e4891ed.4241ee",
        "type": "http response",
        "z": "c80a9dd2.e75c1",
        "name": "",
        "x": 1101,
        "y": 500,
        "wires": []
    },
    {
        "id": "f19e7ab2.806638",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "Else case",
        "func": "msg.payload = {\n    staus: 400,\n    error: true,\n    msg: \"please check `body type` params. type outofIndex.\",\n    data: null\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 697,
        "y": 2197,
        "wires": [
            [
                "bfbe5fde.ea62b"
            ]
        ]
    },
    {
        "id": "bfbe5fde.ea62b",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 851.2421875,
        "y": 2194.4609375,
        "wires": []
    },
    {
        "id": "ece6dbea.d72238",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_screen",
        "func": "msg.req_body = msg.payload.body ;\n\nif(msg.req_body.table){\n    msg.table_type = msg.req_body.table ;    \n}else{\n    msg.table_type = undefined ;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 715.5,
        "y": 1925,
        "wires": [
            [
                "d46c30bb.10fba"
            ]
        ]
    },
    {
        "id": "d46c30bb.10fba",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "table_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "template",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "task_table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "details",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "user_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "location",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 8,
        "x": 881.0000152587891,
        "y": 1956,
        "wires": [
            [
                "d01fa3c6.0d9d3"
            ],
            [
                "1f6d8158.d2164f"
            ],
            [
                "38e3dfe8.a93cf"
            ],
            [
                "d82e9664.801328"
            ],
            [
                "a61f353e.8c23b8"
            ],
            [
                "ee45e04e.11aca"
            ],
            [
                "9f461102.7e34a"
            ],
            [
                "229ac9a9.739a96"
            ]
        ]
    },
    {
        "id": "d01fa3c6.0d9d3",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "template",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1059.9998931884766,
        "y": 1907,
        "wires": [
            [
                "47576367.d0153c",
                "84626e8b.47073"
            ]
        ]
    },
    {
        "id": "1f6d8158.d2164f",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "task_table",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1071.9998931884766,
        "y": 1946,
        "wires": [
            [
                "de94c628.06ead8",
                "84626e8b.47073"
            ]
        ]
    },
    {
        "id": "38e3dfe8.a93cf",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "details",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1051.9998931884766,
        "y": 1989,
        "wires": [
            [
                "454d1fea.45976",
                "84626e8b.47073"
            ]
        ]
    },
    {
        "id": "d82e9664.801328",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "users",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1051.9998931884766,
        "y": 2034,
        "wires": [
            [
                "4b8d761a.b5a528",
                "84626e8b.47073"
            ]
        ]
    },
    {
        "id": "a61f353e.8c23b8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "user_task",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1061.9998931884766,
        "y": 2076,
        "wires": [
            [
                "eb3986d6.3501b8",
                "c86f133f.7e2d1"
            ]
        ]
    },
    {
        "id": "ee45e04e.11aca",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "timeout",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1061.9998931884766,
        "y": 2119,
        "wires": [
            [
                "cdec01ce.3e3f2",
                "c86f133f.7e2d1"
            ]
        ]
    },
    {
        "id": "9f461102.7e34a",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "location",
        "func": "delete msg.req_body.table ;\nmsg.payload = msg.req_body ;\nmsg.api_result = {status: 200, error: false, msg: \"Record updated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1061.9998931884766,
        "y": 2162,
        "wires": [
            [
                "cb0342db.230c8",
                "c86f133f.7e2d1"
            ]
        ]
    },
    {
        "id": "229ac9a9.739a96",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "else",
        "func": "msg.payload = {status: 400, error: true, msg: \"Please specify the table param in request body\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1053.9998931884766,
        "y": 2213,
        "wires": [
            [
                "a020b05a.a37a7"
            ]
        ]
    },
    {
        "id": "a020b05a.a37a7",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1206,
        "y": 2280,
        "wires": []
    },
    {
        "id": "47576367.d0153c",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1316.9998931884766,
        "y": 1903,
        "wires": []
    },
    {
        "id": "3a853784.e78338",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "isUpdatedUser_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update_user_task",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1988,
        "y": 1363,
        "wires": [
            [
                "c042e86e.f6bdc8"
            ],
            [
                "a66cc163.98513"
            ]
        ]
    },
    {
        "id": "c042e86e.f6bdc8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2124,
        "y": 1309,
        "wires": []
    },
    {
        "id": "cce73912.3ab918",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_user_task_list",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 713,
        "y": 177,
        "wires": [
            [
                "13b7aadc.65afe5"
            ]
        ]
    },
    {
        "id": "81ce98fe.b4b2b8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_location_list",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 702,
        "y": 220,
        "wires": [
            [
                "c602db14.2eabc8"
            ]
        ]
    },
    {
        "id": "27c521c2.84d83e",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "get_timeout_list",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 703,
        "y": 262,
        "wires": [
            [
                "5f6a870.e980f78"
            ]
        ]
    },
    {
        "id": "5f6a870.e980f78",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "timeout",
        "cloudant": "5281de41.649f",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 888.63671875,
        "y": 261.80078125,
        "wires": [
            [
                "3b3cff9.ceaa3"
            ]
        ]
    },
    {
        "id": "c602db14.2eabc8",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "Location",
        "cloudant": "5281de41.649f",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 889.640625,
        "y": 219.8046875,
        "wires": [
            [
                "1c6571a6.52f3be"
            ]
        ]
    },
    {
        "id": "13b7aadc.65afe5",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "User Task",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 889.62890625,
        "y": 175.8046875,
        "wires": [
            [
                "13fa2f39.def231"
            ]
        ]
    },
    {
        "id": "13fa2f39.def231",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1064.3789000101388,
        "y": 175.64843634516,
        "wires": []
    },
    {
        "id": "1c6571a6.52f3be",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1063.3828062601388,
        "y": 222.66015509516,
        "wires": []
    },
    {
        "id": "3b3cff9.ceaa3",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1062.3867125101388,
        "y": 262.66015509516,
        "wires": []
    },
    {
        "id": "dfda5806.4cfe48",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_stat",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1434,
        "y": 1380,
        "wires": [
            [
                "25913df3.105a22"
            ],
            [
                "a667a360.e6343"
            ]
        ]
    },
    {
        "id": "25913df3.105a22",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1611,
        "y": 1329,
        "wires": []
    },
    {
        "id": "cb0342db.230c8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "location",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1314.9998931884766,
        "y": 2190,
        "wires": []
    },
    {
        "id": "c86f133f.7e2d1",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1303.9998931884766,
        "y": 2230,
        "wires": []
    },
    {
        "id": "cdec01ce.3e3f2",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "timeout",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1314.9998931884766,
        "y": 2152,
        "wires": []
    },
    {
        "id": "eb3986d6.3501b8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1315.9998931884766,
        "y": 2110,
        "wires": []
    },
    {
        "id": "4b8d761a.b5a528",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1304.9998931884766,
        "y": 2068,
        "wires": []
    },
    {
        "id": "454d1fea.45976",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1305.9998931884766,
        "y": 2027,
        "wires": []
    },
    {
        "id": "84626e8b.47073",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1304.9998931884766,
        "y": 1987,
        "wires": []
    },
    {
        "id": "de94c628.06ead8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1322.9998931884766,
        "y": 1946,
        "wires": []
    },
    {
        "id": "fb5c869b.fe2118",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_get_user_tasks",
        "func": "msg.req_body = msg.payload.body ;\n// msg.payload = {status : 200, error: false, msg: \"Record updated successfully\", data: [], filtred: []};\n// return msg;\nmsg.payload = {\n    selector: create_selector(msg.req_body.filter),\n    query : create_filtred_query(msg.req_body.user_id, msg.req_body.filter)\n};\n\nnode.warn(\"msg.payload\");\nnode.warn(msg.payload);\nreturn msg;\n\nfunction create_selector(filter){\n    var obj = {};\n    if(\"synchronized\" in filter){\n        if(parseInt(filter.synchronized) === 0){\n            obj.synchronized = {\n               \"$ne\" : 1\n            };\n            delete msg.req_body.filter.synchronized ;\n        }\n    }\n    \n    if(\"status\" in filter){\n        if(parseInt(filter.status) === 0){\n            obj.status = {\n               \"$ne\" : 1\n            };\n            delete msg.req_body.filter.status ;\n        }\n    }\n    return obj ;\n}\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n\n        if((\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id  ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter < length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 738.0078125,
        "y": 1408.5234375,
        "wires": [
            [
                "78b795f7.36927c",
                "7a103508.110c8c"
            ]
        ]
    },
    {
        "id": "7a103508.110c8c",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 943.0078125,
        "y": 1496.5234375,
        "wires": []
    },
    {
        "id": "78b795f7.36927c",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "search",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "custom_search",
        "index": "custom_search",
        "x": 923.0078125,
        "y": 1452.5234375,
        "wires": [
            [
                "a1726b46.b290b8"
            ]
        ]
    },
    {
        "id": "65821659.5a36f8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "update_task",
        "func": "    msg.updated_content = return_user_task_filtred_arr(msg.req_body.user_task_list, msg.payload) ;\n    msg.updated_content_length = msg.updated_content.length;\n    msg.res_user_task = [];\n    msg.counter = 0 ;\n    msg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.res_user_task, filtred: msg.filtred_user_task_list};\n    node.warn(\"Reached here....\");\n    node.warn(msg);\nreturn msg;\n\n\nfunction return_user_task_filtred_arr(req_user_task_list, user_tasks_list){\n    var selected_arr = [];\n    if(\n        user_tasks_list !== undefined && \n        user_tasks_list !== null &&\n        req_user_task_list !== undefined &&\n        req_user_task_list !== null \n    ){\n        for(var i=0; i< req_user_task_list.length; i++){\n            for(j =0; j<user_tasks_list.length; j++){\n                if(\n                    req_user_task_list[i].user_id == user_tasks_list[j].user_id &&\n                    req_user_task_list[i].task_id == user_tasks_list[j].task_id &&\n                    req_user_task_list[i].page_id == user_tasks_list[j].page_id \n                ){\n                  \n                  \n                    user_tasks_list[j].synchronized = req_user_task_list[i].synchronized ;\n                    user_tasks_list[j].status = req_user_task_list[i].status;\n                    user_tasks_list[j].date_updated = req_user_task_list[i].date_updated;\n                    user_tasks_list[j].count = req_user_task_list[i].count;\n                    selected_arr.push(user_tasks_list[j]);\n                }\n            }\n        }    \n        \n        return selected_arr;\n    }else{\n        return selected_arr ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1251.0078125,
        "y": 1505.5234375,
        "wires": [
            [
                "df85fb2d.cc8758"
            ]
        ]
    },
    {
        "id": "8d46d22a.350ec",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "api_res",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1588.0078125,
        "y": 1545.5234375,
        "wires": [
            [
                "71de5289.dcdd7c"
            ]
        ]
    },
    {
        "id": "f08acab8.377e38",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1778.0078125,
        "y": 1500.5234375,
        "wires": []
    },
    {
        "id": "71de5289.dcdd7c",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 1765.0078125,
        "y": 1547.5234375,
        "wires": []
    },
    {
        "id": "5f5155d7.ab50ac",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "payload",
        "func": "    var counter = msg.counter ;\n    msg.payload = msg.updated_content[counter];\n    msg.res_user_task.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1591,
        "y": 1501,
        "wires": [
            [
                "f08acab8.377e38",
                "da308df2.b0921"
            ]
        ]
    },
    {
        "id": "df85fb2d.cc8758",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "updated_content_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1422,
        "y": 1503,
        "wires": [
            [
                "5f5155d7.ab50ac"
            ],
            [
                "8d46d22a.350ec"
            ]
        ]
    },
    {
        "id": "da308df2.b0921",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "counter",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1502,
        "y": 1454,
        "wires": [
            [
                "df85fb2d.cc8758"
            ]
        ]
    },
    {
        "id": "ca0340dc.3125",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 1242,
        "y": 1451,
        "wires": [
            [
                "65821659.5a36f8"
            ]
        ]
    },
    {
        "id": "a1726b46.b290b8",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "filtred_user_task_list",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1064,
        "y": 1451,
        "wires": [
            [
                "ca0340dc.3125"
            ]
        ]
    },
    {
        "id": "dd88b5c9.2e1168",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "menu page",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 992,
        "y": 494,
        "wires": []
    },
    {
        "id": "4d261a7f.12c804",
        "type": "inject",
        "z": "505a09c5.621328",
        "name": "SMS verify",
        "topic": "NoteToSelf Code",
        "payload": "1234",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 643,
        "y": 453,
        "wires": [
            []
        ]
    },
    {
        "id": "c73b58c0.0a4d18",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "11. return verify page & ac",
        "func": "node.warn(\"in verify token case...\");\nvar req_body = msg.user_data ;\nif(msg.user_data.phone){\n    node.warn(msg.user_data.phone);\n    \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"access_token\": msg.access_token,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"access_token\": msg.access_token,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nnode.warn(msg);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "ad522d0c.dc4ab"
            ]
        ]
    },
    {
        "id": "ad522d0c.dc4ab",
        "type": "switch",
        "z": "505a09c5.621328",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "137fa500.6fb9bb"
            ],
            [
                "b0ff54bd.8a8f28"
            ]
        ]
    },
    {
        "id": "137fa500.6fb9bb",
        "type": "function",
        "z": "505a09c5.621328",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = code;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "749c447d.38ea4c",
                "47e61224.2060ec",
                "3334fe5e.960e52"
            ]
        ]
    },
    {
        "id": "47e61224.2060ec",
        "type": "twilio out",
        "z": "505a09c5.621328",
        "service": "_ext_",
        "twilio": "9cf87311.0014a",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "749c447d.38ea4c",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "73d92033.6eb02",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "3334fe5e.960e52",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "73d92033.6eb02"
            ]
        ]
    },
    {
        "id": "b0ff54bd.8a8f28",
        "type": "change",
        "z": "505a09c5.621328",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "b7263275.e082d",
                "453bf294.25fdcc"
            ]
        ]
    },
    {
        "id": "b7263275.e082d",
        "type": "http response",
        "z": "505a09c5.621328",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "628b31ce.f25a",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "get user by phone",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 965,
        "y": 132,
        "wires": []
    },
    {
        "id": "453bf294.25fdcc",
        "type": "debug",
        "z": "505a09c5.621328",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "7f8be5b7.13545c",
        "type": "delay",
        "z": "42835cf9.2628c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 171,
        "y": 69,
        "wires": [
            [
                "24e66865.c05cc8"
            ]
        ]
    },
    {
        "id": "fd4a7631.c51808",
        "type": "switch",
        "z": "42835cf9.2628c4",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 496,
        "y": 347,
        "wires": [
            [
                "e79e1519.ab3468"
            ],
            [
                "4114be17.84984"
            ]
        ]
    },
    {
        "id": "e79e1519.ab3468",
        "type": "http response",
        "z": "42835cf9.2628c4",
        "name": "",
        "x": 647,
        "y": 306,
        "wires": []
    },
    {
        "id": "b601694f.9c35b8",
        "type": "http in",
        "z": "ed7375e0.d65788",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 219,
        "y": 291,
        "wires": [
            [
                "a7cda715.0b2778",
                "3c3ab5f7.c5b22a"
            ]
        ]
    },
    {
        "id": "a7cda715.0b2778",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Handler",
        "func": "var req = msg.payload;\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.req_body = msg.payload;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 411,
        "y": 291,
        "wires": [
            [
                "5a2220ef.96fb9"
            ]
        ]
    },
    {
        "id": "5a2220ef.96fb9",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 574,
        "y": 291,
        "wires": [
            [
                "1dc76b1a.e5bc65"
            ],
            [
                "34cfd307.165fcc"
            ]
        ]
    },
    {
        "id": "1dc76b1a.e5bc65",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 716,
        "y": 253,
        "wires": []
    },
    {
        "id": "34cfd307.165fcc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate body",
        "func": "var body = msg.payload;\nnode.warn(body);\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 735,
        "y": 309,
        "wires": [
            [
                "81b06213.81043"
            ]
        ]
    },
    {
        "id": "81b06213.81043",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 908,
        "y": 309,
        "wires": [
            [
                "fbf18955.7cd068"
            ],
            [
                "411c8f47.fbd3b"
            ]
        ]
    },
    {
        "id": "fbf18955.7cd068",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1056,
        "y": 265,
        "wires": []
    },
    {
        "id": "411c8f47.fbd3b",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "users",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "template",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "task_table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "timeout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "location",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 11,
        "x": 1069,
        "y": 566,
        "wires": [
            [
                "9e3f04e8.fb4808"
            ],
            [
                "8d5f0962.f05e08"
            ],
            [
                "12edb1e8.252dbe"
            ],
            [
                "294f345d.abeb6c"
            ],
            [
                "b70f4949.fcfda8"
            ],
            [
                "36478db.de18072"
            ],
            [
                "4ff506b2.169578"
            ],
            [
                "44c2518e.ef865"
            ],
            [
                "5df254a7.85e2cc"
            ],
            [
                "e4a95d10.a73ea"
            ],
            [
                "2f4d9fc7.859d7"
            ]
        ]
    },
    {
        "id": "9e3f04e8.fb4808",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "User Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table               : body.table,\n    long_url            : null,\n    access_token        : access_token(),\n    security_level      : body.security_level || 0,\n    virtual_phone       : body.phone,\n    email               : body.email,\n    converstation_id    : null,\n    firstname           : body.firstname,\n    lastname            : body.firstname,\n    code                : 1234,\n    password            : body.password,\n    image               : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction rand() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n}\n\nfunction time() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n}\n\nfunction access_token() {\n    return time()+'.'+rand(); // to make it longer\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1298,
        "y": 84,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "8d5f0962.f05e08",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Template Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    _id         : body.table_data._id,\n    table       : body.table,\n    name        : body.table_data.name || \"\",\n    html        : body.table_data.html || \"\",\n    js          : body.table_data.js   || \"\"\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1307,
        "y": 167,
        "wires": [
            [
                "23a83251.96a8ce",
                "8ab5b587.e855e8"
            ]
        ]
    },
    {
        "id": "12edb1e8.252dbe",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Task Table",
        "func": "var body        = msg.req_body.table_data,\n    table_name  = msg.req_body.table,\n    page_id     = generate_page_id();\n\nmsg.payload = {\n    _id                     : body._id,\n    table                   : table_name, \n    task_name               : body.name || \"\", \n    page_id                 : page_id, \n    from_page_id            : page_id,\n    parent_id               : page_id, \n    user_id                 : body.user_id || \"\",\n    header_template_id      : body.header_template_id || \"\",\n    detail_template_id      : body.details_template_id || \"\",\n    footer_template_id      : body.footer_template_id || \"\",\n    timeout_id              : body.timeout_id || \"\",\n    location_id             : body.location_id || \"\",\n    child_default_task_id   : body.child_default_task_id || \"\",\n    child_default_task_name : body.child_default_task_name || \"\",\n    date_created            : body.date_created || new Date().toJSON(),\n    status                  : body.status || 0,\n    category                : body.category || \"\",\n    additional_data_fn      : body.additional_data_fn || \"\",\n    optional_data           : body.optional_data || {},\n    required_data           : body.required_data || {},\n    offline_expiration_time : body.offline_expiration_time || 0,\n    display_if_empty        : body.display_if_empty || 1 ,\n    type                    : {\n        public              : body.type  || \"public\"\n    },\n    image                   : body.image || \"https://upload.wikimedia.org/wikipedia/commons/2/26/512pxIcon-sunset_photo_not_found.png\",\n    count_status\t: {\n\t   active       : 1,\n\t   unread       : 0,\n\t},\n\tcount\t\t\t: {\n\t    active      : 1,\n\t    unread      : 0,\n\t},\n\tcount_if\t\t: {\n\t    active      : 1,\n\t    unread      : 0\n\t},\n    defaults                : {\n        parent              : null,\n        next_child          : null,\n        all_children        : null,\n        user                : body.user_id\n    }\n    \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction generate_page_id() {\n    return new Date().getTime();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1299,
        "y": 254,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "294f345d.abeb6c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Timeout Table",
        "func": "var body        = msg.req_body ,\n    table_name  = msg.req_body.table;\nmsg.payload = {\n    table: table_name,\n    name: msg.timeout_data.name || \"\",\n    timeout_list: create_delivery_obj(body) \n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;\n\nfunction create_delivery_obj(body){\n    var obj = {};\n    var user_id = body.delivery_user_ids ? body.delivery_user_ids.split(',') : \"\";\n    \n    for(var i=0; i < body.delivery_count; i++){\n        obj[i] = {\n            delivery_count      : i , \n            delivery_status     :   body.delivery_status || 0, \n            delivery_due        :   body.delivery_due || new Date.toJSON(),\n            delivery_user_ids   :   user_id[i] ? user_id[i] : body.delivery_user_ids,\n            delivery_via        :   body.delivery_via || \"\",\n            delivery_task_id    :   body.delivery_task_id || \"\",\n            delivery_task_name  :   body.delivery_task_name || \"\", \n            message_id          :   body.message_id || \"\",\n            from_user_id        :   body.from_user_id || \"\"\n        };\n    }\n    return obj ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1312,
        "y": 343,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "b70f4949.fcfda8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Location Table",
        "func": "var body = msg.req_body ;\nmsg.payload = {\n    table         : body.table,\n    location_name : body.name,\n    location_type : body.type,\n    location_data : {\n        lat : body.lat ? Number(body.lat) : 0,\n        lon : body.lon ? Number(body.lon) : 0,\n        dist: body.dist ? Number(body.dist) : 0,\n        web: body.web || \"\"\n    }\n};\nmsg.response = {status: 200, error: false, msg: \"Record created successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1311,
        "y": 443,
        "wires": [
            [
                "8ab5b587.e855e8",
                "23a83251.96a8ce"
            ]
        ]
    },
    {
        "id": "36478db.de18072",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Details Table",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1298,
        "y": 545,
        "wires": [
            [
                "57bec002.50ae8"
            ]
        ]
    },
    {
        "id": "2f4d9fc7.859d7",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1317,
        "y": 1092,
        "wires": [
            [
                "d7abc0d3.b641c"
            ]
        ]
    },
    {
        "id": "d7abc0d3.b641c",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1508,
        "y": 1092,
        "wires": []
    },
    {
        "id": "8ab5b587.e855e8",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Master Table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1757,
        "y": 209.99999523162842,
        "wires": []
    },
    {
        "id": "3c3ab5f7.c5b22a",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 420,
        "y": 219,
        "wires": []
    },
    {
        "id": "8621ee44.0309",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1939,
        "y": 270,
        "wires": []
    },
    {
        "id": "23a83251.96a8ce",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 269,
        "wires": [
            [
                "8621ee44.0309"
            ]
        ]
    },
    {
        "id": "ca9bd935.3bb1e8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = msg.child_task ? msg.child_task[0] : null,\n    timeout             = msg.timeout ? msg.timeout[0] : null ,\n    location            = msg.location ? msg.location[0] : null,\n    user                = msg.user_obj ? msg.user_obj[0] : null ,\n    task                = msg.task_obj ? msg.task_obj[0] : null,\n    user_arr            = msg.user_arr ,\n    form_data           = msg.form_data ;\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\n//big_record_tables.task.child_default = big_record_tables.task.child_default_task_id ? get_obj_from_array(big_record_tables.task.child_default_task_id, msg.task_obj) : null;\n\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id || null;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = form_data.from_user_id || null ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(task.from_page_id) || generate_page_id();\ndetail.to_page_id                       = if_detail_is_msg(msg.task_obj_by_name.child_default_task_id)   || generate_page_id() ;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\n                                            \"public\" : task.type || \"public\"\n                                        };\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\ndetail.watson_incoming                  = {\n                                            message :   \"Watson response to : \" + form_data.note,\n                                            response : {},\n                                            \n                                        } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 0,\n                                            unread : 0\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined && locations.length){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction if_detail_is_msg(child_task_id){\n    if(child_task_id === undefined || child_task_id === null || child_task_id === \"\"){\n        return check_number(msg.task_obj_by_name.page_id) ;\n    }else{\n        return check_number(msg.task_obj_by_name.to_page_id) || calculate_to_page_id(msg.task_obj_by_name, details_arr);\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2260.03125,
        "y": 453.046875,
        "wires": [
            [
                "13870ef9.5fbe41",
                "187b3892.b9f7d7",
                "bac4821c.f56c7"
            ]
        ]
    },
    {
        "id": "9cfb060b.237ad8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"There isn't any Location for task obj\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2964.03125,
        "y": 303.046875,
        "wires": [
            [
                "ca9bd935.3bb1e8"
            ]
        ]
    },
    {
        "id": "a61e3eac.d55ec",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "location",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "location",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3378.03125,
        "y": 362.046875,
        "wires": [
            [
                "ca9bd935.3bb1e8"
            ]
        ]
    },
    {
        "id": "13870ef9.5fbe41",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2521.03125,
        "y": 521.046875,
        "wires": [
            [
                "c404a53d.0210f8"
            ],
            [
                "b429bd3f.1824d"
            ]
        ]
    },
    {
        "id": "388b759a.d94a6a",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "location",
        "property": "location_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2827.03125,
        "y": 309.046875,
        "wires": [
            [
                "9cfb060b.237ad8"
            ],
            [
                "1c8d505b.9922"
            ]
        ]
    },
    {
        "id": "830362c9.3db01",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3156.03125,
        "y": 360.046875,
        "wires": [
            [
                "a61e3eac.d55ec"
            ]
        ]
    },
    {
        "id": "c404a53d.0210f8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2705.03125,
        "y": 503.046875,
        "wires": [
            [
                "fccd2e2e.9bb7b"
            ]
        ]
    },
    {
        "id": "b429bd3f.1824d",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : default_task.user_id || null,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || null,\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2722.03125,
        "y": 557.046875,
        "wires": [
            [
                "fccd2e2e.9bb7b"
            ]
        ]
    },
    {
        "id": "a0e8242.98bd5d8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"There isn't any timeout for this task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2368.03125,
        "y": 300.046875,
        "wires": [
            [
                "388b759a.d94a6a"
            ]
        ]
    },
    {
        "id": "44ef3460.59f8dc",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "timeout",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2735.03125,
        "y": 356.046875,
        "wires": [
            [
                "388b759a.d94a6a"
            ]
        ]
    },
    {
        "id": "1c8d505b.9922",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "location",
        "func": "msg.payload = {\n    query: \"table:location AND _id:\" + msg.location_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2971.03125,
        "y": 362.046875,
        "wires": [
            [
                "830362c9.3db01"
            ]
        ]
    },
    {
        "id": "fccd2e2e.9bb7b",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2880.03125,
        "y": 555.046875,
        "wires": [
            [
                "98d99176.63373",
                "bb1187b6.23d9d8"
            ],
            [
                "d9c4862f.8053d8",
                "98d99176.63373"
            ]
        ]
    },
    {
        "id": "38b87748.c0c0a8",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "property": "timeout_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2224.03125,
        "y": 307.046875,
        "wires": [
            [
                "a0e8242.98bd5d8"
            ],
            [
                "e753aa93.5fbf18"
            ]
        ]
    },
    {
        "id": "fe726396.01143",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2562.03125,
        "y": 357.046875,
        "wires": [
            [
                "44ef3460.59f8dc"
            ]
        ]
    },
    {
        "id": "98d99176.63373",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\n\nif(detail_obj.timeout !== undefined || detail_obj.timeout !== null){\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}else{\n    msg.timeoutLength = 0;\n}\nmsg.count = 0;\nnode.warn(\"msg.timeoutLength\");\nnode.warn(msg.timeoutLength);\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 541.046875,
        "wires": [
            [
                "d104fb73.6fe968"
            ]
        ]
    },
    {
        "id": "d9c4862f.8053d8",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "Optional task log",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3073.03125,
        "y": 582.046875,
        "wires": []
    },
    {
        "id": "e2a27bcd.4580c8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "log",
        "func": "node.warn(\"there isn't any child default_task\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.03125,
        "y": 203.046875,
        "wires": [
            [
                "38b87748.c0c0a8"
            ]
        ]
    },
    {
        "id": "596f0b62.9292c4",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "child_task",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "child_task",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3669.03125,
        "y": 258.046875,
        "wires": [
            [
                "38b87748.c0c0a8"
            ]
        ]
    },
    {
        "id": "e753aa93.5fbf18",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "timeout",
        "func": "msg.payload = {\n    query: \"table:timeout AND _id:\" + msg.timeout_id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2378.03125,
        "y": 358.046875,
        "wires": [
            [
                "fe726396.01143"
            ]
        ]
    },
    {
        "id": "d104fb73.6fe968",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3470.03125,
        "y": 539.046875,
        "wires": [
            [
                "9aa66a3c.033358"
            ],
            [
                "d79adc8b.3221b"
            ]
        ]
    },
    {
        "id": "2888bc9d.d2d6d4",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "child_task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3123.03125,
        "y": 227.046875,
        "wires": [
            [
                "e2a27bcd.4580c8"
            ],
            [
                "4f9da4ac.bb86cc"
            ]
        ]
    },
    {
        "id": "cea484bb.83f458",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3467.03125,
        "y": 259.046875,
        "wires": [
            [
                "596f0b62.9292c4"
            ]
        ]
    },
    {
        "id": "84714b41.e34418",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3626.03125,
        "y": 479.046875,
        "wires": [
            [
                "d104fb73.6fe968"
            ]
        ]
    },
    {
        "id": "9aa66a3c.033358",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n  msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3690.03125,
        "y": 533.046875,
        "wires": [
            [
                "84714b41.e34418",
                "96b20269.d836f"
            ]
        ]
    },
    {
        "id": "d79adc8b.3221b",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3664.03125,
        "y": 585.046875,
        "wires": [
            [
                "4e2e30c.bbb54d",
                "3bf5ab50.5f6c94"
            ]
        ]
    },
    {
        "id": "7b8ede79.ee466",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2953.03125,
        "y": 169.046875,
        "wires": [
            [
                "6fa94d00.794ca4"
            ],
            [
                "2888bc9d.d2d6d4"
            ]
        ]
    },
    {
        "id": "4f9da4ac.bb86cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "child task",
        "func": "msg.payload = {\n    query : \"table:task_table AND _id:\" + msg.child_task_id \n};\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3280.03125,
        "y": 260.046875,
        "wires": [
            [
                "cea484bb.83f458"
            ]
        ]
    },
    {
        "id": "4e2e30c.bbb54d",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3901.03125,
        "y": 565.046875,
        "wires": []
    },
    {
        "id": "f30f4099.a5917",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var task = msg.task_obj , user = msg.user_obj, detail = msg.details_obj;\n\nif(isEmpty(task)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n}else if(isEmpty(user)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.child_task_id   = msg.task_obj[0].child_default_task_id || null;\n    msg.timeout_id      = msg.task_obj[0].timeout_id || null;\n    msg.location_id     = msg.task_obj[0].location_id || null;\n}\nreturn msg;\n\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2790.03125,
        "y": 178.046875,
        "wires": [
            [
                "7b8ede79.ee466"
            ]
        ]
    },
    {
        "id": "6fa94d00.794ca4",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 3129.03125,
        "y": 173.046875,
        "wires": []
    },
    {
        "id": "3fa3c681.7b937a",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "user arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3413.03125,
        "y": 114.046875,
        "wires": [
            [
                "d2b55e61.08c28"
            ]
        ]
    },
    {
        "id": "7edc9154.bf3f8",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3252.03125,
        "y": 116.046875,
        "wires": [
            [
                "3fa3c681.7b937a"
            ]
        ]
    },
    {
        "id": "9ecf65af.3de7e8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3099.03125,
        "y": 117.046875,
        "wires": [
            [
                "7edc9154.bf3f8"
            ]
        ]
    },
    {
        "id": "ce8e3ccf.e5702",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "user_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2911.03125,
        "y": 116.046875,
        "wires": [
            [
                "9ecf65af.3de7e8"
            ]
        ]
    },
    {
        "id": "5eadacce.7fa8a4",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2757.03125,
        "y": 115.046875,
        "wires": [
            [
                "ce8e3ccf.e5702"
            ]
        ]
    },
    {
        "id": "bfcdfc52.7337",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "user_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2594.03125,
        "y": 114.046875,
        "wires": [
            [
                "5eadacce.7fa8a4"
            ]
        ]
    },
    {
        "id": "d7d5c8e0.48a7a8",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "task_obj",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_obj",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2414.03125,
        "y": 115.046875,
        "wires": [
            [
                "bfcdfc52.7337"
            ]
        ]
    },
    {
        "id": "9c1674f8.1d4728",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2239.03125,
        "y": 114.046875,
        "wires": [
            [
                "d7d5c8e0.48a7a8"
            ]
        ]
    },
    {
        "id": "f3355043.b4df1",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1949.03125,
        "y": 413.046875,
        "wires": [
            [
                "9c1674f8.1d4728"
            ]
        ]
    },
    {
        "id": "57bec002.50ae8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var table_data = msg.payload.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(table_data.access_token === null || table_data.access_token === undefined || msg.payload.access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_payload = { \n        query: \"table:task_table AND _id:\" + table_data.task_id \n    };\n    msg.user_payload = {\n        query: \"table:users AND access_token:\" + table_data.access_token  \n    };\n    msg.page_payload = {\n        query: \"table:details AND page_id:\" + table_data.page_id  \n    };\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.03125,
        "y": 466.046875,
        "wires": [
            [
                "b6af2672.99e958"
            ]
        ]
    },
    {
        "id": "d2b55e61.08c28",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "template",
        "func": "msg.payload = {\n    query: \"table:template\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "9ddec7b3.c16d78"
            ]
        ]
    },
    {
        "id": "9ddec7b3.c16d78",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "Templates",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2393.5390625,
        "y": 168.5703125,
        "wires": [
            [
                "b79eeb98.78a8a8"
            ]
        ]
    },
    {
        "id": "b79eeb98.78a8a8",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "template arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "templates_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2614.2734375,
        "y": 176.9921875,
        "wires": [
            [
                "f30f4099.a5917"
            ]
        ]
    },
    {
        "id": "5de3d290.17c0cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    user_task           = msg.payload ? msg.payload[0] : null ;\n\nif(user_task !== null){\n    msg.payload = update_user_task(user_task, detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: null,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 0,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 0,\n    \t    unread      : 0,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 0\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {}\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    if(user_task.parent_id) update_user_task(user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4253.03125,
        "y": 621.046875,
        "wires": [
            [
                "d41f48b0.7f1228"
            ]
        ]
    },
    {
        "id": "3bf5ab50.5f6c94",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND task_id:\" + task_id + \" AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3873.03125,
        "y": 624.046875,
        "wires": [
            [
                "c8e96c2e.712a2"
            ]
        ]
    },
    {
        "id": "c8e96c2e.712a2",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "master_table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4039.03125,
        "y": 623.046875,
        "wires": [
            [
                "5de3d290.17c0cc"
            ]
        ]
    },
    {
        "id": "b6af2672.99e958",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1744,
        "y": 385,
        "wires": [
            [
                "cc9156dd.e6c9d8"
            ],
            [
                "f3355043.b4df1"
            ]
        ]
    },
    {
        "id": "cc9156dd.e6c9d8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1942,
        "y": 355,
        "wires": []
    },
    {
        "id": "d41f48b0.7f1228",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "User Task",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4467,
        "y": 552,
        "wires": []
    },
    {
        "id": "96b20269.d836f",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3911,
        "y": 515,
        "wires": []
    },
    {
        "id": "bb1187b6.23d9d8",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Optional Task",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3061,
        "y": 522,
        "wires": []
    },
    {
        "id": "187b3892.b9f7d7",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2501,
        "y": 481,
        "wires": []
    },
    {
        "id": "bac4821c.f56c7",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2665,
        "y": 456,
        "wires": [
            [
                "7f94322.34c74cc"
            ]
        ]
    },
    {
        "id": "7f94322.34c74cc",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2848,
        "y": 455,
        "wires": []
    },
    {
        "id": "5ce6fa8f.341204",
        "type": "http in",
        "z": "19d64182.cdd4de",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 211.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "659155ee.00678c"
            ]
        ]
    },
    {
        "id": "659155ee.00678c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "Handler",
        "func": "var req = msg.payload;\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.req_params = msg.payload;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 386.765625,
        "y": 282.75,
        "wires": [
            [
                "d85ce3d9.c8439"
            ]
        ]
    },
    {
        "id": "d85ce3d9.c8439",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 549.765625,
        "y": 282.75,
        "wires": [
            [
                "657493ec.dc15ac"
            ],
            [
                "7ab1f39.b0caa0c"
            ]
        ]
    },
    {
        "id": "657493ec.dc15ac",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 720.7655944824219,
        "y": 233.74999237060547,
        "wires": []
    },
    {
        "id": "7ab1f39.b0caa0c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate body",
        "func": "var params = msg.req_params;\nnode.warn(params);\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    var obj = populate_content(params.content) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n    }else{\n        msg.payload_type    = params.type ;\n        msg.payload_content = obj.data ;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    console.log(\"obj >>>\", obj);\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 710.765625,
        "y": 300.75,
        "wires": [
            [
                "516cd8a3.2c7188"
            ]
        ]
    },
    {
        "id": "516cd8a3.2c7188",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 883.765625,
        "y": 300.75,
        "wires": [
            [
                "a0d5da84.f02398"
            ],
            [
                "ba2f65af.6e4b88"
            ]
        ]
    },
    {
        "id": "a0d5da84.f02398",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1031.765625,
        "y": 256.75,
        "wires": []
    },
    {
        "id": "ba2f65af.6e4b88",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_user_tasks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_task",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 1033.765625,
        "y": 416.74999237060547,
        "wires": [
            [
                "931d3641.cc78b8"
            ],
            [
                "1dd3ea1c.8ec786"
            ],
            [
                "474671ce.062f3"
            ],
            [
                "ef75de0.d20e52"
            ],
            [
                "2e3b2403.b34c6c"
            ]
        ]
    },
    {
        "id": "931d3641.cc78b8",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "Validate params",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1270.3828125,
        "y": 73.98828125,
        "wires": [
            [
                "ce38b993.406038"
            ]
        ]
    },
    {
        "id": "ce38b993.406038",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1459.37889039889,
        "y": 71.91796875,
        "wires": [
            [
                "a795f11e.e3a25"
            ],
            [
                "f9a15130.bc60a"
            ]
        ]
    },
    {
        "id": "a795f11e.e3a25",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1622.390625,
        "y": 27.1484375,
        "wires": []
    },
    {
        "id": "f9a15130.bc60a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate page",
        "func": "var params = msg.payload_content ;\n\nmsg.payload = {\n    query: \"table:users AND access_token:\" + params.access_token ,\n    sort : \"_id<string>\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1651.1328125,
        "y": 91,
        "wires": [
            [
                "cacad2c6.c0e4c"
            ]
        ]
    },
    {
        "id": "cacad2c6.c0e4c",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1850.125,
        "y": 90.0625,
        "wires": [
            [
                "fcbf2e9d.f122c"
            ]
        ]
    },
    {
        "id": "fcbf2e9d.f122c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "security",
        "func": "var user = msg.payload ;\n\nif(isEmpty(user)){\n    msg.userStatus = \"invalid\" ;\n}else{\n    msg.isNewUser = false;\n    var security_level = user[0].security_level;\n    \n    if(parseInt(security_level) === 0){\n        msg.userStatus = \"verify\" ;\n    }else{\n        msg.userStatus = \"valid\" ;\n        msg.userObj = {\n            user_id   : user[0]._id ,\n            firstname : user[0].firstname ,\n            lastname  : user[0].lastname ,\n            email     : user[0].email ,\n            phone     : user[0].phone\n        } ;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2033.1328125,
        "y": 90.48828125,
        "wires": [
            [
                "1dd23ac9.800665"
            ]
        ]
    },
    {
        "id": "1dd23ac9.800665",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "userStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 2198.62890625,
        "y": 87.4296875,
        "wires": [
            [
                "23815642.3d669a"
            ],
            [
                "31239e35.d60112"
            ],
            [
                "84589a1a.2cef78"
            ]
        ]
    },
    {
        "id": "23815642.3d669a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page=1",
        "func": "msg.payload = {\n    query: \"table:task_table AND page_id:\" + 1 ,\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2441.136693902314,
        "y": 29.49609375,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "31239e35.d60112",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page=11",
        "func": "msg.payload = {\n    query: \"table:task_table AND page_id:\" + 11 ,\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2439.140625,
        "y": 100.48828125,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "84589a1a.2cef78",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "page",
        "func": "var page_id = parseInt(msg.payload_content.page_id);\nmsg.payload = {\n    query: \"table:task_table AND page_id:\" + page_id ,\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2432.12890625,
        "y": 179.5,
        "wires": [
            [
                "7d6c5e7a.7cb09"
            ]
        ]
    },
    {
        "id": "7d6c5e7a.7cb09",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2694.8333435058594,
        "y": 97.66666412353516,
        "wires": [
            [
                "f36c8ac9.38ce18"
            ]
        ]
    },
    {
        "id": "f36c8ac9.38ce18",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate_record",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status : 400, error: true, msg: \"Unable to get the page with the `page_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj = msg.payload[0];\n    msg.payload = {\n        query : \"table:details AND task_id:\" + msg.task_obj._id ,\n        sort  : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1658.8333740234375,
        "y": 241.99999237060547,
        "wires": [
            [
                "7a03e152.5cdc4"
            ]
        ]
    },
    {
        "id": "c80b6939.11c258",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1982.8333740234375,
        "y": 219.6666488647461,
        "wires": []
    },
    {
        "id": "7a03e152.5cdc4",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1823.1666768391926,
        "y": 243.00000762939453,
        "wires": [
            [
                "c80b6939.11c258"
            ],
            [
                "1aed670.0607b99"
            ]
        ]
    },
    {
        "id": "1aed670.0607b99",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2005.1666259765625,
        "y": 270.99999237060547,
        "wires": [
            [
                "44519a7.1aa2e64"
            ]
        ]
    },
    {
        "id": "44519a7.1aa2e64",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "template_payload",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"unable to fetch task_obj using page_id\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.detail    = msg.payload;\n    msg.payload     = {\n        query   : \"table:template\",\n        sort    : \"_id<string>\" \n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2187.1668701171875,
        "y": 271.33333587646484,
        "wires": [
            [
                "6b2572d.d79ad8c"
            ]
        ]
    },
    {
        "id": "6b2572d.d79ad8c",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2352.5001220703125,
        "y": 321.99999237060547,
        "wires": [
            [
                "ee36d1de.0acb9"
            ],
            [
                "1ee53bd5.12ae84"
            ]
        ]
    },
    {
        "id": "ee36d1de.0acb9",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2502.5003662109375,
        "y": 266.33333587646484,
        "wires": []
    },
    {
        "id": "1ee53bd5.12ae84",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2523.5003662109375,
        "y": 328.6666488647461,
        "wires": [
            [
                "923207e7.5ed858"
            ]
        ]
    },
    {
        "id": "71044f78.6770a",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "prepare taskObj",
        "func": "var template_data       = msg.tempteObj ,\n    task_data           = msg.task_obj,\n    templateObj         = {},\n    header_template_id  = task_data.header_template_id,\n    detail_template_id  = task_data.detail_template_id,\n    footer_template_id  = task_data.footer_template_id;\n\n\nfor(var ind=0; ind<template_data.length; ind++){\n    if(header_template_id == template_data[ind]._id){\n        templateObj.header = template_data[ind];\n    }\n    if(detail_template_id == template_data[ind]._id){\n        templateObj.detail = template_data[ind];\n    }\n    if(footer_template_id == template_data[ind]._id){\n        templateObj.footer = template_data[ind];\n    }\n}\n\n\nvar taskObj = {\n    \"task_id\":\t\t    task_data._id,\n    \"task_name\":\t\ttask_data.task_name,\n    \"template\": \t\ttemplateObj,\n    \"from_page_id\":\t\ttask_data.from_page_id,\n    \"child_task_id\":    task_data.child_default_task_id,\n    \"date_created\":     task_data.date_created\n};\n\nmsg.detail_arr  = msg.payload ;\nmsg.taskObj     = taskObj;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1639.5000101725261,
        "y": 413.00000762939453,
        "wires": [
            [
                "e19597e8.b6f6e8"
            ]
        ]
    },
    {
        "id": "e19597e8.b6f6e8",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "prepare detail_obj",
        "func": "var detail_data = msg.detail,\n    detailObj   = [];\n    \n//**********    detailObj     *******//\nvar detailRecord = {\n    \"_id\": \t\"\",\n    \"image\":\t\t\"\",\n    \"to_page_id\": \t\"\",\n    \"user_id\": \t\t\"\",\n    \"task_id\":      \"\",\n    \"page_id\":      \"\",\n    \"from_user_id\": \"\",\n\t\"user_incoming\":{},\n    \"watson_incoming\":{},\n    \"type\":         {},\n    \"date_created\": \"\",\n    \"from_user\":    {},\n    \"count\":{\"active\":0, \"unread\":0}\n};\n\nif(detail_data.length){\n    for(var d=0; d<detail_data.length; d++){\n        detail_data[d]._id = detail_data[d]._id;\n        detail_data[d].to_page_id = detail_data[d].to_page_id;\n        \n        if(check_isDisplay(detail_data[d].display_if_empty)){\n            detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n        }else{\n            detail_data.splice(d, 0)    ;\n        }\n    }\n    msg.detailObj = removeEmptyArrayElements(detailObj);     \n}else{\n    msg.detailObj = [] ;\n}\n\nmsg.user_task_payload = {query: \"table:user_task\", sort: \"_id<string>\"};\n\nreturn msg;\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1860.1666259765625,
        "y": 411.6666488647461,
        "wires": [
            [
                "4c9fdaa7.6734c4"
            ]
        ]
    },
    {
        "id": "3f8ecaa4.829606",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "response",
        "func": "var page_id         = msg.payload_content.page_id;\nvar userObj         = msg.userObj;\nvar taskObj         = msg.taskObj;\nvar user_task_arr   = msg.payload ;\nvar apiResult       = {} ;\n\ntry{\n    if(page_id == 1 ){\n    \tapiResult.access_token = msg.payload_content.access_token;\n    } \n\n    var apiResult = {\n        \"page_id\":  page_id,\n        \"user\":     userObj,\n        \"task\":     taskObj,\n        \"detail\":   getpage()\n\t};\n    msg.payload = apiResult;\n}catch(e){\n    node.warn(JSON.stringify(e));\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Exception occured while populating page\", data: null, exception: e};\n}\n\n\nreturn msg;\n\nfunction getpage(page_id){\n    var result = get_page_array(page_id) ,\n        detail = result.detail_array ;\n        //update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: result.count}, false);\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(page_id){\n    var detail_array = msg.detailObj,\n        active = 0, unread = 0;\n    //node.warn(\">>>>>>>>>>\", detail_array);        \n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0;\n        if(detail_array[itr].to_page_id){\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n            if(count){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                if(!isEmpty(userObj)){\n                    update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: count}, false);    \n                } \n            }\n        }else{\n            var user_task_obj = return_user_task_obj(detail_array[itr].user_id, detail_array[itr].task_id, detail_array[itr].page_id);\n            if (check_obj(user_task_obj) > 0){\n                 // do count_if check using user_task fields as do in update_user_task\n                current_count_active = user_task_obj.count.active ;\n                current_count_unread = user_task_obj.count.unread ;\n            }else{ // otherwise use defaults\n                 // do count_if check using detail fields as do in update_user_task\n                current_count_active = detail_array[itr].count.active ;\n                current_count_unread = detail_array[itr].count.unread ;\n            }\n            if(!isEmpty(userObj)) {\n                update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: {active: current_count_active, unread: current_count_unread}}, false);\n            }\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        detail_array[itr].count.active = active ;\n        detail_array[itr].count.unread = unread ;\n    }\n    \n    \n    return {\n        detail_array :   detail_array,\n        count        : {\n            active   : active ,\n            unread   : unread \n        }\n    };\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id    === user_id &&\n                user_task_arr[i].task_id    === task_id\n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true ;\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n        \n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:1, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n    \n    if ( create_user_task_flag ) {\n\n        msg.updated_user_task = {\n            table           : \"user_task\",\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: null,\n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 0,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {}\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n    \n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0}, details = msg.detail_arr;\n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n            to_page_id = details[itr].to_page_id ;\n            count.active += details[itr].count.active ;\n            count.unread += details[itr].count.unread ;\n        }\n    }\n    return count;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2383.8338623046875,
        "y": 407.6666793823242,
        "wires": [
            [
                "44d2d7fa.003488"
            ]
        ]
    },
    {
        "id": "5cb2250f.52b26c",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2211.5003662109375,
        "y": 409.6666488647461,
        "wires": [
            [
                "3f8ecaa4.829606"
            ]
        ]
    },
    {
        "id": "4c9fdaa7.6734c4",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "user_task_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2042.5,
        "y": 410.6666793823242,
        "wires": [
            [
                "5cb2250f.52b26c"
            ]
        ]
    },
    {
        "id": "44d2d7fa.003488",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2519.666748046875,
        "y": 405.6666564941406,
        "wires": [
            [
                "4febf507.2ffb4c"
            ],
            [
                "2444f649.16012a",
                "b1f1b512.a78d28",
                "8f56ba74.942768"
            ]
        ]
    },
    {
        "id": "4febf507.2ffb4c",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2748.666748046875,
        "y": 309.6666564941406,
        "wires": []
    },
    {
        "id": "2444f649.16012a",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2758.666748046875,
        "y": 359.6666564941406,
        "wires": [
            [
                "4c2fa507.e8c12c",
                "bada04a.6b80bf8"
            ]
        ]
    },
    {
        "id": "4c2fa507.e8c12c",
        "type": "cloudant out",
        "z": "19d64182.cdd4de",
        "name": "Update User Task",
        "cloudant": "5e923e83.d5527",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2939.666748046875,
        "y": 357.6666564941406,
        "wires": []
    },
    {
        "id": "b1f1b512.a78d28",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "API Result",
        "x": 2767.666748046875,
        "y": 408.6666564941406,
        "wires": []
    },
    {
        "id": "8f56ba74.942768",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "get_page_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2790.666748046875,
        "y": 458.6666564941406,
        "wires": []
    },
    {
        "id": "1dd3ea1c.8ec786",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate params",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n    msg.payload       = {\n        query   : \"table:users AND access_token:\" + params.access_token ,\n        sort    : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1262.5001220703125,
        "y": 495.3333740234375,
        "wires": [
            [
                "729cf817.e61648"
            ]
        ]
    },
    {
        "id": "729cf817.e61648",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1442.8334350585938,
        "y": 568.0000839233398,
        "wires": [
            [
                "77ac6db1.e253e4"
            ],
            [
                "a14c857e.2d83e8"
            ]
        ]
    },
    {
        "id": "77ac6db1.e253e4",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1586.8333740234375,
        "y": 516.333366394043,
        "wires": []
    },
    {
        "id": "a14c857e.2d83e8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1610.1666259765625,
        "y": 617.3333358764648,
        "wires": [
            [
                "a0956b6f.4f2f18"
            ]
        ]
    },
    {
        "id": "a0956b6f.4f2f18",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"Unable to fetch user with this `access_token`\", data:null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.user_obj    = msg.payload[0] ;\n    msg.payload     = {\n        selector    : {\n            synchronized : {\n                $eq : 0\n            }\n        },\n        query       : \"table:user_task AND user_id:\" + msg.user_obj._id ,\n        sort        : \"_id<string>\" \n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1798.1666259765625,
        "y": 617.0000762939453,
        "wires": [
            [
                "9994ed7c.1d88c",
                "996085b2.1dd758"
            ]
        ]
    },
    {
        "id": "9994ed7c.1d88c",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1952.5,
        "y": 617.0000152587891,
        "wires": [
            [
                "1bb09ae7.bacba5"
            ],
            [
                "76421d92.4e9404"
            ]
        ]
    },
    {
        "id": "1bb09ae7.bacba5",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2073.5001220703125,
        "y": 581.3333892822266,
        "wires": []
    },
    {
        "id": "76421d92.4e9404",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2096.1666259765625,
        "y": 649.3333892822266,
        "wires": [
            [
                "566a2e87.88ddd"
            ]
        ]
    },
    {
        "id": "566a2e87.88ddd",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "user_task",
        "func": "var users_task = msg.payload ,\n    req_body   = msg.payload_content ;\n\nvar filtred_user_task = get_filter_user_task(users_task);\nmsg.filtred_user_task_length = filtred_user_task.length;\nmsg.counter = 0 ;\nmsg.page_list = [];\nmsg.filtred_payload = filtred_user_task ;\nmsg.payload = {status: 200, data:null};\nreturn msg;\n\nfunction get_req_user_task(user_task){\n    try{\n        return JSON.parse(user_task);\n    }catch(e){\n        return {} ;\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_filter_user_task(user_task){\n    var result = [];\n    if(!isEmpty(user_task)){\n        for(var itr = 0; itr < user_task.length; itr++){\n            if(user_task[itr].synchronized === 0){\n                result.push(user_task[itr]);\n            }   \n        }\n    }\n    return result ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2260.8333435058594,
        "y": 649.0000076293945,
        "wires": [
            [
                "d691e444.6ce6e8"
            ]
        ]
    },
    {
        "id": "bada04a.6b80bf8",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "update_task_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2945.83349609375,
        "y": 304.66669845581055,
        "wires": []
    },
    {
        "id": "996085b2.1dd758",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1968,
        "y": 546,
        "wires": []
    },
    {
        "id": "d691e444.6ce6e8",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "filtred_user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2439,
        "y": 650,
        "wires": [
            [
                "833ec246.48e22"
            ],
            [
                "80444140.4b696"
            ]
        ]
    },
    {
        "id": "fcf1c16b.dbc57",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2668,
        "y": 573,
        "wires": [
            [
                "d691e444.6ce6e8"
            ]
        ]
    },
    {
        "id": "afa3f6c0.52fd48",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "api_res",
        "func": "msg.page_list.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2931,
        "y": 655,
        "wires": [
            [
                "fcf1c16b.dbc57"
            ]
        ]
    },
    {
        "id": "80444140.4b696",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "res",
        "func": "if(msg.page_list.length){\n    msg.payload = {\n        status : 200,\n        error  : false ,\n        msg    : \"Record fecthed successfully\" ,\n        data   : msg.page_list \n    };\n    return msg;    \n}else{\n    msg.payload = {\n        status : 204,\n        error  : false ,\n        msg    : \"No record with current request\" ,\n        data   : null\n    };\n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2582.7421875,
        "y": 715.1640625,
        "wires": [
            [
                "be4cae3b.9f8a7"
            ]
        ]
    },
    {
        "id": "be4cae3b.9f8a7",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2723.2421875,
        "y": 711.9609375,
        "wires": []
    },
    {
        "id": "833ec246.48e22",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "create_url",
        "func": "msg.url = msg.req.headers.host + '/master_api_handler?type=get_page&content={\"access_token\":\"' + msg.payload_content.access_token + '\", \"page_id\":' + msg.filtred_payload[msg.counter].page_id + '}';\nmsg.method  = \"GET\";\nnode.warn(msg.url);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2595.5078125,
        "y": 646.5234375,
        "wires": [
            [
                "4f9f1137.08099"
            ]
        ]
    },
    {
        "id": "4f9f1137.08099",
        "type": "http request",
        "z": "19d64182.cdd4de",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2767.5078125,
        "y": 650.5234375,
        "wires": [
            [
                "afa3f6c0.52fd48"
            ]
        ]
    },
    {
        "id": "474671ce.062f3",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "node.warn(msg.payload_content);\nmsg.payload = {\n    query : \"table:users AND access_token:\" + msg.payload_content.access_token ,\n    sort  : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg ;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1243.7421875,
        "y": 699.6640625,
        "wires": [
            [
                "1480fe29.5843d2"
            ]
        ]
    },
    {
        "id": "38beca57.bd1d26",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2138.2421875,
        "y": 731.0625,
        "wires": []
    },
    {
        "id": "1480fe29.5843d2",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1412.7421875,
        "y": 698.2734375,
        "wires": [
            [
                "219f03a1.394c6c"
            ]
        ]
    },
    {
        "id": "219f03a1.394c6c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "if(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true , msg: \"Unable to find user with access_token\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.filter_obj      = msg.payload_content.filter ;\n    msg.user_task_list  = msg.payload_content.user_task_list ;\n    msg.user            = msg.payload[0];\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1598.7578125,
        "y": 698.65625,
        "wires": [
            [
                "adeca021.ed0b"
            ]
        ]
    },
    {
        "id": "adeca021.ed0b",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1762.7578125,
        "y": 749.9765625,
        "wires": [
            [
                "106c3fb8.3df21"
            ],
            [
                "bc0a3533.510b68"
            ]
        ]
    },
    {
        "id": "106c3fb8.3df21",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1934.2578125,
        "y": 680.4609375,
        "wires": []
    },
    {
        "id": "bc0a3533.510b68",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "var filter          = msg.filter_obj ,\n    user_task_list  = msg.user_task_list ;\n    user            = msg.user ;\n    \n    msg.payload = {\n        selector    : create_selector(filter),\n        query       : create_filtred_query(user._id, filter)\n    };    \n    node.warn(msg.payload);\nreturn msg;\n\nfunction create_selector(filter){\n    var obj = {};\n    if(\"synchronized\" in filter){\n        if(parseInt(filter.synchronized) === 0){\n            obj.synchronized = {\n               \"$ne\" : 1\n            };\n            delete filter.synchronized ;\n        }\n    }\n    \n    if(\"status\" in filter){\n        if(parseInt(filter.status) === 0){\n            obj.status = {\n               \"$ne\" : 1\n            };\n            delete filter.status ;\n        }\n    }\n    return obj ;\n}\n\nfunction create_filtred_query(user_id, filter_obj){\n    var filter_string = \"\";\n    if(obj_length(filter_obj) > 0){\n\n        if(!(\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj) + \" user_id:\" + user_id;\n        }\n\n        if((\"user_id\" in filter_obj)){\n            filter_string = create_query(filter_obj);\n        }\n\n    }else{\n        filter_string = \"user_id:\" + user_id  ;\n    }\n    return filter_string;\n}\n\nfunction check_obj_count(obj){\n    var length = Object.keys(obj).length ;\n    \n    if( (\"user_id\" in obj) ){\n        length = length - 1 ;\n    }\n    \n    return length;\n}\n\nfunction create_query(obj){\n    var length = check_obj_count(obj),\n        counter = 0,\n        string = \"\";\n\n    for(var key in obj){\n        if(counter < length){\n            string += key + \":\" + obj[key] + \" AND \";    \n        }else{\n            string += key + \":\" + obj[key] ;\n        }\n        counter++ ;\n    }\n    return string;    \n}\n\nfunction obj_length(obj){\n    return Object.keys(obj).length ;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1945.2421875,
        "y": 765.1640625,
        "wires": [
            [
                "38beca57.bd1d26",
                "45d34605.bc4cb8"
            ]
        ]
    },
    {
        "id": "45d34605.bc4cb8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2139.242142617704,
        "y": 801.7656131535772,
        "wires": [
            [
                "b2194df9.3a7cd",
                "371e04e4.019fec"
            ]
        ]
    },
    {
        "id": "b2194df9.3a7cd",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "msg.filtred_user_task_list = msg.payload ;\nmsg.payload = {\n    query : \"table:user_task\",\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2308.7421525865802,
        "y": 800.1718702614309,
        "wires": [
            [
                "23fd9507.c7c2ea"
            ]
        ]
    },
    {
        "id": "23fd9507.c7c2ea",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2498.7421875,
        "y": 813.2734375,
        "wires": [
            [
                "3744df0c.4d4c3"
            ]
        ]
    },
    {
        "id": "3744df0c.4d4c3",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "populate",
        "func": "\nmsg.updated_content = return_user_task_filtred_arr(msg.user_task_list, msg.payload) ;\nmsg.updated_content_length = msg.updated_content.length;\nmsg.res_user_task = [];\nmsg.counter = 0 ;\nmsg.api_response = {status : 200, error: false, msg: \"Record updated successfully\", data: msg.res_user_task, filtred: msg.filtred_user_task_list};\nreturn msg;\n\n\nfunction return_user_task_filtred_arr(req_user_task_list, user_tasks_list){\n    var selected_arr = [];\n    if(\n        user_tasks_list !== undefined && \n        user_tasks_list !== null &&\n        req_user_task_list !== undefined &&\n        req_user_task_list !== null \n    ){\n        for(var i=0; i< req_user_task_list.length; i++){\n            for(j =0; j<user_tasks_list.length; j++){\n                if(\n                    req_user_task_list[i].user_id == user_tasks_list[j].user_id &&\n                    req_user_task_list[i].task_id == user_tasks_list[j].task_id &&\n                    req_user_task_list[i].page_id == user_tasks_list[j].page_id \n                ){\n                  \n                  \n                    user_tasks_list[j].synchronized = req_user_task_list[i].synchronized ;\n                    user_tasks_list[j].status = req_user_task_list[i].status;\n                    user_tasks_list[j].date_updated = req_user_task_list[i].date_updated;\n                    user_tasks_list[j].count = req_user_task_list[i].count;\n                    selected_arr.push(user_tasks_list[j]);\n                }\n            }\n        }    \n        \n        return selected_arr;\n    }else{\n        return selected_arr ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2656.7421875,
        "y": 814.671875,
        "wires": [
            [
                "7c79b274.444edc"
            ]
        ]
    },
    {
        "id": "7c79b274.444edc",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "updated_content_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2826.5078125,
        "y": 800.0234375,
        "wires": [
            [
                "799d9765.d3b458"
            ],
            [
                "b4f174b6.9e04e8"
            ]
        ]
    },
    {
        "id": "5f5b6b27.a49554",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "counter",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2927.5078125,
        "y": 742.0234375,
        "wires": [
            [
                "7c79b274.444edc"
            ]
        ]
    },
    {
        "id": "799d9765.d3b458",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "payload",
        "func": "    var counter = msg.counter ;\n    msg.payload = msg.updated_content[counter];\n    msg.res_user_task.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3016.5078125,
        "y": 789.0234375,
        "wires": [
            [
                "4baf3c7c.78ec54",
                "5f5b6b27.a49554"
            ]
        ]
    },
    {
        "id": "b4f174b6.9e04e8",
        "type": "change",
        "z": "19d64182.cdd4de",
        "name": "api_res",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3007.515625,
        "y": 878.546875,
        "wires": [
            [
                "b55562d8.44d3"
            ]
        ]
    },
    {
        "id": "b55562d8.44d3",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 3188.515625,
        "y": 876.546875,
        "wires": []
    },
    {
        "id": "4baf3c7c.78ec54",
        "type": "cloudant out",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3213.515625,
        "y": 788.546875,
        "wires": []
    },
    {
        "id": "371e04e4.019fec",
        "type": "debug",
        "z": "19d64182.cdd4de",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2319.7578125,
        "y": 855.0546875,
        "wires": []
    },
    {
        "id": "4ff506b2.169578",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "delete_detail",
        "func": "var body = msg.payload.table_data;\n    \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(body.access_token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.access_token    = body.access_token ;\n        msg.detail_id       = body.id ;\n        msg.api_status      = \"API_SUCCESS\";\n        msg.payload         = {\n                query   : \"table:users AND _id:\" + body.access_token ,\n                sort    : \"_id<string>\"\n        };\n        node.warn(msg.payload);\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1296.7578125,
        "y": 634.171875,
        "wires": [
            [
                "aff97560.7d8878"
            ]
        ]
    },
    {
        "id": "aff97560.7d8878",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1488.7421875,
        "y": 637.9765625,
        "wires": [
            [
                "c4ac724d.ac859"
            ],
            [
                "7ae112b9.da4dbc"
            ]
        ]
    },
    {
        "id": "c4ac724d.ac859",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1629.7421624213466,
        "y": 592.4609327614309,
        "wires": []
    },
    {
        "id": "7ae112b9.da4dbc",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1651.7421875,
        "y": 664.7734375,
        "wires": [
            [
                "5b60dcfd.46ada4"
            ]
        ]
    },
    {
        "id": "5b60dcfd.46ada4",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate",
        "func": "var user = msg.payload ;\n    \n    if(isEmpty(user)){\n        msg.api_status  = \"API_ERROR\"    ;\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`\", data: null};\n    }else{\n        msg.user_obj    = user[0];\n        msg.payload     = {\n            query   : \"table:details AND _id:\" + msg.detail_id ,\n            sort    : \"_id<string>\"\n        };\n    }\n    \nnode.warn(msg.payload);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1821.7578125,
        "y": 691.1640625,
        "wires": [
            [
                "87fa1f95.ef692"
            ]
        ]
    },
    {
        "id": "87fa1f95.ef692",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1978.749960705639,
        "y": 689.9843702614309,
        "wires": [
            [
                "5507605c.5a705"
            ],
            [
                "69913b1d.374e24"
            ]
        ]
    },
    {
        "id": "5507605c.5a705",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2102.7421875,
        "y": 658.953125,
        "wires": []
    },
    {
        "id": "69913b1d.374e24",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_tabe",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2120.7578125,
        "y": 714.765625,
        "wires": [
            [
                "8a5bd2e0.66aa3"
            ]
        ]
    },
    {
        "id": "8a5bd2e0.66aa3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "validate detail",
        "func": "var detail = msg.payload ;\n\n    if(isEmpty(detail)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with this id\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.detail_obj      = detail[0] ;\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2320.2577610909957,
        "y": 714.1718678921463,
        "wires": [
            [
                "d51b97c1.e41208"
            ]
        ]
    },
    {
        "id": "d51b97c1.e41208",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2484.7421423047795,
        "y": 758.9843678921463,
        "wires": [
            [
                "7852346d.81e6fc"
            ],
            [
                "a08f1848.dcc968"
            ]
        ]
    },
    {
        "id": "7852346d.81e6fc",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2621.166748046875,
        "y": 727.6666870117188,
        "wires": []
    },
    {
        "id": "a08f1848.dcc968",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "isAuthorized",
        "func": "var detail_obj = msg.detail_obj;\n    user_obj   = msg.user_obj ;\n\nif(detail_obj.user_id === user_obj._id){\n    msg.api_status  = \"VALID_CONTENT\";\n    msg.payload     = {\n        _id                             : detail_obj._id,\n        _rev                            : detail_obj._rev,\n        table                           : \"details\",\n        task_id                         : detail_obj.task_id,\n        child_task_id                   : detail_obj.child_task_id,\n        user_id                         : detail_obj.user_id,\n        from_user_id                    : detail_obj.from_user_id,\n        page_id                         : detail_obj.page_id,\n        from_page_id                    : detail_obj.from_page_id,\n        to_page_id                      : detail_obj.to_page_id,\n        synchronized                    : detail_obj.synchronized,\n        processed                       : detail_obj.processed ,\n        status                          : detail_obj.status ,\n        read                            : detail_obj.read ,\n        display_if_empty                : 0 ,\n        date_created                    : detail_obj.date_created ,\n        offline_expiration_seconds      : detail_obj.offline_expiration_seconds ,\n        priority                        : detail_obj.priority ,\n        type                            : detail_obj.type,\n        image                           : detail_obj.image ,\n        from_user                       : detail_obj.from_user,\n        user_incoming                   : detail_obj.user_incoming,\n        watson_incoming                 : detail_obj.watson_incoming,\n        template                        : detail_obj.template ,\n        user_calculate                  : detail_obj.user_calculate,\n        location                        : detail_obj.location,\n        default                         : detail_obj.default,\n        createdAt                       : detail_obj.createdAt\n    };\n    msg.response    = {status: 200, error: false, msg: \"Record deleted successfully\", data: msg.payload};\n}else{\n    msg.api_status = \"INVALID_CONTENT\";\n    msg.statusCode = 403 ;\n    msg.payload = {status: 403, error: false, msg: \"You are not authorized to remove record\", data: null};    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2641.833251953125,
        "y": 785.3333740234375,
        "wires": [
            [
                "1aee4b78.bb91d5"
            ]
        ]
    },
    {
        "id": "1aee4b78.bb91d5",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INVALID_CONTENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2798.833251953125,
        "y": 785,
        "wires": [
            [
                "ec2fa8e0.84daa8"
            ],
            [
                "670422c7.a356fc",
                "b2066dec.cab4f",
                "6179d3c6.5ce81c",
                "5d47dd54.1cc8a4"
            ]
        ]
    },
    {
        "id": "ec2fa8e0.84daa8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2942.5,
        "y": 747.3333740234375,
        "wires": []
    },
    {
        "id": "670422c7.a356fc",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "save detail to master table",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3013.5,
        "y": 809.3333892822266,
        "wires": []
    },
    {
        "id": "b2066dec.cab4f",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "rules": [
            {
                "t": "move",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2957.5,
        "y": 856.3333892822266,
        "wires": [
            [
                "aa098852.5faae8"
            ]
        ]
    },
    {
        "id": "aa098852.5faae8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 3115.500010172526,
        "y": 853.0000381469727,
        "wires": []
    },
    {
        "id": "6179d3c6.5ce81c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:details AND to_page_id:\" + detail.page_id ,\n    sort    : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2961.5,
        "y": 914.3333129882812,
        "wires": [
            [
                "f2251761.b07088"
            ]
        ]
    },
    {
        "id": "f2251761.b07088",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3121.166676839193,
        "y": 915.0000178019205,
        "wires": [
            [
                "92d7a796.dba1a8"
            ]
        ]
    },
    {
        "id": "92d7a796.dba1a8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init",
        "func": "var filtered_details = msg.payload ;\n\nmsg.filtredArr = filtered_details || [] ;\nmsg.counter = 0;\nmsg.detail_length = filtered_details.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3283.500010172526,
        "y": 914.0000178019205,
        "wires": [
            [
                "a41eab75.8d4778"
            ]
        ]
    },
    {
        "id": "a41eab75.8d4778",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "detail_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3457.666748046875,
        "y": 851.3334045410156,
        "wires": [
            [
                "761fffae.c03e"
            ],
            [
                "e14260f2.70e37"
            ]
        ]
    },
    {
        "id": "14ac37c7.408fb8",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3535.666748046875,
        "y": 772.3334045410156,
        "wires": [
            [
                "a41eab75.8d4778"
            ]
        ]
    },
    {
        "id": "761fffae.c03e",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "msg.payload = msg.filtredArr[msg.counter];\nmsg.payload.display_if_empty = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3617.666748046875,
        "y": 842.3334350585938,
        "wires": [
            [
                "14ac37c7.408fb8",
                "b96954a9.56ea68"
            ]
        ]
    },
    {
        "id": "e14260f2.70e37",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Finish",
        "func": "msg.payload = \"Update all child details as well.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3607.666748046875,
        "y": 884.3334350585938,
        "wires": [
            [
                "c5c8572a.97eb68"
            ]
        ]
    },
    {
        "id": "c5c8572a.97eb68",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3784.666748046875,
        "y": 888.3334350585938,
        "wires": []
    },
    {
        "id": "b96954a9.56ea68",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Update Detail",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3812.666748046875,
        "y": 810.3334045410156,
        "wires": []
    },
    {
        "id": "5d47dd54.1cc8a4",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var detail = msg.payload ;\nmsg.payload = {\n    query   : \"table:user_task AND page_id:\" + detail.to_page_id + \"user_id:\" + detail.user_id ,\n    sort    : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2961.5,
        "y": 981.6667785644531,
        "wires": [
            [
                "cfb2d119.650ef"
            ]
        ]
    },
    {
        "id": "cfb2d119.650ef",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "msater_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 3119.5,
        "y": 979.3333435058594,
        "wires": [
            [
                "d21cc327.892e3"
            ]
        ]
    },
    {
        "id": "d21cc327.892e3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "init",
        "func": "var user_tasks = msg.payload ;\n\nmsg.calculated_task = user_tasks || [];\nmsg.user_task_length = msg.calculated_task.length ;\nmsg.counter = 0 ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3282.5,
        "y": 979.0000305175781,
        "wires": [
            [
                "4f69a5e6.d7c3fc"
            ]
        ]
    },
    {
        "id": "4f69a5e6.d7c3fc",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "user_task_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3422.33349609375,
        "y": 977.3334045410156,
        "wires": [
            [
                "8d032ebd.ecdb3"
            ],
            [
                "df98db23.3ac248"
            ]
        ]
    },
    {
        "id": "3d0e140b.8e644c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "counter++",
        "func": "msg.counter++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3483.33349609375,
        "y": 925.3334045410156,
        "wires": [
            [
                "4f69a5e6.d7c3fc"
            ]
        ]
    },
    {
        "id": "8d032ebd.ecdb3",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var user_task_obj = msg.calculated_task[msg.counter] ;\n\nuser_task_obj.status = 0   ;\nif(user_task_obj.count){\n    if(user_task_obj.count)    user_task_obj.count.active = 0 ;\n    if(user_task_obj.count)    user_task_obj.count.unread = 0 ;\n}\n\nmsg.payload = user_task_obj;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 3569.33349609375,
        "y": 969.3334350585938,
        "wires": [
            [
                "3d0e140b.8e644c",
                "5a82b46c.ba9e9c"
            ]
        ]
    },
    {
        "id": "df98db23.3ac248",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "Finish",
        "func": "msg.payload = \"User tasks updated successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3563.33349609375,
        "y": 1014.3334045410156,
        "wires": [
            [
                "74b47e08.11124"
            ]
        ]
    },
    {
        "id": "5a82b46c.ba9e9c",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "user_task",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3753.33349609375,
        "y": 968.3334045410156,
        "wires": []
    },
    {
        "id": "74b47e08.11124",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3762.33349609375,
        "y": 1012.3334045410156,
        "wires": []
    },
    {
        "id": "ef75de0.d20e52",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate_params",
        "func": "var params = msg.payload_content ;\n\nif(isEmpty(params.access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`access_token` is required\", data: null};\n}else if(isEmpty(params.task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status:400, error: true,  msg: \"`task_id` is required\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n    msg.payload      = {\n        query : \"table:task_table AND _id:\"+ params.task_id,\n        sort  : \"_id<string>\"\n    };\n    msg.user_payload = {\n        query : \"table:users AND access_token:\"+ params.access_token,\n        sort  : \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1261.140625,
        "y": 804.98828125,
        "wires": [
            [
                "81f0cb3.516b438"
            ]
        ]
    },
    {
        "id": "81f0cb3.516b438",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1417.6406105458739,
        "y": 806.1757782883942,
        "wires": [
            [
                "c24953b6.1a077"
            ],
            [
                "d16957ed.4ba5a8"
            ]
        ]
    },
    {
        "id": "c24953b6.1a077",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1550.6288917958739,
        "y": 772.4062430895866,
        "wires": []
    },
    {
        "id": "ade805d1.80d038",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate task",
        "func": "var task_obj = msg.payload ;\n\nif(isEmpty(task_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find task with `task_id`\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.task_obj   = task_obj[0];\n    msg.payload    = msg.user_payload ;\n}\n\nreturn msg;\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1739.640625,
        "y": 912.24609375,
        "wires": [
            [
                "4ba0f6d9.9aeea8"
            ]
        ]
    },
    {
        "id": "d16957ed.4ba5a8",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1575.1328125,
        "y": 858.0546875,
        "wires": [
            [
                "ade805d1.80d038"
            ]
        ]
    },
    {
        "id": "4ba0f6d9.9aeea8",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1903.3827918060126,
        "y": 910.9218680895866,
        "wires": [
            [
                "7f3d908f.2aec8"
            ],
            [
                "c121601.ca6a2a"
            ]
        ]
    },
    {
        "id": "7f3d908f.2aec8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2043.3828125,
        "y": 869.90625,
        "wires": []
    },
    {
        "id": "129fc626.023cca",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "validate user",
        "func": "var user_obj = msg.payload ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to find task with `task_id`\", data: null};\n}else{\n    msg.user_obj   = user_obj[0];\n    if(msg.user_obj._id === msg.task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: msg.task_obj};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 403, error: true, msg: \"You are not authroized to get task.\", data: null};\n    }\n}\n\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2236.375,
        "y": 905.4921875,
        "wires": [
            [
                "cd584d31.0eeca"
            ]
        ]
    },
    {
        "id": "cd584d31.0eeca",
        "type": "switch",
        "z": "19d64182.cdd4de",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2404.375,
        "y": 906.4140625,
        "wires": [
            [
                "d35eed94.20aa8"
            ],
            [
                "d35eed94.20aa8"
            ]
        ]
    },
    {
        "id": "d35eed94.20aa8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 2546.38671875,
        "y": 901.90625,
        "wires": []
    },
    {
        "id": "2e30714a.35189e",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1633.015625,
        "y": 769,
        "wires": []
    },
    {
        "id": "44c2518e.ef865",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_task",
        "func": "var task_obj = msg.payload_data;\n\nmsg.payload = {\n        _id                         : task_obj._id,\n        _rev                        : task_obj._rev,\n        table                       : task_obj.table, \n        task_name                   : task_obj.task_name,\n        user_id                     : task_obj.user_id,\n        page_id                     : task_obj.page_id,\n        from_page_id                : task_obj.from_page_id,\n        parent_id                   : task_obj.parent_id,\n        header_template_id          : task_obj.header_template_id,\n        detail_template_id          : task_obj.detail_template_id,\n        footer_template_id          : task_obj.footer_template_id,\n        timeout_id                  : task_obj.timeout_id,\n        child_default_task_id       : task_obj.child_default_task_id,\n        child_default_task_name     : task_obj.child_default_task_name,\n        date_created                : task_obj.date_created,\n        type                        : task_obj.type,\n        status                      : task_obj.status,\n        category                    : task_obj.category,\n        additional_data_fn          : task_obj.additional_data_fn,\n        optional_data               : task_obj.optional_data,\n        required_data               : task_obj.required_data,\n        offline_expiration_time     : task_obj.offline_expiration_time,\n        display_if_empty            : task_obj.display_if_empty,\n        image                       : task_obj.image\n    };\n    \nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1298.015625,
        "y": 749,
        "wires": [
            [
                "ed4a8c2e.d5c25",
                "b44dde1d.d45bb"
            ]
        ]
    },
    {
        "id": "ed4a8c2e.d5c25",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1512.015625,
        "y": 718,
        "wires": []
    },
    {
        "id": "b44dde1d.d45bb",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1489.015625,
        "y": 771,
        "wires": [
            [
                "2e30714a.35189e"
            ]
        ]
    },
    {
        "id": "5df254a7.85e2cc",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_user",
        "func": "var req_body = msg.payload_data;\n\nif(isEmpty(req_body.access_token)){\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:access_token\" ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1295.265625,
        "y": 866.25,
        "wires": [
            [
                "4c52b214.e0522c"
            ]
        ]
    },
    {
        "id": "4c52b214.e0522c",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1439.265625,
        "y": 867.25,
        "wires": [
            [
                "8f8bd939.95d398"
            ],
            [
                "6a0c38b.163e1c8"
            ]
        ]
    },
    {
        "id": "e4a95d10.a73ea",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "update_short_detail",
        "func": "var body = msg.payload_data ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1314.140625,
        "y": 1006.5,
        "wires": [
            [
                "c0cc1fef.9db3c",
                "82034664.245a08"
            ]
        ]
    },
    {
        "id": "6a0c38b.163e1c8",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1596.765625,
        "y": 888.25,
        "wires": [
            [
                "f094fd4b.bd424"
            ]
        ]
    },
    {
        "id": "f094fd4b.bd424",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nuser_obj.long_url       = req_body.long_url || user_obj.long_url ;\nuser_obj.access_token   = req_body.access_token || user_obj.access_token ;\nuser_obj.security_level = req_body.security_level || user_obj.security_level ;\nuser_obj.phone          = req_body.phone || user_obj.phone ;\nuser_obj.email          = req_body.email || user_obj.email ;\nuser_obj.firstname      = req_body.firstname || user_obj.first_name;\nuser_obj.lastname       = req_body.lastname || user_obj.last_name ;\nuser_obj.image          = req_body.image || user_obj.image ;\n\nmsg.payload = user_obj ;\nmsg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1739.765625,
        "y": 887.25,
        "wires": [
            [
                "3e3b424c.40376e",
                "7169c502.95e06c"
            ]
        ]
    },
    {
        "id": "7169c502.95e06c",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1918.765625,
        "y": 869.25,
        "wires": []
    },
    {
        "id": "3e3b424c.40376e",
        "type": "change",
        "z": "ed7375e0.d65788",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1910.765625,
        "y": 905.25,
        "wires": [
            [
                "da4a7827.5e25d8"
            ]
        ]
    },
    {
        "id": "da4a7827.5e25d8",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 2053.765625,
        "y": 905.25,
        "wires": []
    },
    {
        "id": "8f8bd939.95d398",
        "type": "http response",
        "z": "ed7375e0.d65788",
        "name": "",
        "x": 1595.6288880705836,
        "y": 841.4101503267885,
        "wires": []
    },
    {
        "id": "c0cc1fef.9db3c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "detail_payload",
        "func": "msg.payload = {\n    query : \"table:details AND _id:\" + msg.req_body.detail.detail_id ,\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1547.0078125,
        "y": 982.5234375,
        "wires": [
            [
                "784ec0b0.60cb8"
            ]
        ]
    },
    {
        "id": "82034664.245a08",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "task_payload",
        "func": "\nmsg.payload = {\n    query : \"table:task_table AND _id:\" + msg.req_body.task.task_id ,\n    sort  : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1539.0078125,
        "y": 1034.5234375,
        "wires": [
            [
                "26a0e362.527dfc"
            ]
        ]
    },
    {
        "id": "784ec0b0.60cb8",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "Details",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1705.0078125,
        "y": 982.5234375,
        "wires": [
            [
                "715dff7a.ca948"
            ]
        ]
    },
    {
        "id": "26a0e362.527dfc",
        "type": "cloudant in",
        "z": "ed7375e0.d65788",
        "name": "Tasks",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1698.0078125,
        "y": 1036.5234375,
        "wires": [
            [
                "6e54a256.4d945c"
            ]
        ]
    },
    {
        "id": "715dff7a.ca948",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "populate",
        "func": "var detail_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(isEmpty(detail_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        detail_obj[0].user_incoming = {\n            note: req_body.detail.message,\n            message: req_body.detail.message  \n        };\n        detail_obj[0].watson_incoming = {\n            note: req_body.detail.message,\n            message: req_body.detail.message  \n        };\n        msg.payload = detail_obj ;\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update data\", data: []};\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1840.0078125,
        "y": 982.5234375,
        "wires": [
            [
                "da124926.883c68"
            ]
        ]
    },
    {
        "id": "da124926.883c68",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2011.0078125,
        "y": 986.5234375,
        "wires": [
            [
                "eef1b904.97d1d8"
            ],
            [
                "cbecfd3e.c0ce8"
            ]
        ]
    },
    {
        "id": "eef1b904.97d1d8",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2224.0078125,
        "y": 954.5234375,
        "wires": []
    },
    {
        "id": "cbecfd3e.c0ce8",
        "type": "debug",
        "z": "ed7375e0.d65788",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2239.0078125,
        "y": 1008.5234375,
        "wires": []
    },
    {
        "id": "6e54a256.4d945c",
        "type": "function",
        "z": "ed7375e0.d65788",
        "name": "populate",
        "func": "var task_obj = msg.payload ;\n    req_body   = msg.req_body;\n    \n    if(check_obj(task_obj)){\n        msg.isSaved = \"need_to_save\" ;\n        task_obj[0].task_name  = req_body.task.task_name ;\n        msg.payload = task_obj ;\n        msg.apiResult = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.isSaved = \"need_to_log\";\n        msg.apiResult = {status: 400, error: true, msg: \"Unable to update task obj\", data: []};\n    }\nreturn msg;\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1845.0078125,
        "y": 1038.5234375,
        "wires": [
            [
                "5707c68b.9e4208"
            ]
        ]
    },
    {
        "id": "5707c68b.9e4208",
        "type": "switch",
        "z": "ed7375e0.d65788",
        "name": "",
        "property": "isSaved",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_save",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2012.0078125,
        "y": 1056.5234375,
        "wires": [
            [
                "5ad6492a.735d48"
            ],
            [
                "cbecfd3e.c0ce8"
            ]
        ]
    },
    {
        "id": "5ad6492a.735d48",
        "type": "cloudant out",
        "z": "ed7375e0.d65788",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2221.0078125,
        "y": 1084.5234375,
        "wires": []
    },
    {
        "id": "c121601.ca6a2a",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2063,
        "y": 938,
        "wires": [
            [
                "129fc626.023cca"
            ]
        ]
    },
    {
        "id": "2e3b2403.b34c6c",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1238.8334350585938,
        "y": 893.0000305175781,
        "wires": [
            [
                "88f5fa0c.a83de8"
            ]
        ]
    },
    {
        "id": "88f5fa0c.a83de8",
        "type": "http response",
        "z": "19d64182.cdd4de",
        "name": "",
        "x": 1377.8333435058594,
        "y": 894.6667048136394,
        "wires": []
    },
    {
        "id": "ed816793.a03318",
        "type": "cloudant in",
        "z": "c80a9dd2.e75c1",
        "name": "details",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 466.8333435058594,
        "y": 592.3333129882812,
        "wires": [
            [
                "3c13c06c.dcdf2"
            ]
        ]
    },
    {
        "id": "3c13c06c.dcdf2",
        "type": "change",
        "z": "c80a9dd2.e75c1",
        "name": "detail_arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 609.8332824707031,
        "y": 590.3333129882812,
        "wires": [
            [
                "4ddbbae7.ff70a4"
            ]
        ]
    },
    {
        "id": "923207e7.5ed858",
        "type": "function",
        "z": "19d64182.cdd4de",
        "name": "detail_arr",
        "func": "msg.tempteObj = msg.payload;\nmsg.payload = {\n    query: \"table:details\",\n    sort: \"_id<string>\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2155.500244140625,
        "y": 343.33333587646484,
        "wires": [
            [
                "a359c1b1.2fa55"
            ]
        ]
    },
    {
        "id": "a359c1b1.2fa55",
        "type": "cloudant in",
        "z": "19d64182.cdd4de",
        "name": "",
        "cloudant": "5281de41.649f",
        "database": "master_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1890.5,
        "y": 354.99999237060547,
        "wires": [
            [
                "71044f78.6770a"
            ]
        ]
    },
    {
        "id": "43db9aa9.b64154",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990.0000305175781,
        "y": 1654,
        "wires": [
            [
                "809658e1.92d3f8",
                "4782e7f6.671a78"
            ]
        ]
    },
    {
        "id": "fd7fa4f1.47b4a8",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "get user by token",
        "cloudant": "5e923e83.d5527",
        "database": "users",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getUserByToken",
        "index": "access_token",
        "x": 1472,
        "y": 1747,
        "wires": [
            [
                "d7835fbd.92cf4"
            ]
        ]
    },
    {
        "id": "d7835fbd.92cf4",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1426,
        "y": 1820,
        "wires": [
            [
                "9fc05395.838ea"
            ]
        ]
    },
    {
        "id": "9fc05395.838ea",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "check access token",
        "func": "var user_data = msg.db_user;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(user_data) > 0) {//if access token exist\n    var security_level = user_data[0].security_level;\n    \n    if(!security_level){\n        response.status = \"verify\";\n    }\n    else{\n        response.status = \"valid\";\n    }\n}\nelse{\n    response.status = \"invalid\";\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1617,
        "y": 1819,
        "wires": [
            [
                "cbe69a76.eb38e8"
            ]
        ]
    },
    {
        "id": "cbe69a76.eb38e8",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "verify",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 1788,
        "y": 1765,
        "wires": [
            [
                "6b100dd3.6a77a4"
            ],
            [
                "c5163d52.3f94d"
            ],
            [
                "e4711d87.72445"
            ]
        ]
    },
    {
        "id": "2af85007.07b58",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "task_id",
        "func": "//node.warn(JSON.stringify(msg.detail_data));\nvar task_data = msg.task_data;\n\nif(task_data === undefined || task_data === null){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {\n        status : 400,\n        error: true,\n        msg: \"Unable to populate page using `page_id`\",\n        data: null\n    };\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.detail_payload = {\"page_id\": task_data[0].page_id};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2186.0001220703125,
        "y": 1847,
        "wires": [
            [
                "96506dc7.df1e4"
            ]
        ]
    },
    {
        "id": "e91d88f1.20d368",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "task_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "task_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2023,
        "y": 1847,
        "wires": [
            [
                "2af85007.07b58"
            ]
        ]
    },
    {
        "id": "e4711d87.72445",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "page_id",
        "func": "msg.payload = {\n    query:\"page_id:\"+ check_number(msg.request_data.page_id),\n    sort:[\"_id<string>\"]\n};\n\nnode.warn(\"preparing the msg.payload\");\nnode.warn(msg.payload);\nreturn msg;\n\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1951,
        "y": 1781,
        "wires": [
            [
                "86248390.fd31a"
            ]
        ]
    },
    {
        "id": "6b24d114.9dacc",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "detail_payload",
        "rules": [
            {
                "t": "move",
                "p": "detail_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2485.0001220703125,
        "y": 1844,
        "wires": [
            [
                "e563bfa5.d9216"
            ]
        ]
    },
    {
        "id": "e563bfa5.d9216",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "detail",
        "cloudant": "",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "search_details",
        "index": "page_id",
        "x": 2655.0001220703125,
        "y": 1840,
        "wires": [
            [
                "184536b.d40b3c9"
            ]
        ]
    },
    {
        "id": "184536b.d40b3c9",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "detail_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2023.0001220703125,
        "y": 1910,
        "wires": [
            [
                "3c29e5b8.7f9a1a"
            ]
        ]
    },
    {
        "id": "3c29e5b8.7f9a1a",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "all templates",
        "cloudant": "",
        "database": "templates",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "getPage",
        "index": "page_id",
        "x": 2222.0001220703125,
        "y": 1914,
        "wires": [
            [
                "af896a14.dee5a8"
            ]
        ]
    },
    {
        "id": "af896a14.dee5a8",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "template_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "template_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2421.0001220703125,
        "y": 1918,
        "wires": [
            [
                "8b4fd68a.eaff78"
            ]
        ]
    },
    {
        "id": "75882f2c.906ad",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "detailObj",
        "func": "//node.warn(JSON.stringify(msg.detail_data));\nvar detail_data = msg.detail_data;\nvar detailObj = [];\nif(detail_data === undefined || detail_data === null){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find detail with `page_id`\", data: null};\n    return msg;\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n//**********    detailObj     *******//\nvar detailRecord = {\n    \"_id\": \t\"\",\n    \"image\":\t\t\"\",\n    \"to_page_id\": \t\"\",\n    \"user_id\": \t\t\"\",\n    \"task_id\":      \"\",\n    \"page_id\":      \"\",\n    \"from_user_id\": \"\",\n\t\"user_incoming\":{},\n    \"watson_incoming\":{},\n    \"type\":         {},\n    \"date_created\": \"\",\n    \"from_user\":    {},\n    \"count\":{\"active\":0, \"unread\":0}\n};\nif(detail_data.length){\n    for(var d=0; d<detail_data.length; d++){\n        detail_data[d]._id = detail_data[d]._id;\n        detail_data[d].to_page_id = detail_data[d].to_page_id;\n        \n        if(check_isDisplay(detail_data[d].display_if_empty)){\n            detailObj[d] = get_obj_data(detailRecord, detail_data[d]);\n            detailObj[d].task_name = msg.taskObj.task_name ;\n        }else{\n            detail_data.splice(d, 0)    ;\n        }\n    }\n    msg.detailObj = removeEmptyArrayElements(detailObj);     \n}else{\n    msg.detailObj = [] ;\n}\n\nreturn msg;\n\nfunction check_isDisplay(d){\n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2021.0001220703125,
        "y": 1990,
        "wires": [
            [
                "1beffa9b.2672f5"
            ]
        ]
    },
    {
        "id": "8b4fd68a.eaff78",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "taskObj",
        "func": "var task_data = msg.task_data[0];\nvar templateObj = {};\nvar header_template_id = task_data.header_template_id;\nvar detail_template_id = task_data.detail_template_id;\nvar footer_template_id = task_data.footer_template_id;\nvar template_data = msg.template_data;\n\nfor(var ind=0; ind<template_data.length; ind++){\n    if(header_template_id == template_data[ind]._id){\n        templateObj.header = template_data[ind];\n    }\n    if(detail_template_id == template_data[ind]._id){\n        templateObj.detail = template_data[ind];\n    }\n    if(footer_template_id == template_data[ind]._id){\n        templateObj.footer = template_data[ind];\n    }\n}\n\n\nvar taskObj = {\n    \"task_id\":\t\t    task_data._id,\n    \"task_name\":\t\ttask_data.task_name,\n    \"template\": \t\ttemplateObj,\n    \"from_page_id\":\t\ttask_data.from_page_id,\n    \"child_task_id\":    task_data.child_default_task_id,\n    \"date_created\":     task_data.date_created\n};\n\nmsg.taskObj = taskObj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2624.0001220703125,
        "y": 1916,
        "wires": [
            [
                "75882f2c.906ad"
            ]
        ]
    },
    {
        "id": "809658e1.92d3f8",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "access_token",
        "func": "node.warn(msg);\nvar access_token = msg.request_data.access_token;\nif(!access_token){\n    msg.payload = {\"access_token\": null};\n}\nelse {\n    msg.payload = {\"access_token\": access_token};\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1197.0000305175781,
        "y": 1713,
        "wires": [
            [
                "f53655f4.131098"
            ]
        ]
    },
    {
        "id": "f53655f4.131098",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "exist?",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1558,
        "y": 1663,
        "wires": [
            [
                "6b100dd3.6a77a4"
            ],
            [
                "fd7fa4f1.47b4a8"
            ]
        ]
    },
    {
        "id": "6b100dd3.6a77a4",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "generate ac",
        "func": "var rand = function() {\n    return Math.random().toString(36).substr(2); // remove `0.`\n};\nvar time = function() {\n    //return new Date().getTime().toString(36);\n    return new Date().getTime();\n};\n\nvar token = function() {\n    return time()+'.'+rand(); // to make it longer\n};\n\nvar access_token = token();\nglobal.set('access_token', access_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1967,
        "y": 1695,
        "wires": [
            [
                "467c7b64.260524"
            ]
        ]
    },
    {
        "id": "467c7b64.260524",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "page_id=1",
        "func": "msg.request_data.page_id = 1;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\n\nnode.warn(\"reached here.....\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2142,
        "y": 1694,
        "wires": [
            [
                "86248390.fd31a"
            ]
        ]
    },
    {
        "id": "c5163d52.3f94d",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "page_id=11",
        "func": "msg.request_data.page_id = 11;\n\nmsg.payload = {\n    query:\"page_id:\"+ msg.request_data.page_id, \n    sort:[\"_id<string>\"]\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1966,
        "y": 1745,
        "wires": [
            [
                "86248390.fd31a"
            ]
        ]
    },
    {
        "id": "9e1863ca.ce7c1",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "userObj",
        "func": "var db_user = msg.db_user;\n\nif(db_user !== undefined  && db_user !== null && db_user.length) {\n    var user_type = {\"public\":\"public\"};\n    if(typeof db_user[0].type !=\"undefined\") {\n\t\tuser_type = db_user[0].type;\n\t}\n    var userObj = {\n        \"user_id\":\t\t\tdb_user[0]._id,\n        \"long_url\": \t\t\"\",\n        \"access_token\":\t\t\"\",\n        \"security_level\":\t\"\",\n        \"phone\":\t\t\t\"\",\n        \"virtual_phone\":\t\"\",\n        \"email\":\t\t\t\"\",\n        \"other\":\t\t\t\"\",\n        \"conversation_id\":\t\"\",\n        \"firstname\": \t\t\"\",\n        \"lastname\": \t\t\"\",\n        \"type\": \t\t    user_type,\n        \"image\":\t\t\t\"\",\n    };\n    msg.userObj = get_obj_data(userObj, db_user[0]);\n}else{\n    msg.userObj = {};\n}\nreturn msg;\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = obj1;\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t}\n\treturn obj;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2368,
        "y": 2036,
        "wires": [
            [
                "576d48fe.ca7558"
            ]
        ]
    },
    {
        "id": "576d48fe.ca7558",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "User_Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 2581.0001220703125,
        "y": 1990,
        "wires": [
            [
                "95fb7ba9.239e78"
            ]
        ]
    },
    {
        "id": "c0c9140f.7c68f8",
        "type": "cloudant out",
        "z": "f92f7e23.5ef5b",
        "name": "Update User Task",
        "cloudant": "5e923e83.d5527",
        "database": "user_task",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2825.000030517578,
        "y": 2162.000244140625,
        "wires": []
    },
    {
        "id": "95fb7ba9.239e78",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_task_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 2120.0001220703125,
        "wires": [
            [
                "d0b916d8.eb5c58"
            ]
        ]
    },
    {
        "id": "54071b07.23e454",
        "type": "function",
        "z": "f92f7e23.5ef5b",
        "name": "return page",
        "func": "var page_id         = msg.request_data.page_id;\nvar userObj         = msg.userObj;\nvar taskObj         = msg.taskObj;\nvar user_task_arr   = msg.user_task_arr ;\nvar details         = [];\n\ntry{\n    details =  msg.detail_arr.sort(function(a,b){\n        details = details.sort(function(a,b){\n        \tif(typeof a.page_id === 'number'){\n        \t\treturn (a.page_id - b.page_id);\t\n        \t}else{\n        \t\treturn (a.createdAt - b.createdAt);\t\n        \t}\n        \t\n        });\n    \t//return (a.createdAt - b.createdAt);\n    });\n    \n    var apiResult = {\n            \"page_id\":  page_id,\n            \"user\":     userObj,\n            \"task\":     taskObj,\n            \"detail\":   getpage()\n    \t};\n    if(page_id == 1){\n    \tapiResult.access_token = global.get('access_token');\n    }    \n    msg.payload = apiResult;\n}catch(e){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Exception occured while populating page\", data: e};\n}\n\n\nreturn msg;\n\nfunction getpage(page_id){\n    var result = get_page_array(page_id) ,\n        detail = result.detail_array ;\n        //update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: result.count}, false);\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction get_page_array(page_id){\n    var detail_array = msg.detailObj ;\n\n    for(var itr = 0 ; itr < detail_array.length; itr++){\n        var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        if(detail_array[itr].to_page_id){   \n            //count = user_task(userObj.user_id, taskObj.task_id, detail_array[itr].page_id).count ;\n            count = get_sub_child_count(detail_array[itr].to_page_id);\n            if(count){\n                current_count_active = count.active ;\n                current_count_unread = count.unread ;\n                update_user_task_record({user_id: userObj.user_id, task_id: taskObj.task_id, synch : 1, count: count}, false);\n            }\n            //count = get_sub_detail_counts(userObj.user_id, taskObj.task_id, detail_array[itr].page_id);\n        }else{\n            var user_task_obj = user_task(detail_array[itr].user_id, detail_array[itr].task_id, detail_array[itr].page_id);\n            if (check_obj(user_task_obj) > 0){\n                 // do count_if check using user_task fields as do in update_user_task\n                current_count_active = user_task_obj.count.active ;\n                current_count_unread = user_task_obj.count.unread ;\n            }else{ // otherwise use defaults\n                 // do count_if check using detail fields as do in update_user_task\n                current_count_active = detail_array[itr].count.active ;\n                current_count_unread = detail_array[itr].count.unread ;\n            }\n        }\n        active = active + current_count_active ;\n        unread = unread + current_count_unread ;\n        \n        detail_array[itr].count.active = active ;\n        detail_array[itr].count.unread = unread ;\n    }\n    \n    \n    return {\n        detail_array :   detail_array\n        // count        : {\n        //     active   : active ,\n        //     unread   : unread \n        // }\n    };\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction user_task(user_id, task_id, page_id){\n    var obj = {} ;\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i < user_task_arr.length; i++){\n            if(\n                user_task_arr[i].task_id === task_id &&\n                user_task_arr[i].user_id === user_id &&\n                user_task_arr[i].page_id === page_id \n            ){\n                obj = user_task_arr[i];\n            }\n        }\n        return obj;\n    }else{\n        return obj;\n    }\n}\n\nfunction return_user_task_obj(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id    === user_id &&\n                user_task_arr[i].task_id    === task_id\n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction update_user_task_record(obj, update_parent){\n    var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n        create_user_task_flag = true ;\n    \n    if (check_obj(user_task_obj) > 0){\n    \tif (user_task_obj.user_id == obj.user_id){\n    \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n    \t} \n    \t\n    \tuser_task_obj.synchronized          = obj.synch ;\n        user_task_obj.date_updated          = new Date().toJSON();\n        \n        if(!user_task_obj.update_read){\n            if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n                user_task_obj.count.unread += 1 ;  \n            }\n        }\n    \n        if(!user_task_obj.update_active){\n            if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n                user_task_obj.count.active += 1 ;  \n            }\n        }\n    \n        if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:1, count: {active:0, unread:0}}, false );\n        \n        user_task_obj.update_read   = 1 ;\n        user_task_obj.update_active = 1 ;\n        \n        \n    }\n    \n    if ( create_user_task_flag ) {\n        msg.updated_user_task = {\n        \ttask_id \t\t: obj.task_id,\n        \tuser_id\t\t\t: obj.user_id,\n        \tpage_id         : parseInt(page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 0, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: null,\n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 0,\n        \t    unread      : 0,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {}\n        };\n    }else{\n        msg.updated_user_task = user_task_obj ;\n    }\n    \n}\n\nfunction get_sub_child_count(to_page_id){\n    var count = {active:0, unread: 0} ;\n    for(var itr = 0; itr < details.length; itr++){\n        if(to_page_id == details[itr].page_id){\n           // to_page_id = details[itr].to_page_id ;\n            count.active += details[itr].count.active ;\n            count.unread += details[itr].count.unread ;\n        }\n    }\n    return count;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2314,
        "y": 2202.000244140625,
        "wires": [
            [
                "30329516.1c353a"
            ]
        ]
    },
    {
        "id": "884edb98.f615e8",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "API Result",
        "x": 2653.000030517578,
        "y": 2213.000244140625,
        "wires": []
    },
    {
        "id": "4782e7f6.671a78",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "get_page_req_log",
        "active": true,
        "console": "false",
        "complete": "request_data",
        "x": 1201.0000305175781,
        "y": 1621,
        "wires": []
    },
    {
        "id": "86248390.fd31a",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "task_table",
        "cloudant": "",
        "database": "task_table",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "getTask",
        "index": "get_by_page_id",
        "x": 2249,
        "y": 1773,
        "wires": [
            [
                "e91d88f1.20d368"
            ]
        ]
    },
    {
        "id": "e1756ac4.5255d8",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "updated_user_task",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2644.000030517578,
        "y": 2164.000244140625,
        "wires": [
            [
                "c0c9140f.7c68f8"
            ]
        ]
    },
    {
        "id": "1c66218a.14a12e",
        "type": "debug",
        "z": "f92f7e23.5ef5b",
        "name": "get_page_payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2637,
        "y": 2329.000244140625,
        "wires": []
    },
    {
        "id": "96506dc7.df1e4",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2328.0001220703125,
        "y": 1843,
        "wires": [
            [
                "feeacb04.a8c8d8"
            ],
            [
                "6b24d114.9dacc"
            ]
        ]
    },
    {
        "id": "feeacb04.a8c8d8",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 2461.0001220703125,
        "y": 1796,
        "wires": []
    },
    {
        "id": "1beffa9b.2672f5",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2204.0001220703125,
        "y": 2001,
        "wires": [
            [
                "fb42fdb4.0c133"
            ],
            [
                "9e1863ca.ce7c1"
            ]
        ]
    },
    {
        "id": "fb42fdb4.0c133",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 2357.0001220703125,
        "y": 1979,
        "wires": []
    },
    {
        "id": "30329516.1c353a",
        "type": "switch",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2457,
        "y": 2200.000244140625,
        "wires": [
            [
                "72b9c079.328"
            ],
            [
                "e1756ac4.5255d8",
                "884edb98.f615e8",
                "1c66218a.14a12e"
            ]
        ]
    },
    {
        "id": "72b9c079.328",
        "type": "http response",
        "z": "f92f7e23.5ef5b",
        "name": "",
        "x": 2630.000030517578,
        "y": 2116.000244140625,
        "wires": []
    },
    {
        "id": "d0b916d8.eb5c58",
        "type": "cloudant in",
        "z": "f92f7e23.5ef5b",
        "name": "details",
        "cloudant": "5281de41.649f",
        "database": "details",
        "service": "PkTwilioConv-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 2169.833251953125,
        "y": 2121.3333740234375,
        "wires": [
            [
                "df6bfefe.c617e"
            ]
        ]
    },
    {
        "id": "df6bfefe.c617e",
        "type": "change",
        "z": "f92f7e23.5ef5b",
        "name": "detail_arr",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detail_arr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2305.833251953125,
        "y": 2118.3333740234375,
        "wires": [
            [
                "54071b07.23e454"
            ]
        ]
    }
]
