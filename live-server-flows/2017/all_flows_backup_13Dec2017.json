[
    {
        "id": "60d983f8.559f7c",
        "type": "tab",
        "label": "Login API "
    },
    {
        "id": "a9a5d22f.5e6aa",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "1f0c18ce.350d47",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "5b153ee0.8e5f",
        "type": "tab",
        "label": "Chatbot Flow"
    },
    {
        "id": "4ee2e89.d849098",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "3f422cff.a7875c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "3f422cff.a7875c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "649e959.6a7e56c",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "5fe5154b.ac4a5c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "5fe5154b.ac4a5c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "6792e2c8.89f8d4",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "a1a35048.33e2f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "a1a35048.33e2f8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f59e7fb8.64e18",
        "type": "subflow",
        "name": "Push Notificaiton Via WSS",
        "info": "",
        "in": [
            {
                "x": 51.000003814697266,
                "y": 169.00000095367432,
                "wires": [
                    {
                        "id": "c4dd6137.b61e1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 709.0001621246338,
                "y": 178.0000410079956,
                "wires": [
                    {
                        "id": "c1cce0c8.62ab1",
                        "port": 0
                    },
                    {
                        "id": "4fb5c884.f68b88",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "6afadd8f.4efcd4",
        "type": "subflow",
        "name": "Step2 Timeout processing",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6259a44e.05d5ec"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "9bfbb0be.abade",
        "type": "twilio-api",
        "z": "60d983f8.559f7c",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DoMeNowApp Twilio Service"
    },
    {
        "id": "9e54d8b2.1b3e28",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": ""
    },
    {
        "id": "2a8da0b9.c08d3",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "7608a467.91ddac",
        "type": "twilio-api",
        "z": "5b153ee0.8e5f",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DriList Sms Service for chatbot"
    },
    {
        "id": "308ec63b.864e1a",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "Drilist SMS service"
    },
    {
        "id": "3f422cff.a7875c",
        "type": "function",
        "z": "4ee2e89.d849098",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5fe5154b.ac4a5c",
        "type": "function",
        "z": "649e959.6a7e56c",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a35048.33e2f8",
        "type": "function",
        "z": "6792e2c8.89f8d4",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "7a95a373.4e09dc",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "phone",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "b7f8d3d4.0da36"
            ]
        ]
    },
    {
        "id": "30e119d2.4d1986",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "Going to save user if not found in db",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 287,
        "wires": []
    },
    {
        "id": "3a65990c.f9f976",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\n\nmsg.verification_code = rand();\n\nif(isEmpty(db_data)) {\n    var userObj = {\n        table       : \"users\",\n        access_token:  null,\n        phone       :  parseInt(user_data.phone),\n        virtual_phone: parseInt(user_data.phone),\n        security_level: 0,\n        firstname         : parseInt(user_data.phone) || \"\",\n        lastname          : \"\",\n        code:         msg.verification_code,\n        type: {\n            \"public\": \"public\"\n        },\n        data: {},\n        device_id: msg.user_data.device_id || \"\",\n        push_accepted: msg.push_accepted || 1\n    };\n}else {\n    var userObj = db_data[0];\n    \n    userObj.phone           = userObj.phone || parseInt(user_data.phone) ;\n    userObj.virtual_phone   = userObj.virtual_phone || parseInt(user_data.phone) ;\n    userObj.long_url        = userObj.long_url || \"\";\n    userObj.access_token    = userObj.access_token ;\n    userObj.security_level  = userObj.security_level;\n    userObj.email           = userObj.email || \"\";\n    userObj.firstname       = userObj.firstname || \"\";\n    userObj.lastname        = userObj.lastname || \"\";\n    userObj.code            = msg.verification_code;\n    userObj.data            = userObj.data;\n    userObj.image           = userObj.image || \"\";\n    userObj.device_id       = msg.user_data.device_id || userObj.device_id;\n    userObj.push_accepted   = msg.push_accepted || userObj.push_accepted;\n}\n\n\n\nmsg.security_level = userObj.security_level ;\nmsg.payload = userObj;\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "30e119d2.4d1986",
                "496910e7.cb966",
                "573c58f2.1e9968"
            ]
        ]
    },
    {
        "id": "f770522b.84f08",
        "type": "http in",
        "z": "60d983f8.559f7c",
        "name": "",
        "url": "/api/login",
        "method": "post",
        "swaggerDoc": "",
        "x": 98.00000381469727,
        "y": 181.00000095367432,
        "wires": [
            [
                "5eedc4c1.fcc9bc",
                "a2c655fe.d9cff8"
            ]
        ]
    },
    {
        "id": "5eedc4c1.fcc9bc",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "7a95a373.4e09dc"
            ]
        ]
    },
    {
        "id": "b7f8d3d4.0da36",
        "type": "cloudant in",
        "z": "60d983f8.559f7c",
        "name": "get user by phone",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "8be34862.fd3028"
            ]
        ]
    },
    {
        "id": "8be34862.fd3028",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "3a65990c.f9f976"
            ]
        ]
    },
    {
        "id": "573c58f2.1e9968",
        "type": "cloudant out",
        "z": "60d983f8.559f7c",
        "name": "save user to db",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 418.00001525878906,
        "y": 362.00002002716064,
        "wires": []
    },
    {
        "id": "bf145c20.b7903",
        "type": "http in",
        "z": "60d983f8.559f7c",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 102,
        "y": 763,
        "wires": [
            [
                "c8f30f2d.b63e2",
                "99467ef7.2a451"
            ]
        ]
    },
    {
        "id": "c8f30f2d.b63e2",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 327,
        "y": 764,
        "wires": [
            [
                "8e244d00.ccc52"
            ]
        ]
    },
    {
        "id": "8e244d00.ccc52",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "2. user_phone",
        "func": "if(isEmpty(msg.request_data.phone)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`phone` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.code)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`code` is required to fullfil request\", data: null};\n }else if(isEmpty(msg.request_data.device_id)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`device_id` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.push_accepted)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`push_accepted` is required to fullfil request\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table: users AND virtual_phone:\"+ msg.request_data.phone\n    };    \n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 527,
        "y": 764,
        "wires": [
            [
                "7e80240.836afdc"
            ]
        ]
    },
    {
        "id": "496910e7.cb966",
        "type": "switch",
        "z": "60d983f8.559f7c",
        "name": "security_level",
        "property": "security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 422.00001525878906,
        "y": 423.0000247955322,
        "wires": [
            [
                "541446cb.1dc318"
            ],
            [
                "5d369c3e.41b9c4"
            ]
        ]
    },
    {
        "id": "27ca3115.27f08e",
        "type": "cloudant in",
        "z": "60d983f8.559f7c",
        "name": "get user by token",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 908.9999694824219,
        "y": 802.0000305175781,
        "wires": [
            [
                "a1a8767b.e49098"
            ]
        ]
    },
    {
        "id": "a1a8767b.e49098",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 209,
        "y": 844,
        "wires": [
            [
                "2cf31b1c.483e34"
            ]
        ]
    },
    {
        "id": "2cf31b1c.483e34",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].virtual_phone).length == 5){\n        if(request_data.code == 1234){ // if user type any 4 digit number the validaion code should be 1234\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].virtual_phone).length > 7 &&  String(db_data[0].virtual_phone).length <= 12){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 844,
        "wires": [
            [
                "b6aca758.eb3a18"
            ]
        ]
    },
    {
        "id": "9a8a0a19.f3f598",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "API Result",
        "x": 1029.0000305175781,
        "y": 980.0000381469727,
        "wires": []
    },
    {
        "id": "b6aca758.eb3a18",
        "type": "switch",
        "z": "60d983f8.559f7c",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 249,
        "y": 924,
        "wires": [
            [
                "9b3a9c5c.e48a2"
            ],
            [
                "3e4dcc28.2cb654"
            ]
        ]
    },
    {
        "id": "4aa0bd9a.f7c214",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  return_page_id(msg.payload.virtual_phone),\n    \"access_token\": msg.access_token,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;\n\nfunction return_page_id(number){\n    if(number){\n        if( ( Number(number) === 12313426657) || (Number(number) === 12068835352) ){ //Jessica Rohloff/Kyle  Number then return 26\n            return 26 ;//stumped category page......\n        }else{\n            return 2; //category page \n        }\n    }else{\n        node.warn(\"When user virtual_phone is undefined in verification process.\");\n        return 1; //else login page\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 759,
        "y": 944,
        "wires": [
            [
                "9a8a0a19.f3f598",
                "e605c9bb.80ba18"
            ]
        ]
    },
    {
        "id": "36132ec7.f3ded2",
        "type": "cloudant out",
        "z": "60d983f8.559f7c",
        "name": "update security level",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 779,
        "y": 884,
        "wires": []
    },
    {
        "id": "9b3a9c5c.e48a2",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0] ,\n    body    = msg.request_data ;\n    \nmsg.access_token = token();\n\ndb_data.access_token   = msg.access_token;\ndb_data.security_level = 1 ;\ndb_data.device_token = populate_device_token(db_data.device_token, body) ;\ndb_data.push_accepted = parseInt(body.push_accepted) || 1 ;\n\nmsg.payload = db_data;\nreturn msg;\n\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\nfunction populate_device_token(device_detail, req_body){\n    if(isEmpty(device_detail)){\n        if( (req_body.device_id == \"Web View\") || (req_body.device_type == \"Web Browser\")){\n            return {};\n        }else{\n            var temp = {};\n            temp[req_body.device_fingerprint] = {\n              device_type: req_body.device_type ,\n              device_id  : req_body.device_id\n            };\n            return temp ;\n        }\n    }else{\n        var local_temp = {};\n        local_temp[req_body.device_fingerprint] = {\n          device_type: req_body.device_type ,\n          device_id  : req_body.device_id\n        };\n        return Object.assign(device_detail, local_temp);\n    }    \n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 924,
        "wires": [
            [
                "4aa0bd9a.f7c214",
                "36132ec7.f3ded2"
            ]
        ]
    },
    {
        "id": "3e4dcc28.2cb654",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 1004,
        "wires": [
            [
                "faf2b10d.cf4aa",
                "393c6bd0.b46de4"
            ]
        ]
    },
    {
        "id": "a2c655fe.d9cff8",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 269,
        "y": 142.99999237060547,
        "wires": []
    },
    {
        "id": "99467ef7.2a451",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326,
        "y": 703,
        "wires": []
    },
    {
        "id": "541446cb.1dc318",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "11. return verify page & ac",
        "func": "var req_body = msg.user_data ;\nif(msg.user_data.phone){\n  \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "573b95c3.d8fa1c"
            ]
        ]
    },
    {
        "id": "573b95c3.d8fa1c",
        "type": "switch",
        "z": "60d983f8.559f7c",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "335ed0ed.93e2d"
            ],
            [
                "2a4bbc74.7ec8d4"
            ]
        ]
    },
    {
        "id": "335ed0ed.93e2d",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = \"Your verification code for the DoMeNow app is : \" + code;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "18bc8e6d.340c12",
                "cfb6acff.5f8e5",
                "51cbfeec.1a86f"
            ]
        ]
    },
    {
        "id": "51cbfeec.1a86f",
        "type": "twilio out",
        "z": "60d983f8.559f7c",
        "service": "_ext_",
        "twilio": "9bfbb0be.abade",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "18bc8e6d.340c12",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "679850d4.72904",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "cfb6acff.5f8e5",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "679850d4.72904"
            ]
        ]
    },
    {
        "id": "2a4bbc74.7ec8d4",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "a0020291.468a9",
                "3ee4e1ef.bbec9e"
            ]
        ]
    },
    {
        "id": "a0020291.468a9",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "3ee4e1ef.bbec9e",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "45b027a9.030ff8",
        "type": "http in",
        "z": "a9a5d22f.5e6aa",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 85,
        "y": 131.00001525878906,
        "wires": [
            [
                "6fafb1ca.602f8"
            ]
        ]
    },
    {
        "id": "6fafb1ca.602f8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "Handler",
        "func": "var req = msg.payload;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    // if(!(\"api\" in req)){\n    //     msg.api_response = \"API_ERROR\";\n    //     msg.payload = {status: 400, error: true, msg: \"Body must must be wrapped with `api` key.\", data: null};\n    // }else{\n    //     msg.req_body = req.api;\n    // }\n    msg.req_body = populate_content(req.app) ;\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    return obj.api;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 245.00001525878906,
        "y": 248.00001525878906,
        "wires": [
            [
                "17447fdd.4ea9c"
            ]
        ]
    },
    {
        "id": "17447fdd.4ea9c",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 371.0000305175781,
        "y": 389.0000305175781,
        "wires": [
            [
                "d028df56.999d5"
            ],
            [
                "1c96a2c0.e504ed"
            ]
        ]
    },
    {
        "id": "d028df56.999d5",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 525,
        "y": 266.00001525878906,
        "wires": []
    },
    {
        "id": "1c96a2c0.e504ed",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "validate body",
        "func": "var body = msg.req_body;\n\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n    msg.access_token  = body.access_token ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 548,
        "y": 530.0000305175781,
        "wires": [
            [
                "c86202f8.81d97"
            ]
        ]
    },
    {
        "id": "c86202f8.81d97",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 668,
        "y": 673.0000305175781,
        "wires": [
            [
                "6469d96c.998ea8"
            ],
            [
                "7c9262b8.0e2acc"
            ]
        ]
    },
    {
        "id": "6469d96c.998ea8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 784,
        "y": 590.0000152587891,
        "wires": []
    },
    {
        "id": "7c9262b8.0e2acc",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail_to_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_group_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_to_groups",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_into_group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_message_schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_schedule_message",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 16,
        "x": 815.0001831054688,
        "y": 940.0001220703125,
        "wires": [
            [
                "906f0d07.1f442"
            ],
            [
                "77322251.ea1c7c"
            ],
            [
                "142432a5.c3e38d"
            ],
            [
                "a83ce183.afaa3"
            ],
            [
                "4a6936a2.54ec08"
            ],
            [
                "64b37e31.c8e18"
            ],
            [
                "37669890.4231e8"
            ],
            [
                "66fcb11c.305ed"
            ],
            [
                "1da3c509.c4586b"
            ],
            [
                "92a931c3.05382"
            ],
            [
                "c302fa3e.35ae38"
            ],
            [
                "3b6f31b2.520fae"
            ],
            [
                "1351ffaa.afeba"
            ],
            [
                "ebda56af.b1ddd8"
            ],
            [
                "a5f281ee.34379"
            ],
            [
                "e3b56e9f.99717"
            ]
        ]
    },
    {
        "id": "906f0d07.1f442",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 158.00003051757812,
        "wires": [
            [
                "c287750.d35af88"
            ]
        ]
    },
    {
        "id": "e3b56e9f.99717",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1277.000373840332,
        "y": 2459.001091003418,
        "wires": [
            [
                "1f8ae3dd.576a6c"
            ]
        ]
    },
    {
        "id": "1f8ae3dd.576a6c",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1470.0005569458008,
        "y": 2459.001009941101,
        "wires": []
    },
    {
        "id": "895009f0.2c44f8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = isEmpty(msg.child_task_obj) ? null : msg.child_task_obj,\n    timeout             = isEmpty(msg.timeout_obj) ? null : msg.timeout_obj ,\n    location            = isEmpty(msg.location_obj) ? null : msg.location_obj,\n    user                = isEmpty(msg.user_obj) ? null : msg.user_obj,\n    task                = isEmpty(msg.task_obj) ? null : msg.task_obj,\n    user_arr            = msg.users_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id ? [task._id] : null ;\ndetail.intent_task_id                   = task._id ;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = task.child_default_task_id ? return_page_id(form_data.page_id) : 0;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\"private\": \"private\"};\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\n//as per discussion with client on 11th August evening and on Google doc(DoMeNow) Item 8.0 there is no need of \n//detail.watson_incoming messages. so just commneted here may be nedded in future.\n// detail.watson_incoming                  = { \n//                                             message :   \"Watson response to : \" + form_data.note,\n//                                             response : {},\n                                            \n//                                         } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return item[0] ;\n    }else{\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2599.0006408691406,
        "y": 126.62107467651367,
        "wires": [
            [
                "8ffa7c51.f13c2",
                "c40679ed.c2b9f8",
                "5f7ff4ac.7ebfbc",
                "4f3b2213.569b7c",
                "f09741ca.2bf7b",
                "1eeef4dd.9a728b"
            ]
        ]
    },
    {
        "id": "8ffa7c51.f13c2",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2832.0001678466797,
        "y": 275.6211438179016,
        "wires": [
            [
                "f76ffbd8.2f1d68"
            ],
            [
                "b7163f14.a8d2b"
            ]
        ]
    },
    {
        "id": "f76ffbd8.2f1d68",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3029.000175476074,
        "y": 255.62113344669342,
        "wires": [
            [
                "d84399a6.329128"
            ]
        ]
    },
    {
        "id": "b7163f14.a8d2b",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    user_obj            = msg.user_obj ? msg.user_obj[0]: {} ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : user_obj._id || detail.user_id,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || \"private\",\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3050.000175476074,
        "y": 297.6211334466934,
        "wires": [
            [
                "d84399a6.329128"
            ]
        ]
    },
    {
        "id": "d84399a6.329128",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3254.000762939453,
        "y": 256.6211395263672,
        "wires": [
            [
                "43ea963e.833568",
                "897d8401.a66e88",
                "d3d6240b.dadfd8"
            ],
            [
                "43ea963e.833568"
            ]
        ]
    },
    {
        "id": "43ea963e.833568",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3446.000778198242,
        "y": 300.62116146087646,
        "wires": [
            [
                "1b597d9f.e8def2"
            ]
        ]
    },
    {
        "id": "1b597d9f.e8def2",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3722.1968307495117,
        "y": 294.62118434906006,
        "wires": [
            [
                "e1a73e30.67175"
            ],
            [
                "1f29d69d.726a69"
            ]
        ]
    },
    {
        "id": "f36a4269.cb2d9",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3825.1970748901367,
        "y": 189.62118339538574,
        "wires": [
            [
                "1b597d9f.e8def2"
            ]
        ]
    },
    {
        "id": "e1a73e30.67175",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n    msg.payload = null;\n    msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3935.197090148926,
        "y": 289.04706382751465,
        "wires": [
            [
                "f36a4269.cb2d9",
                "59c7206e.b8c9c",
                "3fbe560f.d4c24a"
            ]
        ]
    },
    {
        "id": "1f29d69d.726a69",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3865.1971588134766,
        "y": 352.6211853027344,
        "wires": [
            [
                "257aeaae.75d476",
                "a472db76.9cc7a8"
            ]
        ]
    },
    {
        "id": "e9e48f2b.2a0e5",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2429.031234741211,
        "y": 96.0468807220459,
        "wires": [
            [
                "f34596ae.f90038"
            ],
            [
                "895009f0.2c44f8"
            ]
        ]
    },
    {
        "id": "257aeaae.75d476",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4072.196762084961,
        "y": 335.04700660705566,
        "wires": []
    },
    {
        "id": "d2f5514b.4a309",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "validate",
        "func": "var payload         = msg.payload ,\n    task            = msg.task_obj , \n    user            = msg.user_obj, \n    task_id         = msg.task_id; \n    access_token    = msg.access_token;\n    page_id         = msg.page_id;\n    detail          = msg.details_obj;\n\nif(isEmpty(payload.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to populate records from cloudant views\", data: null};\n}else{\n    var db_records  = populate_records(payload.rows),\n        task_obj    = populate_obj(db_records.tasks, task_id),\n        user        = populate_user(db_records.users, access_token);\n    \n    if(isEmpty(task_obj)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n    }else if(isEmpty(user)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n    }else{\n        msg.api_status      = \"API_SUCCESS\";\n        msg.user_obj        = user ;\n        msg.task_obj        = task_obj ;\n        msg.templates_arr   = db_records.templates;\n        msg.details_arr     = db_records.details;\n        msg.users_arr       = db_records.users ;\n        msg.child_task_obj  = task_obj.child_default_task_id ? populate_obj(db_records.tasks, task_obj.child_default_task_id) : null ;\n        msg.timeout_obj     = task_obj.timeout_id ? populate_obj(db_records.timeouts, task_obj.timeout_id) : null;\n        msg.location_obj    = task_obj.location_id ? populate_obj(db_records.locations, task_obj.location_id): null;\n    }\n}\n\nreturn msg;\n\nfunction populate_records(list){\n    var task_arr = [], detail_arr = [], user_arr = [], templates_arr = [], location_arr = [], timeout_arr = [];\n    \n    for(var itr in list){\n        var records = list[itr].value;\n        if(records.table == \"task_table\"){\n            task_arr.push(records);\n        }\n        \n        if(records.table == \"details\"){\n            detail_arr.push(records);\n        }\n        \n        if(records.table == \"users\"){\n            user_arr.push(records);\n        }\n        \n        if(records.table == \"templates\"){\n            templates_arr.push(records);\n        }\n        \n        if(records.table == \"location\"){\n            location_arr.push(records);\n        }\n        \n        if(records.table == \"timeout\"){\n            timeout_arr.push(records);\n        }\n    }\n    var obj = {tasks: task_arr, details: detail_arr, users: user_arr, templates: templates_arr, locations: location_arr, timeouts: timeout_arr};\n    return obj;\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    \n    for(var itr in list){\n        if(id == list[itr]._id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    if(isEmpty(access_token)) return obj;\n    \n    for(var itr in users){\n        if(access_token == users[itr].access_token){\n            obj = users[itr];\n        }\n    }\n    \n    return obj;\n}\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2301.0312271118164,
        "y": 132.04687309265137,
        "wires": [
            [
                "e9e48f2b.2a0e5"
            ]
        ]
    },
    {
        "id": "f34596ae.f90038",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2562.0312423706055,
        "y": 66.04689884185791,
        "wires": []
    },
    {
        "id": "c287750.d35af88",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "validate",
        "func": "var access_token = msg.req_body.access_token ;\nvar table_data = msg.req_body.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_id = table_data.task_id ; \n    msg.access_token = access_token ;\n    msg.page_id = table_data.page_id  ;\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1592.031265258789,
        "y": 130.0468978881836,
        "wires": [
            [
                "da01f182.5d0ea"
            ]
        ]
    },
    {
        "id": "662faf90.7f1d6",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 1,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4442.198181152344,
        "y": 384.04706478118896,
        "wires": [
            [
                "3ef8169b.79672a",
                "34e4625.237129e"
            ]
        ]
    },
    {
        "id": "a472db76.9cc7a8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4039.1967544555664,
        "y": 389.0470190048218,
        "wires": [
            [
                "bacfa30c.d071f"
            ]
        ]
    },
    {
        "id": "bacfa30c.d071f",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4212.198379516602,
        "y": 388.0470218658447,
        "wires": [
            [
                "662faf90.7f1d6"
            ]
        ]
    },
    {
        "id": "da01f182.5d0ea",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1777,
        "y": 131.0000114440918,
        "wires": [
            [
                "8cb1d49a.2dac48"
            ],
            [
                "3b851894.44a2d8"
            ]
        ]
    },
    {
        "id": "8cb1d49a.2dac48",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1975,
        "y": 101.0000114440918,
        "wires": []
    },
    {
        "id": "3ef8169b.79672a",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "User Task",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4669.000930786133,
        "y": 346.0002098083496,
        "wires": []
    },
    {
        "id": "c33d8be7.d96bf8",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4307.165946960449,
        "y": 195.00018692016602,
        "wires": []
    },
    {
        "id": "897d8401.a66e88",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "Optional Task",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3458.9696044921875,
        "y": 188.57428121566772,
        "wires": []
    },
    {
        "id": "c40679ed.c2b9f8",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2804.9692420959473,
        "y": 20,
        "wires": []
    },
    {
        "id": "5f7ff4ac.7ebfbc",
        "type": "change",
        "z": "a9a5d22f.5e6aa",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2851.9689178466797,
        "y": 232.5742688179016,
        "wires": [
            [
                "e28b725.ec6139"
            ]
        ]
    },
    {
        "id": "e28b725.ec6139",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 3028.968925476074,
        "y": 212.57425844669342,
        "wires": []
    },
    {
        "id": "dae07875.276028",
        "type": "http in",
        "z": "1f0c18ce.350d47",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "df339d67.73bc2",
                "d79d1914.809f48"
            ]
        ]
    },
    {
        "id": "df339d67.73bc2",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    var obj = populate_content(req.app) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `app` param json.\", data: null};\n    }else{\n        msg.req_params = obj.data.api;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "5a1362c2.71b80c"
            ]
        ]
    },
    {
        "id": "5a1362c2.71b80c",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "6ac0c192.722e5"
            ],
            [
                "43f07b47.e75d14"
            ]
        ]
    },
    {
        "id": "6ac0c192.722e5",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 598.7656173706055,
        "y": 204.75000381469727,
        "wires": []
    },
    {
        "id": "43f07b47.e75d14",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    if(!checkObj(params.content)){\n        msg.payload_type = params.type ;\n        msg.payload_content = params.content;\n    }else{\n        var obj = populate_content(params.content) ;\n        if(obj.error){\n          msg.api_response = \"API_ERROR\";\n          msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n        }else{\n            msg.payload_type    = params.type ;\n            msg.payload_content = obj.data ;\n        }\n    }\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}\n\nfunction checkObj(obj){\n    if(typeof obj == \"string\") return true;\n    else return false ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "32002f36.075a9"
            ]
        ]
    },
    {
        "id": "32002f36.075a9",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "a50a51d8.6a343"
            ],
            [
                "813f0464.636f38"
            ]
        ]
    },
    {
        "id": "a50a51d8.6a343",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 872.7656364440918,
        "y": 245.7500057220459,
        "wires": []
    },
    {
        "id": "813f0464.636f38",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_data_for_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_assistant_by_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_users_groups",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pagination_data",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 9,
        "x": 753.7656707763672,
        "y": 649.7500228881836,
        "wires": [
            [
                "d7085762.898348"
            ],
            [
                "7c009a51.f48304"
            ],
            [
                "ca840369.f8539"
            ],
            [
                "1e4c20e5.174cdf"
            ],
            [
                "c48042b0.69d9b"
            ],
            [
                "2d82d77a.257428"
            ],
            [
                "acc51865.354278"
            ],
            [
                "f5370414.b5cca8"
            ],
            [
                "c0b4afd9.f8f1d"
            ]
        ]
    },
    {
        "id": "46271f33.1f8ac",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2286.015869140625,
        "y": 425.00006103515625,
        "wires": []
    },
    {
        "id": "142432a5.c3e38d",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_task",
        "func": "var access_token = msg.access_token ;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            query : \"table:users AND access_token:\" + access_token ,\n            sort  : \"_id<string>\"\n        };\n    }\n    \nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1280.015625,
        "y": 403.0000305175781,
        "wires": [
            [
                "fbbabaa0.602b38"
            ]
        ]
    },
    {
        "id": "558de15d.23f97",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2146.015869140625,
        "y": 368.0001525878906,
        "wires": []
    },
    {
        "id": "3fbada0e.25f076",
        "type": "change",
        "z": "a9a5d22f.5e6aa",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2130.015869140625,
        "y": 425.0000305175781,
        "wires": [
            [
                "46271f33.1f8ac"
            ]
        ]
    },
    {
        "id": "a83ce183.afaa3",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_user",
        "func": "var req_body        = msg.payload_data ,\n    access_token    = msg.access_token ;\n\nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:\"+ req_body.table +\"AND access_token:\"+ access_token +\" AND _id:\" + req_body._id ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1284.265625,
        "y": 530.25,
        "wires": [
            [
                "c537dec0.4d46b"
            ]
        ]
    },
    {
        "id": "c537dec0.4d46b",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1434.2656860351562,
        "y": 555.25,
        "wires": [
            [
                "5def522c.e08aec"
            ],
            [
                "51ac141d.0d399c"
            ]
        ]
    },
    {
        "id": "4a6936a2.54ec08",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_short_detail",
        "func": "var body            = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else if(isEmpty(body.detail_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`detail_id` is required to update detail\", data: body};\n}else if(isEmpty(body.page_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is required to update task detail\", data: body};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload_content = {\n        access_token : access_token,\n        content: body\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1306.1407470703125,
        "y": 725.5000610351562,
        "wires": [
            [
                "9dbfad89.cf7a"
            ]
        ]
    },
    {
        "id": "51ac141d.0d399c",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1587.7656860351562,
        "y": 558.25,
        "wires": [
            [
                "672a33c4.884b8c"
            ]
        ]
    },
    {
        "id": "672a33c4.884b8c",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find user with `access_token` and `user_id`.\", data: req_body};    \n}else{\n    user_obj.firstname  = req_body.firstname ;\n    user_obj.lastname   = req_body.lastname  ;\n    user_obj.email      = req_body.email     ;\n    user_obj.phone      = req_body.phone     ;\n    //user_obj.image      = req_body.image     ;\n    user_obj.timezone   = req_body.timezone  ;\n    \n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = user_obj ;\n    \n    msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1729.7656936645508,
        "y": 591.2500123977661,
        "wires": [
            [
                "cdce5cdf.adba5"
            ]
        ]
    },
    {
        "id": "7bc97757.66b258",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2056.765937805176,
        "y": 562.2500123977661,
        "wires": []
    },
    {
        "id": "1ba16bd7.d4f224",
        "type": "change",
        "z": "a9a5d22f.5e6aa",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2048.765866597493,
        "y": 605.2500149408976,
        "wires": [
            [
                "6f0227e2.b03498",
                "df36bb.4b3b3948"
            ]
        ]
    },
    {
        "id": "6f0227e2.b03498",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2202.765998840332,
        "y": 605.2500381469727,
        "wires": []
    },
    {
        "id": "5def522c.e08aec",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1586.6289672851562,
        "y": 514.41015625,
        "wires": []
    },
    {
        "id": "c0b4afd9.f8f1d",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220.8342971801758,
        "y": 1051.0005550384521,
        "wires": [
            [
                "3d712b41.1a80d4"
            ]
        ]
    },
    {
        "id": "3d712b41.1a80d4",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1359.8342056274414,
        "y": 1052.6672293345134,
        "wires": []
    },
    {
        "id": "faf2b10d.cf4aa",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "login page return again",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 733.8333969116211,
        "y": 1085.0000705718994,
        "wires": []
    },
    {
        "id": "e605c9bb.80ba18",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "menu page return ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1046.8334045410156,
        "y": 929.0000178019206,
        "wires": []
    },
    {
        "id": "7e80240.836afdc",
        "type": "switch",
        "z": "60d983f8.559f7c",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 699.8333435058594,
        "y": 733.6667175292969,
        "wires": [
            [
                "27ca3115.27f08e"
            ],
            [
                "475b73ce.a90a0c",
                "82369a29.884148"
            ]
        ]
    },
    {
        "id": "475b73ce.a90a0c",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "",
        "x": 872.8333435058594,
        "y": 738.6667175292969,
        "wires": []
    },
    {
        "id": "cdce5cdf.adba5",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1868.5000686645508,
        "y": 590.6666994094849,
        "wires": [
            [
                "7bc97757.66b258",
                "1ba16bd7.d4f224"
            ],
            [
                "4d3b2a62.101c34"
            ]
        ]
    },
    {
        "id": "9dbfad89.cf7a",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1475.83349609375,
        "y": 725.3334350585938,
        "wires": [
            [
                "ba24521c.4ed78"
            ],
            [
                "f48aa646.e25928"
            ]
        ]
    },
    {
        "id": "7bc4842c.2e65ec",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1580.1666259765625,
        "y": 403.6667175292969,
        "wires": [
            [
                "e31f613b.4eb5a"
            ],
            [
                "fb5eabb9.d35358"
            ]
        ]
    },
    {
        "id": "fb5eabb9.d35358",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1704,
        "y": 444.3334045410156,
        "wires": []
    },
    {
        "id": "e31f613b.4eb5a",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload & verify user",
        "func": "var task_obj = msg.payload_data;\n\nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Invalid access_token, Unable to find user with this access_token.\", data: null};\n}else{\n    \n    var user = msg.payload[0];\n    \n    if(user._id === task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            table                       : task_obj.table, \n            task_name                   : task_obj.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : task_obj.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1754.1666768391929,
        "y": 396.6666742960613,
        "wires": [
            [
                "ca34a3bb.c0e36"
            ]
        ]
    },
    {
        "id": "ca34a3bb.c0e36",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1926.8336944580078,
        "y": 396.6666660308838,
        "wires": [
            [
                "558de15d.23f97",
                "3fbada0e.25f076"
            ],
            [
                "d6d545e1.808578"
            ]
        ]
    },
    {
        "id": "d6d545e1.808578",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2125.6669921875,
        "y": 475.33331298828125,
        "wires": []
    },
    {
        "id": "fbbabaa0.602b38",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1440.1666259765625,
        "y": 402.3333435058594,
        "wires": [
            [
                "7bc4842c.2e65ec"
            ]
        ]
    },
    {
        "id": "ca3d22a4.80bbe",
        "type": "comment",
        "z": "60d983f8.559f7c",
        "name": "Following code referes to \"/api/verfiy\" endpoint. which whill check if verfiy code is valid or not if valid then re-direct to Category screen else re-direct back to login screen",
        "info": "",
        "x": 567.2421875,
        "y": 638.59375,
        "wires": []
    },
    {
        "id": "25a05f45.ebfa2",
        "type": "comment",
        "z": "60d983f8.559f7c",
        "name": "Login `/api/login` flow is following. To check existing number , send verification code, re-direct to verification screen are done by following code.",
        "info": "",
        "x": 503.2421875,
        "y": 76.6015625,
        "wires": []
    },
    {
        "id": "7c009a51.f48304",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1188.6367492675781,
        "y": 399.52345848083496,
        "wires": [
            [
                "fcfa85c6.adc818"
            ]
        ]
    },
    {
        "id": "92e95380.5491f",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1630.3867591023445,
        "y": 396.1719055734575,
        "wires": []
    },
    {
        "id": "fcfa85c6.adc818",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1339.1328528523445,
        "y": 399.3320618234575,
        "wires": [
            [
                "60416005.e17f"
            ]
        ]
    },
    {
        "id": "60416005.e17f",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1490.1289466023445,
        "y": 398.7734680734575,
        "wires": [
            [
                "92e95380.5491f"
            ]
        ]
    },
    {
        "id": "4f3b2213.569b7c",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2805.359630584717,
        "y": 104.51562023162842,
        "wires": [
            [
                "a408bc87.e3775"
            ],
            [
                "156beab2.e8e5c5"
            ]
        ]
    },
    {
        "id": "a408bc87.e3775",
        "type": "change",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2993.343761444092,
        "y": 61.999996185302734,
        "wires": [
            [
                "b166d52c.836c98"
            ]
        ]
    },
    {
        "id": "b166d52c.836c98",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3207.3554916381836,
        "y": 62.367183685302734,
        "wires": []
    },
    {
        "id": "156beab2.e8e5c5",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2935.3476638793945,
        "y": 116.33201789855957,
        "wires": [
            []
        ]
    },
    {
        "id": "77322251.ea1c7c",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "delete_detail",
        "func": "var body = msg.req_body.table_data,\n    token = msg.req_body.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/delete_view_data\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1285.0000381469727,
        "y": 290.0000476837158,
        "wires": [
            [
                "7529e7e2.5a87f8"
            ]
        ]
    },
    {
        "id": "7529e7e2.5a87f8",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1535.8632583618164,
        "y": 270.9179935455322,
        "wires": [
            [
                "ab100a92.0ecac8"
            ],
            [
                "29f307ef.649a58"
            ]
        ]
    },
    {
        "id": "ab100a92.0ecac8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1706.8632583618164,
        "y": 227.39455604553223,
        "wires": []
    },
    {
        "id": "29f307ef.649a58",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1747.8671646118164,
        "y": 285.9297122955322,
        "wires": [
            [
                "26fdbe56.5af762"
            ]
        ]
    },
    {
        "id": "26fdbe56.5af762",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n              \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if(details[i].page_id === to_page_id){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1957.3632583618164,
        "y": 285.4961185455322,
        "wires": [
            [
                "9f616e6e.c8c46"
            ]
        ]
    },
    {
        "id": "9f616e6e.c8c46",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2139.6096000671387,
        "y": 286.9297275543213,
        "wires": [
            [
                "67ea5a26.c81a64"
            ],
            [
                "105384cf.23dcab"
            ]
        ]
    },
    {
        "id": "67ea5a26.c81a64",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2309.3596000671387,
        "y": 263.3984775543213,
        "wires": []
    },
    {
        "id": "105384cf.23dcab",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2329.8752250671387,
        "y": 310.4336338043213,
        "wires": [
            [
                "8661b4be.15e9b8"
            ]
        ]
    },
    {
        "id": "8661b4be.15e9b8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2497.8637657165527,
        "y": 306.242262840271,
        "wires": [
            [
                "aa57676e.35fe78"
            ]
        ]
    },
    {
        "id": "aa57676e.35fe78",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2622.7504844665527,
        "y": 306.000075340271,
        "wires": []
    },
    {
        "id": "d7085762.898348",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "validate",
        "func": "var access_token = msg.payload_content.access_token,\n    task_id      = msg.payload_content.task_id;\nif(isEmpty(access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`access_token` is mising.\", data: null};\n}else if(isEmpty(task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`task_id` is mising.\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.5002632141113,
        "y": 325.0000801086426,
        "wires": [
            [
                "1c48a60b.9f657a"
            ]
        ]
    },
    {
        "id": "ce58b3.e05c575",
        "type": "comment",
        "z": "1f0c18ce.350d47",
        "name": "get_data_for_task endpoint",
        "info": "",
        "x": 1253.500171661377,
        "y": 263.3333988189697,
        "wires": []
    },
    {
        "id": "1c48a60b.9f657a",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1343.500242869059,
        "y": 323.00006230672204,
        "wires": [
            [
                "a72b1ef5.e7e16"
            ],
            [
                "9142b3d5.970a8"
            ]
        ]
    },
    {
        "id": "a72b1ef5.e7e16",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1471.500242869059,
        "y": 282.6667493184408,
        "wires": []
    },
    {
        "id": "9142b3d5.970a8",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_task_related_data?include_docs=true",
        "tls": "",
        "x": 1492.5002326965332,
        "y": 333.66675186157227,
        "wires": [
            [
                "dfdec1ca.e2833"
            ]
        ]
    },
    {
        "id": "dfdec1ca.e2833",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "populate",
        "func": "\nvar payload = msg.payload ,\n    task_id = msg.payload_content.task_id;\n\nif(isEmpty(payload.rows)){\n    msg.payload     = {status: 400, error: true, msg: \"Unable to populate view to get_data_for_task.\", data: null};\n    return msg;\n}else{\n    msg.payload = {status:200, error:true, msg: \"Record fetched successfully.\", data: populate_db_record(payload.rows)};\n    return msg;\n}\n\n\nfunction populate_db_record(rows){\n    var template = [], task_table = [], timeout=[], location=[], users=[], task_obj={}; \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"template\"){\n            template.push(rows[i].doc);\n        }\n        \n        if(rows[i].doc.table == \"task_table\"){\n            if(rows[i].doc.page_id == task_id){\n                task_obj = rows[i].doc ;\n            }else{\n                task_table.push({\n                    id          : rows[i].doc._id,\n                    task_name   : rows[i].doc.task_name\n                });\n            }\n        }\n        \n        if(rows[i].doc.table == \"timeout\"){\n            timeout.push({\n                id     : rows[i].doc._id,\n                name   : rows[i].doc.name\n            });\n        }\n        \n        if(rows[i].doc.table == \"location\"){\n            location.push({\n                id          : rows[i].doc._id,\n                name        : rows[i].doc.location_name\n            });\n        }\n        \n        if(rows[i].doc.table == \"users\"){\n            users.push({\n                id          : rows[i].doc._id,\n                name        : formulate_name(rows[i].doc)\n            });\n        }\n    }\n    \n    return {\n      formatted_template: template,\n      formatted_task    : task_table,\n      formatted_timeout : timeout,\n      formatted_location: location,\n      formatted_user    : users,\n      task_obj          : task_obj\n    };\n}\n\nfunction formulate_name(obj){\n    var str = \"\";\n    if(obj.firstname){\n        str += obj.firstname;\n    }\n    \n    if(obj.lastname){\n        str += \" \"+ obj.lastname ;\n    }\n    \n    if(!str){\n        str = \"Anynomous User\";\n    }\n    \n    return str;\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1662.500242869059,
        "y": 328.33343633015954,
        "wires": [
            [
                "3a1440ac.55a33"
            ]
        ]
    },
    {
        "id": "3a1440ac.55a33",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1868.3337287902832,
        "y": 311.0000915527344,
        "wires": []
    },
    {
        "id": "4d3b2a62.101c34",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2039.5003128051758,
        "y": 650.0000123977661,
        "wires": []
    },
    {
        "id": "f48aa646.e25928",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1609.5001322428386,
        "y": 760.3334121704102,
        "wires": []
    },
    {
        "id": "ba24521c.4ed78",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_short_details",
        "tls": "",
        "x": 1627.5001220703125,
        "y": 714.666748046875,
        "wires": [
            [
                "1c9dc459.c180fc"
            ]
        ]
    },
    {
        "id": "1c9dc459.c180fc",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_records",
        "func": "var payload         = msg.payload,\n    access_token    = msg.payload_content.access_token,\n    req_body        = msg.payload_content.content;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to fetch record via using views\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        user_obj   = populate_user(db_records.users, access_token),\n        detail_obj = populate_details(db_records.details, req_body.detail_id),\n        task_obj   = populate_task(db_records.tasks_arr, req_body.page_id);\n        \n        if(isEmpty(user_obj)){\n            msg.statusCode = 400 ;\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, error: true, msg: \"Invalid `access_token`. Please retry after logout.\", data: null};\n        }else{\n            if(user_obj._id == detail_obj.user_id){\n                //update detail_obj\n                detail_obj.display_if_empty         = req_body.display_if_empty;\n                detail_obj.user_incoming.note       = req_body.message ;\n                detail_obj.user_incoming.message    = req_body.message ;\n                detail_obj.type                     = req_body.type;\n         \n                //update task_obj \n                task_obj.display_if_empty = req_body.display_if_empty;\n                task_obj.task_name        = req_body.message ;\n                task_obj.type             = req_body.type;\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.payload = {\n                    docs: [detail_obj, task_obj]\n                };\n            }else{\n                msg.statusCode = 401 ;\n                msg.api_status = \"API_ERROR\";\n                msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n            }\n        }\n}   \n\nreturn msg;\n\nfunction populate_user(users, access_token){\n    var user = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token == access_token){\n            user = users[i];\n        }\n    }\n    return user;\n}\n\nfunction populate_details(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id == detail_id){\n            obj = details[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_task(tasks, page_id){\n    var obj = {};\n    for(var i=0; i<tasks.length; i++){\n        if((tasks[i].page_id == page_id) && (tasks[i].table == \"task_table\") ){\n            obj = tasks[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_records(rows){\n    var users = [], details = [], tasks=[];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table == \"task_table\"){\n            tasks.push(rows[i].value);\n        }\n    }\n    return {users: users, details:details, tasks_arr:tasks };\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1808.8334655761719,
        "y": 754.3334121704102,
        "wires": [
            [
                "ae9ab734.2dab68"
            ]
        ]
    },
    {
        "id": "2f899253.1b7f7e",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2091.8336181640625,
        "y": 816.666748046875,
        "wires": []
    },
    {
        "id": "ae9ab734.2dab68",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1969.8334655761719,
        "y": 787.3334121704102,
        "wires": [
            [
                "89991216.eab55"
            ],
            [
                "2f899253.1b7f7e"
            ]
        ]
    },
    {
        "id": "89991216.eab55",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2108.83349609375,
        "y": 759.666748046875,
        "wires": [
            [
                "e62b481a.ac3328"
            ]
        ]
    },
    {
        "id": "e62b481a.ac3328",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Unable to update provided documents\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: true, msg: \"Record updated successfully.\", data: msg.payload};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2258.8336181640625,
        "y": 759.33349609375,
        "wires": [
            [
                "783b3c33.9a7dc4"
            ]
        ]
    },
    {
        "id": "783b3c33.9a7dc4",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2444.1666946411133,
        "y": 741.6667327880859,
        "wires": []
    },
    {
        "id": "1e4c20e5.174cdf",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "get_all_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1214.8334274291992,
        "y": 583.000036239624,
        "wires": [
            [
                "dd734d95.d0611"
            ]
        ]
    },
    {
        "id": "dd734d95.d0611",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "all_task",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1382.8334579467773,
        "y": 580.6667537689209,
        "wires": [
            [
                "a81f0427.e85ea8"
            ]
        ]
    },
    {
        "id": "a81f0427.e85ea8",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "response",
        "func": "var response = msg.payload ;\n\nif(!isEmpty(response)){\n    msg.payload = {status:200, msg: \"Record fectehed successfully.\", data: response};\n}else{\n    msg.statusCode = 400;\n    msg.payload = {status:400, msg: \"Error while fetching record..\", data: response};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1546.8334655761719,
        "y": 580.6667528152466,
        "wires": [
            [
                "b7720959.c6c708"
            ]
        ]
    },
    {
        "id": "b7720959.c6c708",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1690.8334884643555,
        "y": 578.000036239624,
        "wires": []
    },
    {
        "id": "64b37e31.c8e18",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "add_detail_to_task",
        "func": "var content         = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(content.detail_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`detaik_id`is missing\", data: content};\n}else if(isEmpty(content.task_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`task_id`is missing\", data: content};\n}else if(isEmpty(access_token)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`access_token`is missing\", data: content};\n}else{\n    msg.url     = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task\";\n    msg.method  = \"GET\";\n}\n\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 850.3333740234375,
        "wires": [
            [
                "d31d6836.35ce68"
            ]
        ]
    },
    {
        "id": "187e52ca.e74c8d",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1968.500244140625,
        "y": 853.6667852401733,
        "wires": []
    },
    {
        "id": "d31d6836.35ce68",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1488.5000076293945,
        "y": 848.0000267028809,
        "wires": [
            [
                "85ce2a2.19752d8"
            ]
        ]
    },
    {
        "id": "85ce2a2.19752d8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_data",
        "func": "var content         = msg.payload_data,\n    access_token    = msg.access_token,\n    db_records      = msg.payload;\n\nif(isEmpty(db_records.rows)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to fetch data via using cloudant view 'add_detail_to_task'\", data: null};\n}else{\n    var records     = populate_record(db_records.rows),\n        detail_obj  = populate_details(records.details, content.detail_id),\n        user_obj    = populate_user(records.users, access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`access_token` is not valid.\", data: null};\n    }else if(isEmpty(detail_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`detail_id` is not valid.\", data: null};\n    }else{\n\n        if(isEmpty(detail_obj.task_id)){\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"`detail_obj` doesn't contains task_id. please check it once.\", data: null};\n        }\n        else if(Object.prototype.toString.call(detail_obj.task_id) !== \"[object Array]\"){\n            detail_obj.task_id = detail_obj.task_id.push(task_id);    \n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Invalid detail.task_id. Plesae check details_obj once.\", data: null};\n        }else{\n            msg.statusCode     = 200;\n            detail_obj.task_id.push(content.task_id);    \n            msg.payload        = detail_obj;\n        }\n    }\n}\nreturn msg;\n\nfunction populate_user(arr, token){\n    if(isEmpty(token)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].access_token == token){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_details(arr, id){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]._id == id){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_record(list){\n    var users = [],details=[], sorted_detail=[];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, details: sorted_detail} ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1657.8333435058594,
        "y": 891.6666641235352,
        "wires": [
            [
                "636a9190.f5193"
            ]
        ]
    },
    {
        "id": "636a9190.f5193",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1824.8333435058594,
        "y": 892.0000076293945,
        "wires": [
            [
                "187e52ca.e74c8d"
            ],
            [
                "ec88c59.c123f38",
                "248f0e68.9e2fc2"
            ]
        ]
    },
    {
        "id": "248f0e68.9e2fc2",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1990.8336181640625,
        "y": 907.3334197998047,
        "wires": []
    },
    {
        "id": "ec88c59.c123f38",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "var data = msg.payload ;\n\nmsg.payload = {status: 200, msg: \"Record updated successfully.\", data: data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1982.8333435058594,
        "y": 964.0000076293945,
        "wires": [
            [
                "6bb88701.31c738"
            ]
        ]
    },
    {
        "id": "6bb88701.31c738",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2118.8334045410156,
        "y": 965.3333511352539,
        "wires": []
    },
    {
        "id": "c48042b0.69d9b",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "get_all_assistants",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1235.5000839233398,
        "y": 658.0000514984131,
        "wires": [
            [
                "83fd0ac0.731528"
            ]
        ]
    },
    {
        "id": "69b5c7d6.1ef8f8",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1725.5005111694336,
        "y": 662.3333835601807,
        "wires": []
    },
    {
        "id": "83fd0ac0.731528",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1426.500087738037,
        "y": 658.6667175292969,
        "wires": [
            [
                "fed5ce30.803c9"
            ]
        ]
    },
    {
        "id": "fed5ce30.803c9",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "response",
        "func": "var payload = msg.payload,\n    payload_content = msg.req_params;\n\nif(isUserAuthenticated(payload, payload_content.access_token)){\n    var filter      = payload_content.content.filters,\n        isGroupUsers= payload_content.content.group_users,\n        result      = [], \n        type        = null;\n        \n    if(!isEmpty(isGroupUsers)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(payload[itr].data){\n                if(!isEmpty(payload[itr].data.groups)){\n                    if(filter in payload[itr].data.groups){\n                        result.push(payload[itr]);\n                    }\n                }\n            }\n        }\n    }else if(!isEmpty(filter)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(filter in payload[itr].type){\n                result.push(payload[itr]);\n            }\n        }\n    }else{\n        type = \"add_assistant\";\n        for(var itr in payload){\n            result.push({\n                user_id     : payload[itr]._id,\n                first_name  : payload[itr].firstname,\n                last_name   : payload[itr].lastname,\n                type        : payload[itr].type,\n                data        : payload[itr].data,\n                phone       : payload[itr].virtual_phone\n            });\n        }\n    }\n    msg.statusCode  = 200;\n    msg.payload     = {status: 200, msg: \"Record fecthed successfully.\", record: {type: type, result:result}};\n}else{\n    msg.statusCode  = 400;\n    msg.payload     = {status: 200, msg: \"`access_token` is invalid\", record: []};          \n}\n\nreturn msg;\n\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1595.1668434143066,
        "y": 660.0000500679016,
        "wires": [
            [
                "69b5c7d6.1ef8f8"
            ]
        ]
    },
    {
        "id": "37669890.4231e8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "add_assistants",
        "func": "var access_token = msg.access_token ,\n    payload      = msg.payload_data ;\n\n\nif(isEmpty(access_token)){\n    msg.API_ERROR  = \"API_ERROR\";\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`access_token` is missing\", data: null};\n}else if(isEmpty(payload.number)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`User number` is missing to add as assistants\", data: null};\n}else{\n    msg.API_ERROR  = \"API_SUCCESS\";\n    msg.payload    = {\n        query : \"table:users\",\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1289.5000305175781,
        "y": 981.0000381469727,
        "wires": [
            [
                "32fbffb1.0d152"
            ]
        ]
    },
    {
        "id": "c208f512.79bcf8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1587.5000534057617,
        "y": 945.3334074020386,
        "wires": []
    },
    {
        "id": "32fbffb1.0d152",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1449.833381652832,
        "y": 980.6667442321777,
        "wires": [
            [
                "c208f512.79bcf8"
            ],
            [
                "410fefa7.69161"
            ]
        ]
    },
    {
        "id": "410fefa7.69161",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1609.8333892822266,
        "y": 995.3334121704102,
        "wires": [
            [
                "d0874983.eef018"
            ]
        ]
    },
    {
        "id": "d0874983.eef018",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate",
        "func": "var access_token = msg.access_token ,\n    req_body     = msg.payload_data ,\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to fetch all users\", data: []};\n}else{\n    if(isUserAuthenticated(payload, access_token)){\n        var user_obj = isUserExits(payload, req_body.number);\n        if( isEmpty(user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Entred phone number doesn't exits in database.\", data: []};    \n        }else{\n\n            if((\"virtual_group\" in user_obj.type)){\n                msg.API_ERROR   = \"API_ERROR\";\n                msg.statusCode  = 400;\n                msg.payload     = {status: 400, msg: \"User already added into this group\", data: []};    \n            }else{\n                msg.API_ERROR   = \"API_SUCCESS\";\n                user_obj.type.virtual_group  = \"virtual_group\";\n                msg.payload             = user_obj ;\n                msg.api_response        =  {status: 200, msg: \"User added into group successfully\", data: user_obj};\n            }\n        }\n    }else{\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n    }\n}\nreturn msg;\n\nfunction isUserExits(users, number){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == parseInt(number)){\n            obj = users[itr];\n        }\n    }\n    return obj ;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1770.833396911621,
        "y": 1063.6667051315308,
        "wires": [
            [
                "3fe30d5b.c19fb2"
            ]
        ]
    },
    {
        "id": "3fe30d5b.c19fb2",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1927.833408355713,
        "y": 1065.333370923996,
        "wires": [
            [
                "4ca7ebc1.690574",
                "94e4f861.7e3288"
            ],
            [
                "6855dc0c.0daf24"
            ]
        ]
    },
    {
        "id": "6855dc0c.0daf24",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2092.8332920074463,
        "y": 1125.0000414848328,
        "wires": []
    },
    {
        "id": "4ca7ebc1.690574",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2117.833293914795,
        "y": 1006.6667041778564,
        "wires": []
    },
    {
        "id": "94e4f861.7e3288",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2107.8333435058594,
        "y": 1054.0000076293945,
        "wires": [
            [
                "7db27c5e.d439b4"
            ]
        ]
    },
    {
        "id": "7db27c5e.d439b4",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2253.8334045410156,
        "y": 1056.333351135254,
        "wires": []
    },
    {
        "id": "2d82d77a.257428",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "get_assistant_by_id",
        "func": "var params = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1249.1667404174805,
        "y": 738.3333644866943,
        "wires": [
            [
                "34489d0e.350752"
            ]
        ]
    },
    {
        "id": "dfca27a5.0a8578",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1579.166847229004,
        "y": 710.6668453216553,
        "wires": []
    },
    {
        "id": "34489d0e.350752",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1431.5002517700195,
        "y": 738.3334288597107,
        "wires": [
            [
                "dfca27a5.0a8578"
            ],
            [
                "19ba6383.a416ac"
            ]
        ]
    },
    {
        "id": "19ba6383.a416ac",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1598.1668434143066,
        "y": 759.3334302902222,
        "wires": [
            [
                "346e34d6.da256c"
            ]
        ]
    },
    {
        "id": "346e34d6.da256c",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "response",
        "func": "var params       = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1761.1667404174805,
        "y": 761.0000514984131,
        "wires": [
            [
                "1eedca2e.49b646"
            ]
        ]
    },
    {
        "id": "1eedca2e.49b646",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1899.166862487793,
        "y": 761.0001373291016,
        "wires": []
    },
    {
        "id": "66fcb11c.305ed",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_assistant",
        "func": "var access_token = msg.access_token;\n    user_data    = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_data` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1303.1667938232422,
        "y": 1128.3333778381348,
        "wires": [
            [
                "f141095a.bc1c38"
            ]
        ]
    },
    {
        "id": "f141095a.bc1c38",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1468.6667175292969,
        "y": 1130.666708946228,
        "wires": [
            [
                "181d3b1f.752ad5"
            ],
            [
                "95da0b5c.f4e308"
            ]
        ]
    },
    {
        "id": "181d3b1f.752ad5",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1616.3333129882812,
        "y": 1103.0001254081726,
        "wires": []
    },
    {
        "id": "95da0b5c.f4e308",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1635.333309173584,
        "y": 1151.6667103767395,
        "wires": [
            [
                "bf58c183.59e33"
            ]
        ]
    },
    {
        "id": "bf58c183.59e33",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "var user_data    = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_data.user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        user_obj.firstname = user_data.first_name;\n        user_obj.lastname  = user_data.last_name;\n        user_obj.email     = user_data.email;\n        user_obj.device_id = user_data.deviceId;\n        user_obj.push_accepted = user_data.push_accepted;\n        msg.payload = user_obj;\n        msg.api_response = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1793.8334007263184,
        "y": 1206.6667137145996,
        "wires": [
            [
                "7c1e7068.226ac"
            ]
        ]
    },
    {
        "id": "7c1e7068.226ac",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1941.8333435058594,
        "y": 1208.0000076293945,
        "wires": [
            [
                "6855dc0c.0daf24"
            ],
            [
                "39b2950e.75bdaa",
                "820ced80.db249"
            ]
        ]
    },
    {
        "id": "39b2950e.75bdaa",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2113.833293914795,
        "y": 1185.0000476837158,
        "wires": []
    },
    {
        "id": "820ced80.db249",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(\"updated user_paylaod \");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_resposne;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2102.8333435058594,
        "y": 1232.333351135254,
        "wires": [
            [
                "168e990b.262c07"
            ]
        ]
    },
    {
        "id": "168e990b.262c07",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2269.8333435058594,
        "y": 1228.6666641235352,
        "wires": []
    },
    {
        "id": "1da3c509.c4586b",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "delete_assistant",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1299.5,
        "y": 1284,
        "wires": [
            [
                "2a5e682f.355718"
            ]
        ]
    },
    {
        "id": "2a5e682f.355718",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1490.333251953125,
        "y": 1290,
        "wires": [
            [
                "63cd70cb.11df"
            ],
            [
                "143729bd.7f5856"
            ]
        ]
    },
    {
        "id": "63cd70cb.11df",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1637.9998474121094,
        "y": 1262.3334164619446,
        "wires": []
    },
    {
        "id": "143729bd.7f5856",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1656.999843597412,
        "y": 1311.0000014305115,
        "wires": [
            [
                "7088df82.1859"
            ]
        ]
    },
    {
        "id": "7088df82.1859",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n    \nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, body.id);\n    if( isEmpty(user_obj) ){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"User doesn't exists in database.\", data: []};    \n    }else{\n\n        if( !isExistsIngroup(body, user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"User doesn't exits in this group\", data: []};    \n        }else{\n            msg.API_ERROR   = \"API_SUCCESS\";\n            delete user_obj.data.groups[body.group_id];\n            msg.payload             = user_obj ;\n            msg.api_response        =  {status: 200, msg: \"User removed successfully.\", data: user_obj};\n        }\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n}\n    \nreturn msg;\n\nfunction isExistsIngroup(group, user){\n    var group_id = group.group_id ,\n        user_group = user.data.groups ;\n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1817.5000305175781,
        "y": 1339.333381652832,
        "wires": [
            [
                "1218a88f.b650d7"
            ]
        ]
    },
    {
        "id": "1218a88f.b650d7",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1950,
        "y": 1341.6666259765625,
        "wires": [
            [
                "99fa16b0.0918c8",
                "7b6a744c.5293fc"
            ],
            [
                "11012bb.96d31d4"
            ]
        ]
    },
    {
        "id": "11012bb.96d31d4",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2114.9998836517334,
        "y": 1401.3332965373993,
        "wires": []
    },
    {
        "id": "99fa16b0.0918c8",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2139.999885559082,
        "y": 1282.999959230423,
        "wires": []
    },
    {
        "id": "7b6a744c.5293fc",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2129.9999351501465,
        "y": 1330.333262681961,
        "wires": [
            [
                "aecff79a.aed858"
            ]
        ]
    },
    {
        "id": "aecff79a.aed858",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2275.9999961853027,
        "y": 1332.6666061878204,
        "wires": []
    },
    {
        "id": "92a931c3.05382",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "add_group_detail",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else if(isEmpty(data.name)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_name` is missing\", record: []};\n}else if(isEmpty(data.owner_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_owner_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.5000457763672,
        "y": 1401.0000581741333,
        "wires": [
            [
                "123dad2a.67e973"
            ]
        ]
    },
    {
        "id": "bc591e8e.6e80b",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1642.5001029968262,
        "y": 1399.000117301941,
        "wires": []
    },
    {
        "id": "123dad2a.67e973",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1487.8334274291992,
        "y": 1414.0002794265747,
        "wires": [
            [
                "bc591e8e.6e80b"
            ],
            [
                "17f9b67f.5384ba"
            ]
        ]
    },
    {
        "id": "17f9b67f.5384ba",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1663.8334350585938,
        "y": 1444.0001192092896,
        "wires": [
            [
                "b79daaed.9b9ee8"
            ]
        ]
    },
    {
        "id": "b79daaed.9b9ee8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Invalid `access_token`. Plesae check it once.\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload     = {\n        table       : \"group_table\",\n        owner_id    : data.owner_id,\n        group_name  : data.name\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1822.8333625793457,
        "y": 1443.000228881836,
        "wires": [
            [
                "cbc8e45a.e96ef8"
            ]
        ]
    },
    {
        "id": "cbc8e45a.e96ef8",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1958.5000381469727,
        "y": 1442.0000648498535,
        "wires": [
            [
                "11012bb.96d31d4"
            ],
            [
                "4eb930d5.132e8",
                "f70a2158.2db0f"
            ]
        ]
    },
    {
        "id": "4eb930d5.132e8",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2134.500045776367,
        "y": 1446.6667289733887,
        "wires": []
    },
    {
        "id": "f70a2158.2db0f",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2124.500030517578,
        "y": 1499.0000381469727,
        "wires": [
            [
                "f7324fad.6243c"
            ]
        ]
    },
    {
        "id": "f7324fad.6243c",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2267.500030517578,
        "y": 1500.333351135254,
        "wires": []
    },
    {
        "id": "acc51865.354278",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "get_users_groups",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId;\n    \n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:group_table\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1244.1667709350586,
        "y": 833.6667385101318,
        "wires": [
            [
                "9ad3910.343c77"
            ]
        ]
    },
    {
        "id": "3c6d12f2.23ddee",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1544.1670036315918,
        "y": 814.0002460479736,
        "wires": []
    },
    {
        "id": "9ad3910.343c77",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1411.0001678466797,
        "y": 834.3334159851074,
        "wires": [
            [
                "3c6d12f2.23ddee"
            ],
            [
                "72b37e8f.c016e"
            ]
        ]
    },
    {
        "id": "72b37e8f.c016e",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1568.1668434143066,
        "y": 873.0000839233398,
        "wires": [
            [
                "1b26065e.1b17ba"
            ]
        ]
    },
    {
        "id": "1b26065e.1b17ba",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "response",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId,\n    payload      = msg.payload ;\n\nuser_id = \"0a9b50963bc76018418ffd857d551ced\";\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n}else{\n    var userGroups  = populateUserGroups(user_id, payload);\n    if(isEmpty(userGroups)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status:200, msg: \"User group fetched successfully.\", record: userGroups};    \n    }\n}    \nreturn msg;\n\nfunction populateUserGroups(userId, groups){\n    var obj = [];\n    \n    if(isEmpty(userId)) return obj;\n    if(isEmpty(groups)) return obj;\n    \n    for(var itr in groups){\n        if(groups[itr].owner_id == userId){\n            obj.push(groups[itr]);\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1755.1668529510498,
        "y": 871.3334159851074,
        "wires": [
            [
                "ffe24c63.8910a"
            ]
        ]
    },
    {
        "id": "ffe24c63.8910a",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1918.166862487793,
        "y": 872.0000829696655,
        "wires": []
    },
    {
        "id": "c302fa3e.35ae38",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "delete_group",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 1494,
        "wires": [
            [
                "b1a8982a.b50868"
            ]
        ]
    },
    {
        "id": "b1a8982a.b50868",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1481.6666259765625,
        "y": 1517.6666259765625,
        "wires": [
            [
                "efddd806.7a9ca8"
            ],
            [
                "57ba7fbe.bad8a"
            ]
        ]
    },
    {
        "id": "efddd806.7a9ca8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1629.3332214355469,
        "y": 1490.000042438507,
        "wires": []
    },
    {
        "id": "57ba7fbe.bad8a",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1648.3332176208496,
        "y": 1538.666627407074,
        "wires": [
            [
                "87a63645.37e2f8"
            ]
        ]
    },
    {
        "id": "87a63645.37e2f8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Please check access_token.\", data: []};    \n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.user_obj = payload[0];\n    msg.payload  = {\n      query: \"table:group_table\"  ,\n      sort : \"_id<string>\"\n    };\n}   \n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1778.0002746582031,
        "y": 1598.6667346954346,
        "wires": [
            [
                "131aa84c.9c0498"
            ]
        ]
    },
    {
        "id": "131aa84c.9c0498",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1920.500114440918,
        "y": 1625.9999513626099,
        "wires": [
            [
                "4760888a.d36b08"
            ],
            [
                "8310c854.65a938"
            ]
        ]
    },
    {
        "id": "4760888a.d36b08",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2069.5001258850098,
        "y": 1585.6667757034302,
        "wires": []
    },
    {
        "id": "8310c854.65a938",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2090.166793823242,
        "y": 1638.0002784729004,
        "wires": [
            [
                "8f1c1763.84c678"
            ]
        ]
    },
    {
        "id": "8f1c1763.84c678",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "var group_tables = msg.payload ,\n    user_obj     = msg.user_obj,\n    data         = msg.payload_data;\n\nif(isEmpty(group_tables)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to find groups for this user.\", data: []};    \n}else{\n    var group = populate_record(user_obj._id, group_tables);\n    if(isEmpty(group)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 403;\n        msg.payload     = {status: 403, msg: \"You are not authrozied to remove this group.\", data: []};    \n    }else{\n        group._deleted  = true;\n        msg.payload     = group;\n    }\n}\n\nreturn msg;\n\nfunction populate_record(userId, groups){\n    var obj = {};\n    for(var itr in groups){\n        if(\n            \n            (groups[itr]._id        == data.id    ) &&\n            (groups[itr].owner_id   == userId)\n        ){\n            obj = groups[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.166778564453,
        "y": 1636.6667251586914,
        "wires": [
            [
                "f371fb37.9c1338"
            ]
        ]
    },
    {
        "id": "32b981d5.ed8a7e",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2553,
        "y": 1581,
        "wires": []
    },
    {
        "id": "941719dc.833178",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2572.500162124634,
        "y": 1626.3334324359894,
        "wires": []
    },
    {
        "id": "7ef4f5a3.4a4f4c",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2562.5001468658447,
        "y": 1678.6667416095734,
        "wires": [
            [
                "d7b65a17.3eaae8"
            ]
        ]
    },
    {
        "id": "d7b65a17.3eaae8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2705.5001468658447,
        "y": 1680.0000545978546,
        "wires": []
    },
    {
        "id": "f371fb37.9c1338",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2385,
        "y": 1638,
        "wires": [
            [
                "32b981d5.ed8a7e"
            ],
            [
                "941719dc.833178",
                "7ef4f5a3.4a4f4c"
            ]
        ]
    },
    {
        "id": "3b6f31b2.520fae",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "add_assistant_to_groups",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data.assistants)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Assistants list is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1334.4999961853027,
        "y": 1590.0000352859497,
        "wires": [
            [
                "66b153b9.928b5c"
            ]
        ]
    },
    {
        "id": "66b153b9.928b5c",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1492.6666259765625,
        "y": 1632.6666259765625,
        "wires": [
            [
                "2b36d006.44dd2"
            ],
            [
                "8759bc91.850c"
            ]
        ]
    },
    {
        "id": "2b36d006.44dd2",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 1640.3332214355469,
        "y": 1605.000042438507,
        "wires": []
    },
    {
        "id": "8759bc91.850c",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1659.3332176208496,
        "y": 1653.666627407074,
        "wires": [
            [
                "cc8ded1e.2ed32"
            ]
        ]
    },
    {
        "id": "cc8ded1e.2ed32",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate",
        "func": "var access_token    = msg.access_token,\n    assistants      = msg.payload_data.assistants,\n    payload         = msg.payload ,\n    group_id        = randomString(32);\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Unable to get user records from database.\", record: []};\n}else{\n    \n    var user_obj    = populate_user(access_token, payload);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"Invalid `access_token`. Please check it once.\", record: []};\n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.payload     = {\n            _id  : group_id,\n            table: \"group_table\",\n            owner_id: payload[0]._id,\n            group_name: getRandomGroupName()\n        };\n        \n        msg.update_user =  {\n            docs: populate_updated_users(group_id, payload, assistants)\n        };\n    }\n}\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction getRandomGroupName(){\n    var groupName = [\"dri_main\", \"demo_group\", \"test_group\", \"first_responder\", \"second_responder\", \"third_responder\"];\n    return groupName[Math.floor(Math.random() * groupName.length)];\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    \n    if(isEmpty(access_token)) return obj;\n    if(isEmpty(users)) return obj;\n    \n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            obj = users[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_updated_users(group_id, users, assistants){\n    var assis = [];\n    for(var ass in assistants){\n        for(var itr in users){\n            if(assistants[ass].detail_id == users[itr]._id){\n                delete users[itr].type.virtual_group ;\n                users[itr].data = {groups: {}};\n                users[itr].data.groups[group_id] = true;\n                assis.push(users[itr]);\n            }\n        }\n    }\n    return assis;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1813.8334121704102,
        "y": 1724.333779335022,
        "wires": [
            [
                "8661597d.a32ed8"
            ]
        ]
    },
    {
        "id": "8661597d.a32ed8",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1957.6666374206543,
        "y": 1723.0003261566162,
        "wires": [
            [
                "fd8c168d.4ded78"
            ],
            [
                "72f75e08.63737",
                "bd3f3298.c9579"
            ]
        ]
    },
    {
        "id": "fd8c168d.4ded78",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2099.333297729492,
        "y": 1681.3337783813477,
        "wires": []
    },
    {
        "id": "72f75e08.63737",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2121.8334579467773,
        "y": 1727.3334531784058,
        "wires": []
    },
    {
        "id": "bd3f3298.c9579",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "bulk_update",
        "func": "msg.payload = msg.update_user;\nmsg.url     = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method  = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2118.8334579467773,
        "y": 1778.0001239776611,
        "wires": [
            [
                "a0ae2850.056e28"
            ]
        ]
    },
    {
        "id": "a0ae2850.056e28",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2282.8333053588867,
        "y": 1775.666790008545,
        "wires": [
            [
                "93da950d.7036d8"
            ]
        ]
    },
    {
        "id": "93da950d.7036d8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "node.warn(\"update assistants are as follows\");\nnode.warn(msg.payload);\nmsg.payload = {\n    status: 200,\n    msg: \"Assistants added successfully\",\n    record: msg.updated_user\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2450.8334045410156,
        "y": 1777.6667251586914,
        "wires": [
            [
                "a165b464.67c7f8"
            ]
        ]
    },
    {
        "id": "a165b464.67c7f8",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2600.8333435058594,
        "y": 1779.666633605957,
        "wires": []
    },
    {
        "id": "f09741ca.2bf7b",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "msg.url             = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task\";\nmsg.method          = \"GET\";\nmsg.detail_obj      = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2830.8021030426025,
        "y": 174.57424926757812,
        "wires": [
            [
                "9f409fac.299f4"
            ]
        ]
    },
    {
        "id": "9f409fac.299f4",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2995.802177429199,
        "y": 170.24088287353516,
        "wires": [
            [
                "72536995.765e48"
            ]
        ]
    },
    {
        "id": "72536995.765e48",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate",
        "func": "var detail_obj = msg.detail_obj,\n    payload    = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else{\n    msg.api_status  = \"API_ERROR\";\n    var user_tasks  = populate_user_task(payload.rows, detail_obj);\n    msg.payload     = {detail_obj: detail_obj, subscribed_users: user_tasks};\n}    \nreturn msg;\n\nfunction populate_user_task(lists, obj){\n    var user_tasks = [];\n    \n    for(var itr in lists){\n        if(\n            ( if_exists_in_arr(lists[itr].value.task_id, obj.task_id) )&&\n            (lists[itr].value.page_id  == obj.page_id)\n        ){\n            lists[itr].value.synchronized = 0;\n            lists[itr].value.status       = 0;\n            user_tasks.push(lists[itr].value);\n        }\n    }\n    return user_tasks;\n}\n\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3184.8021965026855,
        "y": 117.57430720329285,
        "wires": [
            [
                "c2eaa2e.abc5f6",
                "a28e20f6.d9333"
            ]
        ]
    },
    {
        "id": "e48bd924.f417a8",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "Bulk Update",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3567.802215576172,
        "y": 53.90766406059265,
        "wires": [
            [
                "b1d3ecb8.50c5e"
            ]
        ]
    },
    {
        "id": "c2eaa2e.abc5f6",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "Notify socket server",
        "method": "POST",
        "ret": "obj",
        "url": "https://socket-server.mybluemix.net/accept_request",
        "tls": "",
        "x": 3457.469528198242,
        "y": 138.90762209892273,
        "wires": [
            [
                "b1d3ecb8.50c5e"
            ]
        ]
    },
    {
        "id": "a28e20f6.d9333",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "msg.url         = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method      = \"POST\";\n\nmsg.payload     = {\n  docs: msg.payload   \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3411.4688720703125,
        "y": 68.57432436943054,
        "wires": [
            [
                "e48bd924.f417a8"
            ]
        ]
    },
    {
        "id": "b1d3ecb8.50c5e",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3707.0007934570312,
        "y": 118.00008964538574,
        "wires": []
    },
    {
        "id": "3b851894.44a2d8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "msg.url = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_data\";\nmsg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1985.4999694824219,
        "y": 149.66666412353516,
        "wires": [
            [
                "a95c4fb2.e713b"
            ]
        ]
    },
    {
        "id": "a95c4fb2.e713b",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2146.500045776367,
        "y": 142.00001907348633,
        "wires": [
            [
                "d2f5514b.4a309"
            ]
        ]
    },
    {
        "id": "34e4625.237129e",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "After update_create_user_task",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 4741.500930786133,
        "y": 404.33334255218506,
        "wires": []
    },
    {
        "id": "d3d6240b.dadfd8",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "create_optional_task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3478.1668701171875,
        "y": 232.33333730697632,
        "wires": []
    },
    {
        "id": "1eeef4dd.9a728b",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "addDetail payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2854.500099182129,
        "y": 327.3333282470703,
        "wires": []
    },
    {
        "id": "59c7206e.b8c9c",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "Under Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4368.166923522949,
        "y": 248.00004482269287,
        "wires": []
    },
    {
        "id": "3fbe560f.d4c24a",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 4144.499923706055,
        "y": 193.33333778381348,
        "wires": [
            [
                "c33d8be7.d96bf8"
            ],
            [
                "59c7206e.b8c9c"
            ]
        ]
    },
    {
        "id": "1351ffaa.afeba",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "add_assistant_into_group",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1336.1667442321777,
        "y": 1736.000099182129,
        "wires": [
            [
                "defbe3a5.07aa2"
            ]
        ]
    },
    {
        "id": "defbe3a5.07aa2",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_groups_users",
        "tls": "",
        "x": 1549.2421989440918,
        "y": 1774.9767475128174,
        "wires": [
            [
                "cee51409.52e728"
            ]
        ]
    },
    {
        "id": "cee51409.52e728",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_records",
        "func": "var payload         = msg.payload ,\n    req_user_id     = msg.req_body.table_data.user_id,\n    req_group_id    = msg.req_body.table_data.group_id,\n    access_token    = msg.access_token;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant views\", result: null};\n    return msg;\n}else{\n    if(isEmpty(req_user_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`user_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`group_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(access_token)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`access_token` is mising.\", result: null};\n        return msg;\n    }\n    \n    var db_records      = populate_record(payload.rows),\n        req_user_obj    = populate_requested_user(db_records.users, req_user_id),\n        req_group_obj   = populate_requested_group(db_records.groups, req_group_id);\n        \n    if(isEmpty(req_user_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find user with requested `user_id`.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find group with requested `group_id`.\", result: null};\n        return msg;\n    }\n    \n    if( check_user_already_exists(req_user_obj, req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"User already added into this group.\", result: null};\n        return msg;\n    }else{\n        msg.statusCode = 200;\n        msg.api_status = \"API_SUCCESS\";\n        if(isEmpty(req_user_obj.data)) {\n            var obj = {};\n            obj[req_group_id] = true ;\n            req_user_obj.data = {\n                groups : obj\n            };\n        }else{\n            req_user_obj.data.groups[req_group_id] = true ;    \n        }\n        \n        msg.payload   = req_user_obj;\n        \n        node.warn(msg);\n        return msg;\n    }\n}\n    \n\n\nfunction check_user_already_exists(user, group){\n    var group_id    = group.group_id , user_group = {};\n    if(isEmpty(user.data)){\n        user_group  = {\n            data : {\n                groups : {\n                    \n                }\n            }\n        };\n    }else{\n        user_group  = user.data.groups;\n    }\n        \n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction populate_requested_group(list, group_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(group_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == group_id){\n            obj = {\n                group_id    : list[itr]._id,\n                group_name  : list[itr].group_name\n            };\n        }\n    }\n    return obj;\n}\n\nfunction populate_requested_user(list, user_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(user_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == user_id){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var groups = [], users = [];\n    \n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {users: users, groups: groups};\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1748.2578353881836,
        "y": 1801.632924079895,
        "wires": [
            [
                "ea35ce12.c7199"
            ]
        ]
    },
    {
        "id": "ea35ce12.c7199",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1915.4999694824219,
        "y": 1866.3332901000977,
        "wires": [
            [
                "29a3e73c.84f288"
            ],
            [
                "f3f9cb26.acf3a8",
                "4c8a6b74.6d80d4",
                "80e45e0c.5c7a7"
            ]
        ]
    },
    {
        "id": "4c8a6b74.6d80d4",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2098.5001220703125,
        "y": 1857.0004081726074,
        "wires": []
    },
    {
        "id": "f3f9cb26.acf3a8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "func": "msg.payload = {\n    status: 200,\n    msg   : \"User added into group successfully\",\n    data  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2084.500045776367,
        "y": 1900.0002756118774,
        "wires": [
            [
                "aa846006.b6e41"
            ]
        ]
    },
    {
        "id": "aa846006.b6e41",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2233.5001258850098,
        "y": 1899.0003328323364,
        "wires": []
    },
    {
        "id": "29a3e73c.84f288",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2070.5000400543213,
        "y": 1820.0001096725464,
        "wires": []
    },
    {
        "id": "80e45e0c.5c7a7",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2101.8333702087402,
        "y": 1963.6670846939087,
        "wires": []
    },
    {
        "id": "df36bb.4b3b3948",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "User Update Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2268.1668014526367,
        "y": 559.3334074020386,
        "wires": []
    },
    {
        "id": "5d369c3e.41b9c4",
        "type": "function",
        "z": "60d983f8.559f7c",
        "name": "send sms code",
        "func": "var user_data = msg.payload;\nvar code = user_data.code || 1234;\nmsg.topic = user_data.virtual_phone || 12145644732;\nmsg.payload = \"Your verification code for the Dri List app is : \" + code;\n\n\nmsg.api_response = {\n    \"page_id\":      11,\n    \"code\" : user_data.code\n};\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620.333324432373,
        "y": 492.0000305175781,
        "wires": [
            [
                "be7dec50.8be1a",
                "f726ab1e.9af518",
                "b81292c9.8ed57"
            ]
        ]
    },
    {
        "id": "b81292c9.8ed57",
        "type": "twilio out",
        "z": "60d983f8.559f7c",
        "service": "_ext_",
        "twilio": "9bfbb0be.abade",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 873.3333129882812,
        "y": 472,
        "wires": []
    },
    {
        "id": "be7dec50.8be1a",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 884.3333129882812,
        "y": 516,
        "wires": []
    },
    {
        "id": "f726ab1e.9af518",
        "type": "change",
        "z": "60d983f8.559f7c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 841.2005004882812,
        "y": 416.16796875,
        "wires": [
            [
                "414a8412.ac4f4c"
            ]
        ]
    },
    {
        "id": "414a8412.ac4f4c",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "API Result",
        "x": 1019.3333129882812,
        "y": 416.25,
        "wires": []
    },
    {
        "id": "62bfefd0.f8d4a",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 293.16675567626953,
        "y": 482.00005054473877,
        "wires": []
    },
    {
        "id": "eed0f670.59cdb8",
        "type": "http in",
        "z": "5b153ee0.8e5f",
        "name": "Recieve Twilio Errors",
        "url": "/twilio_error",
        "method": "post",
        "swaggerDoc": "",
        "x": 129.5,
        "y": 40,
        "wires": [
            [
                "651197ad.966a48",
                "4c791aaa.d87fd4"
            ]
        ]
    },
    {
        "id": "651197ad.966a48",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326.5,
        "y": 40.99999237060547,
        "wires": []
    },
    {
        "id": "d825a4b8.6eb338",
        "type": "cloudant in",
        "z": "5b153ee0.8e5f",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 454.0000915527344,
        "y": 577.3333854675293,
        "wires": [
            [
                "2ec0257d.3e2b6a"
            ]
        ]
    },
    {
        "id": "782027f9.68f718",
        "type": "inject",
        "z": "5b153ee0.8e5f",
        "name": "Inject",
        "topic": "start",
        "payload": "{\"From\": \"11234\", \"Body\": \"Reservation\", \"To\": \"+12312259665\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 86.00008010864258,
        "y": 545.0001354217529,
        "wires": [
            [
                "ea04634b.e4d58"
            ]
        ]
    },
    {
        "id": "ea04634b.e4d58",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "msg ",
        "func": "var content = msg.payload ,\n    obj   = check_valid_phone(content);\n\n\nnode.warn(\"When Twilwio SMS comes to system >>>>\");    \nnode.warn(msg.payload);\n\n\nvar payload = {\n    \"phone\": obj.phone,\n    \"body\" : obj.body\n};\n\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\nmsg.req_body = obj ;\nmsg.ask_chatbot = false;\nmsg.sms_body = content;\nreturn msg;\n\n\nfunction check_valid_phone(obj){\n    return {\n        phone: Number(obj.From.replace('+', '').trim()) ,\n        body : obj.Body \n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 293.0000991821289,
        "y": 529.3334321975708,
        "wires": [
            [
                "d825a4b8.6eb338"
            ]
        ]
    },
    {
        "id": "2ec0257d.3e2b6a",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\n//user = {}; //test obj used when we need to add details and task for stumped category if the user is already registred with system.\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload = {\n        _id         : randomString(32),\n        table       : \"users\",\n        access_token:  token(),\n        firstname   :  parseInt(phone),\n        lastname    :   \"\",\n        phone       :  parseInt(phone),\n        virtual_phone: parseInt(phone),\n        security_level: 0,\n        code:         rand(),\n        type: {\n            \"public\": \"public\"\n        },\n        data: {},\n        device_id: null,\n        push_accepted: 0\n    };\n    msg.userObj = msg.payload ;\n}else{\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.userObj = user ;\n}\n\nmsg.url     = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\nmsg.method  = \"GET\";\ndelete msg.headers;\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 635.0001602172852,
        "y": 577.3334465026855,
        "wires": [
            [
                "82128ef8.dabac"
            ]
        ]
    },
    {
        "id": "d8a60518.42bdf8",
        "type": "switch",
        "z": "5b153ee0.8e5f",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 982.6668472290039,
        "y": 527.0002479553223,
        "wires": [
            [
                "dce30e65.e7d03"
            ],
            [
                "534e094c.cb56d8"
            ]
        ]
    },
    {
        "id": "1c54705a.2964c",
        "type": "http in",
        "z": "5b153ee0.8e5f",
        "name": "Operator Response",
        "url": "/user_chatbot_response",
        "method": "post",
        "swaggerDoc": "",
        "x": 126.83333587646484,
        "y": 1004.0001878738403,
        "wires": [
            [
                "c7cae9b2.487848",
                "6f2fd02f.f6884"
            ]
        ]
    },
    {
        "id": "3548b45f.3e503c",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "When operator respond back to user SMS when Watson stumped or some other case",
        "info": "",
        "x": 329.0000305175781,
        "y": 919.0001974105835,
        "wires": []
    },
    {
        "id": "e1c62873.83f4d8",
        "type": "http in",
        "z": "5b153ee0.8e5f",
        "name": "From SMS",
        "url": "/twilio_sms",
        "method": "post",
        "swaggerDoc": "",
        "x": 80.83337020874023,
        "y": 484.6666774749756,
        "wires": [
            [
                "62bfefd0.f8d4a",
                "715133ec.04932c",
                "ea04634b.e4d58"
            ]
        ]
    },
    {
        "id": "75c704b.055edfc",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload , //should be IBM Watson node response\n    req_body    = msg.req_body,\n    db_records  = msg.db_records,\n    sms_body    = msg.sms_body,\n    portal_user = populate_portal_user(db_records.users);\n\n    //payload.daata = \"\";\n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic   = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n         msg.adminData = {topic: 12145644732, body: \"Please wait…\"};\n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }\nnode.warn(\"userObj >>>>>>>\");\nnode.warn(msg.userObj);\nmsg.userObj.data[portal_user._id] = {\n    \"context\": payload.context\n};\n\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_portal_user(users){\n    var portal_number = check_valid_phone(sms_body.To),\n        portal_user   = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == portal_number){\n            portal_user = users[itr]; \n        }\n    }\n    return portal_user;\n}\n\nfunction check_valid_phone(phone){\n   return Number(phone.replace('+', '').trim()) ;\n}",
        "outputs": "1",
        "noerr": 0,
        "x": 1621.8336791992188,
        "y": 568.3338947296143,
        "wires": [
            [
                "1311113e.3e01ff",
                "3e26ebcc.61db74",
                "6fba9344.d56f3c",
                "307061c0.dce51e"
            ]
        ]
    },
    {
        "id": "6fba9344.d56f3c",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_obj    = msg.task_obj,\n    new_details = [],\n    userObj     = msg.userObj;\n    \n    \nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"operator_type\": itr,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 1500\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar company_detail  = populate_company_detail() ,\n    watson_res  = populate_watson_response(chatbot, userObj), //show watson response under sms user\n    user_data   = populate_user_data(req_body, userObj); //to show detail under sms user\n    \nnew_details.push(company_detail);\nnew_details.push(watson_res);\nnew_details.push(user_data);\nnew_details.push(userObj); //save Watson context \n\nmsg.payload = {\n    docs: new_details\n};\n\nmsg.push_obj= {\n    group: \"Group 1\",\n    req_user_number: userObj.virtual_phone,\n    msg: req_body.body\n};\n\nnode.warn(msg);\ndelete msg.headers;\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\", task_obj._id], //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 1000\n    };    \n    \n    msg.user_page = obj;\n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 500\n    };\n    \n    msg.company_detail = obj;\n    return obj;\n}\n\nfunction populate_user_data(req_body, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"], //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 5,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()  \n        \n    };   \n    return obj;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1892.5003967285156,
        "y": 686.3335762023926,
        "wires": [
            [
                "f3a5224c.c75aa",
                "7b7cde6f.64413",
                "f127bac0.5f6798"
            ]
        ]
    },
    {
        "id": "4c791aaa.d87fd4",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 328.8333435058594,
        "y": 89.33333587646484,
        "wires": []
    },
    {
        "id": "534e094c.cb56d8",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "chatbot_payload",
        "func": "var textMsg  = msg.req_body.body,\n    payload  = msg.payload,\n    sms_body = msg.sms_body;\n\nvar db_records      = populate_record(payload.rows),\n    stumped_task    = populate_stumped_task(db_records.task_table, \"StumpedTask\"),\n    timeout_obj     = populate_obj(db_records.timeout, stumped_task.timeout_id); //static timeout_obj for ReminderBot company\n\n\nmsg.task_obj    = populate_task(db_records.task_table, msg.req_body.phone);\nmsg.userObj     = isEmpty(msg.userObj) ? {} : msg.userObj[0] ;\nmsg.timeout_obj = timeout_obj ;\nvar portal_user = populate_portal_user(db_records.users);\nmsg.payload     = {\n  text :   textMsg ,\n  context : getContext(msg.userObj, portal_user)\n};\nmsg.db_records = db_records;\ndelete msg.headers;\nreturn msg;\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\n\nfunction populate_stumped_task(task_tables, task_name){\n    var task_table = {};\n    if(isEmpty(task_tables)) return task_table;\n    if(isEmpty(task_name)) return task_name ;\n    \n    for(var itr in task_tables){\n        if(task_tables[itr].task_name == task_name){\n            task_table = task_tables[itr];\n        }\n    }\n    \n    return task_table;\n}\n\n\nfunction getContext(user, portal_user){\n    if(isEmpty(user.data) || isEmpty(portal_user)){\n        return {\n            first_name : user.firstname.toString(),\n            last_name  : user.lastname.toString(),\n            phone     : user.virtual_phone.toString(),\n            timeStamp : new Date().getTime()\n        };\n    }else{\n        \n        if(isEmpty(user.data[portal_user._id])){\n            return {\n                first_name : user.firstname.toString(),\n                last_name  : user.lastname.toString(),\n                phone     : user.virtual_phone.toString(),\n                timeStamp : new Date().getTime()\n            };\n        }else{\n            var context = user.data[portal_user._id].context;\n            if(!isEmpty(context)){\n                if(new Date().getTime() > ( Number(context.timeStamp) +  10800000 )){\n                    return {\n                        first_name : user.firstname.toString(),\n                        last_name  : user.lastname.toString(),\n                        phone     : user.virtual_phone.toString(),\n                        timeStamp : new Date().getTime()\n                    };\n                }else{\n                    context.first_name = user.firstname.toString() || context.first_name ;\n                    context.last_name  = user.lastname.toString() || context.last_name ;\n                    context.phone     = user.virtual_phone.toString() || context.phone ;\n                    context.timeStamp = new Date().getTime();\n                    return context ;\n                }\n            }else{\n                return {\n                    first_name : user.firstname.toString(),\n                    last_name  : user.lastname.toString(),\n                    phone     : user.virtual_phone.toString(),\n                    timeStamp : new Date().getTime()\n                };\n            }\n        }\n    }\n}\n\nfunction populate_task(list, task_name){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_detail(list, task_arr){\n    var obj = {}; //company_bot, first_responder, second_responder\n    for(var i =0; i<list.length; i++){\n        if( if_exists_in_arr(task_arr._id, list[i].task_id) ){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var timeout = [], users = [], groups = [], details = [], task_table = [], sorted_detail = [];\n    for(var itr in list){ \n        \n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"task_table\"){\n            task_table.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {groups: groups, timeout: timeout, users: users, details:sorted_detail, task_table:task_table};\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_portal_user(users){\n    var portal_number = check_valid_phone(sms_body.To),\n        portal_user   = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == portal_number){\n            portal_user = users[itr]; \n        }\n    }\n    return portal_user;\n}\n\nfunction check_valid_phone(phone){\n   return Number(phone.replace('+', '').trim()) ;\n}",
        "outputs": "1",
        "noerr": 0,
        "x": 1153.5001525878906,
        "y": 563.6669044494629,
        "wires": [
            [
                "32ad12a9.21c81e"
            ]
        ]
    },
    {
        "id": "82128ef8.dabac",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 824.666877746582,
        "y": 576.3334465026855,
        "wires": [
            [
                "d8a60518.42bdf8"
            ]
        ]
    },
    {
        "id": "e3f9bea4.5412c",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body,\n    db_records  = msg.db_records,\n    sms_body    = msg.sms_body,\n    portal_user = populate_portal_user(db_records.users);\n    \n    //payload.data = null ; //for the being all the IBM Watson messages are stumped.\n    if(isEmpty(payload.data)){\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\" ;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }else{\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: msg.payload};\n    }\n\nmsg.userObj.data[portal_user._id] = {\n    \"context\": payload.context \n};\n\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction populate_portal_user(users){\n    var portal_number = check_valid_phone(sms_body.To),\n        portal_user   = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == portal_number){\n            portal_user = users[itr]; \n        }\n    }\n    return portal_user;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction check_valid_phone(phone){\n   return Number(phone.replace('+', '').trim()) ;\n}",
        "outputs": "1",
        "noerr": 0,
        "x": 1778.8333587646484,
        "y": 352.66679859161377,
        "wires": [
            [
                "94d95440.3707d8",
                "1130a28f.ffb2cd",
                "9e0b1b5b.9f7ac8",
                "b4c44bf3.5ec4f8"
            ]
        ]
    },
    {
        "id": "7a9e27e6.8e3018",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2246.333671569824,
        "y": 341.33344650268555,
        "wires": [
            [
                "cc80c645.81b2d8"
            ]
        ]
    },
    {
        "id": "f127bac0.5f6798",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2109.5007553100586,
        "y": 671.666989326477,
        "wires": [
            [
                "414d3620.ce2578"
            ]
        ]
    },
    {
        "id": "94d95440.3707d8",
        "type": "twilio out",
        "z": "5b153ee0.8e5f",
        "service": "_ext_",
        "twilio": "7608a467.91ddac",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 2033.8332901000977,
        "y": 229.66676712036133,
        "wires": []
    },
    {
        "id": "80081675.069dd8",
        "type": "inject",
        "z": "5b153ee0.8e5f",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2431.667377471924,
        "y": 392.000301361084,
        "wires": [
            [
                "3b35dc92.0c9894"
            ]
        ]
    },
    {
        "id": "cc80c645.81b2d8",
        "type": "delay",
        "z": "5b153ee0.8e5f",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2420.3336791992188,
        "y": 341.6667785644531,
        "wires": [
            [
                "3b35dc92.0c9894"
            ]
        ]
    },
    {
        "id": "b97e3d25.e270b",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "Process Timeout at each 5 min",
        "info": "",
        "x": 136.1666717529297,
        "y": 190.3333282470703,
        "wires": []
    },
    {
        "id": "638c236.959b7dc",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "Respond when SMS Comes to Company virtual_number.",
        "info": "",
        "x": 227.0000228881836,
        "y": 390.0000982284546,
        "wires": []
    },
    {
        "id": "414d3620.ce2578",
        "type": "delay",
        "z": "5b153ee0.8e5f",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2329.500686645508,
        "y": 671.0004243850708,
        "wires": [
            [
                "d5ad4e71.3c40d"
            ]
        ]
    },
    {
        "id": "2ba7da1e.0f73a6",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "populate_records",
        "func": "var db_records  = msg.payload,\n    body        = msg.req_body,\n    name        = isEmpty(body.responder_user) ? \"Call Back\" : body.responder_user.firstname + \" \" + body.responder_user.lastname;\n\nif(isEmpty(db_records)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant view to get data\", data: null};\n}else{\n    var task_obj    = populate_tasks(db_records.rows, body.task_name);\n    node.warn(\"task\");\n    node.warn(task_obj);\n    if(isEmpty(task_obj)){\n        msg.api_status = \"API_ERROR\";\n        msg.statusCode = 400 ;\n        msg.payload    = {status: 400, msg: \"Unable to get the task_ids with task_name\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.userObj     = populate_userObj(db_records.rows, body.task_name);\n        msg.payload     = {\n            \"table\": \"details\",\n            \"task_id\": [task_obj._id],\n            \"child_task_id\": null,\n            \"user_id\": msg.userObj._id ,\n            \"from_user_id\": {\n                \"user_id\": body.responder_user.user_id, \n                \"first_name\": body.responder_user.firstname,\n                \"lastname\" : body.responder_user.lastname,\n                \"phone\": body.responder_user.phone\n            },\n            \"page_id\": task_obj.page_id,\n            \"from_page_id\": task_obj.from_page_id,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg,\n                \"annotation\": populate_Char(name.split(\" \"))\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.user_response = {   //this object is saved to list on user screen for whom message is .\n            \"table\": \"details\",\n            \"task_id\": [\"18_0\"],\n            \"child_task_id\": null,\n            \"user_id\": msg.userObj._id ,\n            \"from_user_id\": {\n                \"user_id\": msg.userObj._id, \n                \"first_name\": msg.userObj.firstname,\n                \"lastname\" : msg.userObj.lastname,\n                \"phone\": msg.userObj.phone\n            },\n            \"page_id\": 18,\n            \"from_page_id\": 0,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.api_response = {status: 200, msg: \"Record updated successfully\", data: msg.payload};\n    }\n}\nvar stumped_task        = populate_tasks(db_records.rows, \"StumpedTask\");\nmsg.task_obj            = task_obj ;\nmsg.timeout_obj         = populate_obj(db_records.rows, stumped_task.timeout_id); //static timeout_obj for ReminderBot company\nnode.warn(msg);\nreturn msg;\n\nfunction populate_Char(arr){\n  var str = \"\";\n  for(var itr in arr){\n    if(arr[itr]){\n      str += arr[itr].substr(0,1);\n    }\n  }\n  return \"..(\" + str + \")\";\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n\n   for(var itr in list){\n        if(list[itr].value.table == \"timeout\"){\n            if(list[itr].value._id == id){\n                return list[itr].value;\n            }\n        }\n    }\n    return {};\n}\n\nfunction populate_userObj(list, phone_number){\n    if(isEmpty(list)) return {};\n    if(isEmpty(phone_number)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            if(Number(list[itr].value.virtual_phone) == Number(phone_number)){\n                return list[itr].value;\n            }\n        }\n    }\n    return {};\n}\n\n\nfunction populate_tasks(list, task_name){\n    if(isEmpty(list)) return {};\n    if(isEmpty(task_name)) return {};\n    var task_obj = {};\n    for(var itr in list){\n        if(list[itr].value.table == \"task_table\"){\n            if(list[itr].value.task_name.toString() == task_name.toString()){\n                task_obj = list[itr].value;\n            }\n        }\n    }\n    return task_obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 728.0000534057617,
        "y": 961.0000486373901,
        "wires": [
            [
                "6ea7ee3e.439a1",
                "dbf881ac.d773d"
            ]
        ]
    },
    {
        "id": "a5f21bb.7184ee8",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 1081.8332748413086,
        "y": 951.0001354217529,
        "wires": []
    },
    {
        "id": "b4fcd1b3.b596d",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 526.8333587646484,
        "y": 960.6667156219482,
        "wires": [
            [
                "2ba7da1e.0f73a6"
            ]
        ]
    },
    {
        "id": "c7cae9b2.487848",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "req payload",
        "func": "msg.req_body    = msg.payload ;\nmsg.url         = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\nmsg.method      = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 351.99999237060547,
        "y": 959.0000495910645,
        "wires": [
            [
                "b4fcd1b3.b596d"
            ]
        ]
    },
    {
        "id": "6ea7ee3e.439a1",
        "type": "switch",
        "z": "5b153ee0.8e5f",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 889.0000991821289,
        "y": 1058.6667289733887,
        "wires": [
            [
                "a5f21bb.7184ee8"
            ],
            [
                "a6662c9e.f12b2",
                "7f16c9d3.4c72e8",
                "fc1fffaf.7c5be",
                "aef9bcd2.4f25",
                "f68711c3.235a4",
                "31605d22.83e102"
            ]
        ]
    },
    {
        "id": "31605d22.83e102",
        "type": "cloudant out",
        "z": "5b153ee0.8e5f",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1103.833641052246,
        "y": 1032.0003509521484,
        "wires": []
    },
    {
        "id": "aef9bcd2.4f25",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "SMS Response",
        "func": "var body    = msg.req_body;\nmsg.topic   = body.task_name;\nmsg.payload = body.msg;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1119.4999771118164,
        "y": 1154.3336734771729,
        "wires": [
            [
                "abd91859.36f948"
            ]
        ]
    },
    {
        "id": "abd91859.36f948",
        "type": "twilio out",
        "z": "5b153ee0.8e5f",
        "service": "_ext_",
        "twilio": "7608a467.91ddac",
        "from": "",
        "number": "",
        "name": "",
        "x": 1374.5,
        "y": 1143.0004014968872,
        "wires": []
    },
    {
        "id": "a5d99cce.5e644",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "Chatbot",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1543.500072479248,
        "y": 492.33342456817627,
        "wires": [
            [
                "e3f9bea4.5412c"
            ]
        ]
    },
    {
        "id": "7b7cde6f.64413",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "Add Details Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2127.0004119873047,
        "y": 617.3334884643555,
        "wires": []
    },
    {
        "id": "f68711c3.235a4",
        "type": "change",
        "z": "5b153ee0.8e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "user_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1146.499984741211,
        "y": 1092.0003576278687,
        "wires": [
            [
                "69eca464.d2c4dc"
            ]
        ]
    },
    {
        "id": "69eca464.d2c4dc",
        "type": "cloudant out",
        "z": "5b153ee0.8e5f",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1351.5000305175781,
        "y": 1091.6667795181274,
        "wires": []
    },
    {
        "id": "bf5bf2c6.92b85",
        "type": "http in",
        "z": "1f0c18ce.350d47",
        "name": "",
        "url": "/master_table",
        "method": "get",
        "swaggerDoc": "",
        "x": 100.83332824707031,
        "y": 78.66666412353516,
        "wires": [
            [
                "c194fc2c.708d2"
            ]
        ]
    },
    {
        "id": "c194fc2c.708d2",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 307.8333435058594,
        "y": 78.33333587646484,
        "wires": [
            [
                "6e938822.9ba708"
            ]
        ]
    },
    {
        "id": "6e938822.9ba708",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 472.8333435058594,
        "y": 78.66666412353516,
        "wires": []
    },
    {
        "id": "dce30e65.e7d03",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    phone   = msg.req_body.phone,\n    userObj = msg.userObj,\n    payload = msg.payload;\n\nif(isEmpty(payload.rows)){\n    node.warn(\"comes when Cloudant db doesn't return response\");\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to populate view to process_timeout\", data: null};\n}else{\n    var db_records      = populate_records(payload.rows),\n        stumped_task    = populate_stumped_task(db_records.task_table, \"StumpedTask\"),\n        timeout_obj     = populate_obj(db_records.timeout, stumped_task.timeout_id), //static timeout_obj for ReminderBot company\n        details         = populate_details(db_records.groups, timeout_obj);\n\n    msg.save_msg_detail = save_detail_for_user(textMsg, userObj);\n    msg.details_arr     = details;\n    msg.timeout_obj     = timeout_obj;\n}\n\nnode.warn(msg);\nmsg.db_records = db_records;\nreturn msg;\n\nfunction populate_stumped_task(task_tables, task_name){\n    var task_table = {};\n    if(isEmpty(task_tables)) return task_table;\n    if(isEmpty(task_name)) return task_name ;\n    \n    for(var itr in task_tables){\n        if(task_tables[itr].task_name == task_name){\n            task_table = task_tables[itr];\n        }\n    }\n    \n    return task_table;\n}\n\nfunction populate_records(list){\n    var timeout = [], users = [], groups = [], details = [], task_table = [];\n    for(var itr in list){ \n        \n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"task_table\"){\n            task_table.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {groups: groups, timeout: timeout, users: users, details:details, task_table:task_table};\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_details(list, timeout){\n    var details = [];\n    \n    if(isEmpty(list)) return [];\n\n    //original user detail for company\n    var original_to_page_id = new Date().getTime() + 600;\n    var original_detail     = create_original_detail(original_to_page_id, timeout);\n    details.push(original_detail);\n    \n    return details;\n}\n\nfunction create_original_detail(to_page_id, timeout){\n    var detail_obj = {};\n    \n    detail_obj._id                  = randomString(32);\n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"26\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 26; //Company stumped category page_id\n    detail_obj.from_page_id                     = 2;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\",\n        \"company_bot_detail\": \"company_bot_detail\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : (userObj.firstname + userObj.lastname ) || phone\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n    detail_obj.myTimeout                        = timeout;\n    \n    msg.company_detail = detail_obj;\n    return detail_obj;\n}\n\nfunction save_detail_for_user(msg, userObj){\n    var detail_obj = {};\n    detail_obj._id                  = randomString(32);\n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"18_0\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = null; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 18; //Company stumped category page_id\n    detail_obj.from_page_id                     = 5;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : msg\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n\n    return [detail_obj];\n}\n\nfunction populate_assistants(users, group_id){\n    var list = [];\n    \n    if(isEmpty(users)) return list;\n    if(isEmpty(group_id)) return list;\n    \n    for(var itr in users){\n        if(users[itr].data){\n            if(group_id in users[itr].data.groups){\n                list.push(users[itr]);\n            }\n        }\n    }\n    return list;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1155.1664733886719,
        "y": 494.66674518585205,
        "wires": [
            [
                "7d9dc3e5.dc3b5c"
            ]
        ]
    },
    {
        "id": "7d9dc3e5.dc3b5c",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Optional Task",
        "func": "var details     = JSON.parse(JSON.stringify(msg.details_arr)),\n    userObj     = msg.userObj,\n    new_tasks   = [];\n\nfor(var itr in details){\n    var obj = {\n        \"_id\": randomString(32),\n        \"table\": \"task_table\",\n        \"base_template\": false,\n        \"user_id\": details[itr].user_id,\n        \"task_name\": details[itr].user_incoming.message, \n        \"page_id\": details[itr].to_page_id,\n        \"from_page_id\": details[itr].page_id,\n        \"parent_id\": details[itr].task_id,\n        \"header_template_id\": \"99_h\",\n        \"detail_template_id\": \"99_d\",\n        \"footer_template_id\": \"99_f\",\n        \"timeout_id\": details[itr].myTimeout,\n        \"location_ids\": {},\n        \"child_default_task_id\": null,\n        \"child_default_task_name\": null,\n        \"date_created\": new Date().toJSON(),\n        \"category\": \"stumped\",\n        \"status\": \"true\",\n        \"additional_data_fn\": null,\n        \"optional_data\": {},\n        \"required_data\": {},\n        \"offline_expiration_time\": 0,\n        \"display_if_empty\": \"true\",\n        \n        \"type\": details[itr].type,\n        \"image\": \"\"\n    };\n    new_tasks.push(obj);\n}\n\nmsg.task_arr = new_tasks;\n\nvar textMsg = msg.req_body.body;\nmsg.method = \"POST\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot\";\nmsg.payload= {\n    text : textMsg,\n    context : {\n        first_name: userObj.firstname || \"Anynomous\",\n        last_name : userObj.lastname  || \"User\",\n        phone     : userObj.phone     || \"\",\n        timeStamp : new Date().getTime()\n    }\n};\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1362.1665649414062,
        "y": 494.66672229766846,
        "wires": [
            [
                "a5d99cce.5e644"
            ]
        ]
    },
    {
        "id": "9e0b1b5b.9f7ac8",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response ,\n    userObj     = msg.userObj ,\n    task_obj    = isEmpty(msg.task_arr) ? {} :  msg.task_arr[0] , \n    new_details = [],\n    req_body    = msg.req_body;\n\nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 1,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"operator_type\": itr,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 1500\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar watson_res      = populate_watson_response(chatbot, userObj),\n    company_detail  = populate_company_detail();\n    \nmsg.save_msg_detail.push(watson_res);\nnew_details.push(company_detail);\nnew_details.push(userObj); //save Watson context ;\n\nmsg.new_details = new_details;\nmsg.payload = {\n    docs: flatten([msg.details_arr, msg.task_arr, msg.new_details, msg.save_msg_detail])\n};\n\nmsg.push_obj= {\n    group: \"Group 1\",\n    req_user_number: userObj.virtual_phone,\n    msg: chatbot.data \n};\nnode.warn(msg);\nreturn msg;\n\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_obj._id]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 1000\n    }; \n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        //\"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 500\n    };\n    return obj;\n}\n\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2032.8332901000977,
        "y": 280.6667709350586,
        "wires": [
            [
                "127a9a40.9d5246",
                "7a9e27e6.8e3018",
                "896f4737.cd2548"
            ]
        ]
    },
    {
        "id": "ebda56af.b1ddd8",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "update_message_schedule",
        "func": "var payload_data = msg.payload_data;\nif(payload_data.type == \"old_message\"){\n    msg.process_type = \"update_schedule\";\n    msg.payload = {\n        query : \"table:details AND _id:\" + payload_data.detail_id ,\n        sort  : \"_id<string>\"\n    };    \n}else{\n    msg.process_type = \"new_schedule\";\n    msg.payload = {\n        query : \"table:users\" ,\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1319.4999771118164,
        "y": 2009.00022315979,
        "wires": [
            [
                "173ecfe7.96fa7",
                "57fb89c5.147d88"
            ]
        ]
    },
    {
        "id": "8bd43181.d3b48",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1670.5,
        "y": 2055.667236328125,
        "wires": [
            [
                "3e14c4c9.69a48c"
            ]
        ]
    },
    {
        "id": "3e14c4c9.69a48c",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "payload",
        "func": "var payload_data = msg.payload_data;\n    scheduled_date = populate_scheduled_time(payload_data);\n    \nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Unable to find details for this msg\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    var detail_obj = msg.payload[0];\n    \n    if(isEmpty(detail_obj.user_incoming)){\n        msg.api_status = \"API_ERROR\";\n        msg.statusCode = 400 ;\n        msg.payload    = {status: 400, msg: \"Unable to udpate details msg\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        detail_obj.user_incoming.message = payload_data.message ;\n        detail_obj.processed = 0 ;\n        detail_obj.status = 1 ;\n        detail_obj.due_date = scheduled_date;\n        msg.payload = detail_obj;\n        \n        msg.api_response = {status:200, msg: \"Record updated successfully\", data: detail_obj};\n    }\n\n}\nreturn msg;\n\nfunction populate_scheduled_time(data){\n    var moment   = global.get('moment'),\n    momentTz = global.get('moment_tz');\n    \n    if(isEmpty(data.timzone)){\n\t\tdata.timzone = \"America/New_York\";\n\t}else{\n\t\tdata.timzone = sechduleData.timzone;\n\t}\n\treturn moment().tz(data.timzone).valueOf();\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1833.5000686645508,
        "y": 2055.3336791992188,
        "wires": [
            [
                "777ea372.d8e80c"
            ]
        ]
    },
    {
        "id": "777ea372.d8e80c",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1982.5001907348633,
        "y": 2063.666990876198,
        "wires": [
            [
                "9a4a71fa.43b29"
            ],
            [
                "88dc615e.77fdc",
                "7477833e.ea5bdc"
            ]
        ]
    },
    {
        "id": "88dc615e.77fdc",
        "type": "cloudant out",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2173.8333702087402,
        "y": 2059.0002059936523,
        "wires": []
    },
    {
        "id": "7477833e.ea5bdc",
        "type": "change",
        "z": "a9a5d22f.5e6aa",
        "name": "response",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2164.8333740234375,
        "y": 2108.3337059020996,
        "wires": [
            [
                "7fb07947.ef4868"
            ]
        ]
    },
    {
        "id": "7fb07947.ef4868",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2322.8334522247314,
        "y": 2105.666812300682,
        "wires": []
    },
    {
        "id": "173ecfe7.96fa7",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "process_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update_schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "new_schedule",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1508,
        "y": 2055,
        "wires": [
            [
                "8bd43181.d3b48"
            ],
            [
                "ff2ac1a8.0bf3"
            ]
        ]
    },
    {
        "id": "104866a7.5ab949",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_records",
        "func": "var payload         = msg.payload_data,\n    users           = msg.payload,\n    company_bot     = populate_company(msg.access_token, users),\n    user_obj        = populate_user(payload, users),\n    scheduled_time  = populate_scheduled_time(payload),\n    company_screen  = populate_company_data(payload),\n    user_screen     = populate_user_data(payload),\n    final_result    = [] ;\n    \n    \nfinal_result.push(company_screen);\nfinal_result.push(user_screen);\nmsg.user_obj = user_obj;\nmsg.payload = {\n    \"docs\": final_result\n};\nmsg.response = {\n    company_detail : company_screen,\n    user_detail : user_screen\n};\nreturn msg;\n\nfunction populate_company(access_token, list){\n    var obj = {};\n    \n    if(isEmpty(access_token)) return obj;\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].access_token == access_token){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user(task_obj, list){\n    var obj= {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(task_obj)) return obj;\n    \n    for(var itr in list){\n        if(Number(list[itr].virtual_phone) == Number(task_obj.task_name)){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_company_data(data){\n    var name = company_bot.firstname + \" \" + company_bot.lastname;\n    return {\n        \"table\": \"details\",\n        \"task_id\": [data.task_id],\n        \"child_task_id\": null,\n        \"user_id\": user_obj._id ,\n        \"from_user_id\": {\n            \"user_id\": company_bot._id, \n            \"first_name\": company_bot.firstname,\n            \"lastname\" : company_bot.lastname,\n            \"phone\": company_bot.phone\n        },\n        \"page_id\": data.page_id,\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 1,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"date_created\": new Date().toJSON(),\n        \"due_date\": scheduled_time,\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\" : \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\"   : data,\n            \"message\": data.message,\n            \"watson\" : data.message,\n            \"annotation\": populate_Char(name.split(\" \"))\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {\n            \"active\": 1,\n            \"unread\": 0\n          },\n        \"count\": {\n            \"active\": 1,\n            \"unread\": 1\n        },\n        \"count_if\": {\n            \"active\": 1,\n            \"unread\": 0\n        },\n        \"createdAt\": scheduled_time\n    };\n}\n\nfunction populate_user_data(data){\n    return {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"],\n        \"child_task_id\": null,\n        \"user_id\": user_obj._id ,\n        \"from_user_id\": {\n            \"user_id\": user_obj._id, \n            \"first_name\": user_obj.firstname,\n            \"lastname\" : user_obj.lastname,\n            \"phone\": user_obj.virtual_phone\n        },\n        \"page_id\": 18,\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 2,\n        \"status\": 2,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"due_date\": scheduled_time,\n        \"priority\": 1,\n        \"type\": {\n            \"public\" : \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\"   : data,\n            \"message\": data.message,\n            \"watson\" : data.message\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {\n            \"active\": 1,\n            \"unread\": 0\n          },\n        \"count\": {\n            \"active\": 1,\n            \"unread\": 1\n        },\n        \"count_if\": {\n            \"active\": 1,\n            \"unread\": 0\n        },\n        \"createdAt\": scheduled_time\n    };\n}\n\nfunction populate_scheduled_time(data){\n    var moment   = global.get('moment'),\n        momentTz = global.get('moment_tz');\n    \n    if(isEmpty(data.timzone)){\n\t\tdata.timzone = \"America/New_York\";\n\t}else{\n\t\tdata.timzone = sechduleData.timzone;\n\t}\n\t\n\treturn moment(data.sechduleDate).tz(data.timzone).valueOf(); \n}\n\n\nfunction populate_Char(arr){\n  var str = \"\";\n  for(var itr in arr){\n    if(arr[itr]){\n      str += arr[itr].substr(0,1);\n    }\n  }\n  return \"..(\" + str + \")\";\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1854.0000267028809,
        "y": 2138.000047683716,
        "wires": [
            [
                "78831c9c.175e44",
                "38734174.e7012e",
                "130175ba.2460ba"
            ]
        ]
    },
    {
        "id": "ff2ac1a8.0bf3",
        "type": "cloudant in",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1670.5000114440918,
        "y": 2104.6667098999023,
        "wires": [
            [
                "104866a7.5ab949"
            ]
        ]
    },
    {
        "id": "38734174.e7012e",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2053.8336143493652,
        "y": 2173.333547592163,
        "wires": [
            [
                "d46101be.59773"
            ]
        ]
    },
    {
        "id": "d46101be.59773",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "res",
        "func": "msg.payload = {\n    status: 200,\n    msg: \"Message schedule successfully.\",\n    payload: msg.response\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2216.8333435058594,
        "y": 2192.9999771118164,
        "wires": [
            [
                "8163b60e.2f4258",
                "ebcf81c.5c8f98"
            ]
        ]
    },
    {
        "id": "8163b60e.2f4258",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2358.833637237549,
        "y": 2170.6667976379395,
        "wires": []
    },
    {
        "id": "a5f281ee.34379",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "delete_schedule_message",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1327.166748046875,
        "y": 2234.0000381469727,
        "wires": [
            [
                "62a8067b.0cf2b8"
            ]
        ]
    },
    {
        "id": "62a8067b.0cf2b8",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot",
        "tls": "",
        "x": 1519.88671875,
        "y": 2292.6796875,
        "wires": [
            [
                "61ff3bac.dfa294"
            ]
        ]
    },
    {
        "id": "61ff3bac.dfa294",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "populate_records",
        "func": "var payload     = msg.payload ,\n    db_records  = populate_db_records(payload.rows),\n    req_data    = msg.payload_data ;      \n\n    var company_detail  = populate_company_detail(req_data, db_records.details),\n        user_detail     = populate_user_detail(req_data, db_records.details);\n\nnode.warn(company_detail);\nnode.warn(user_detail);\n\nif(isEmpty(company_detail) && isEmpty(user_detail)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to delete record\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.statusCode      = 200;\n    msg.url             = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs\";\n    msg.method          = \"POST\";\n    msg.payload         = {\n        docs : [{\n            \"_id\": company_detail._id,\n            \"_rev\": company_detail._rev,\n            \"_deleted\": true\n        },{\n            \"_id\": user_detail._id,\n            \"_rev\": user_detail._rev,\n            \"_deleted\": true\n        }]  \n    };\n    msg.api_response    = {status: 200, msg: \"Record deleted successfully\", data: null};\n}\nreturn msg;\n\nfunction populate_company_detail(req_data, details){\n    var obj = {};\n    if(isEmpty(req_data)) return obj;\n    if(isEmpty(details)) return obj;\n    \n    for(var itr in details){\n        if(details[itr]._id == req_data.detail_id){\n            obj = details[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user_detail(req_data, details){\n    var obj = {};\n    if(isEmpty(req_data)) return obj;\n    if(isEmpty(details)) return obj;\n    \n    for(var itr in details){\n        var message     = isEmpty(details[itr].user_incoming) ? null : details[itr].user_incoming.message ,\n            dateStamp   = isEmpty(req_data.sechduleDate) ? new Date().getTime() : new Date(req_data.sechduleDate).getTime();\n            \n        if( (message == req_data.message) && (details[itr].createdAt == dateStamp) ){\n            obj =   details[itr] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_db_records(list){\n    var details = [], users = [];\n\n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1712.875,
        "y": 2292.23046875,
        "wires": [
            [
                "ef97801e.ae1ac"
            ]
        ]
    },
    {
        "id": "ef97801e.ae1ac",
        "type": "switch",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1896.8828430175781,
        "y": 2432.1681051254272,
        "wires": [
            [
                "29d5e11b.a82c3e"
            ],
            [
                "236a4618.d0f5fa"
            ]
        ]
    },
    {
        "id": "29d5e11b.a82c3e",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2033.1328430175781,
        "y": 2397.6368551254272,
        "wires": []
    },
    {
        "id": "236a4618.d0f5fa",
        "type": "http request",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2055.1291999816895,
        "y": 2467.6763162612915,
        "wires": [
            [
                "304ee48f.3f95dc"
            ]
        ]
    },
    {
        "id": "304ee48f.3f95dc",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "res",
        "func": "if(msg.payload.error) {\n    msg.payload = {status: msg.statusCode, msg: \"Unable to delete record.\", data:null};\n}else{\n    msg.payload = msg.api_response;    \n}\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2211.140655517578,
        "y": 2468.9845113754272,
        "wires": [
            [
                "92ecef04.faadc"
            ]
        ]
    },
    {
        "id": "92ecef04.faadc",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2346.140655517578,
        "y": 2468.3985738754272,
        "wires": []
    },
    {
        "id": "393c6bd0.b46de4",
        "type": "http response",
        "z": "60d983f8.559f7c",
        "name": "response",
        "x": 694.125,
        "y": 1036.8984375,
        "wires": []
    },
    {
        "id": "825bcb33.cbb6f8",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2580.000518798828,
        "y": 281.0002088546753,
        "wires": []
    },
    {
        "id": "f3a5224c.c75aa",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Notify WSS ",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    task_obj        = msg.task_obj,\n    bot_data        = msg.chatbot_response,\n    gorup_ids       = populate_group_ids(timeout_list);\n    \n    \n//msg.url     = \"http://drilist-socket-server.mybluemix.net/notify_connected_users\";\nmsg.url     = \"http://mastersoftwaretechnologies.com:9028/notify_connected_users\";\nmsg.method  = \"POST\";\n\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\": [18, task_obj.page_id],\n        \"bot_data\": bot_data,\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\ndelete msg.headers;\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2108.5007553100586,
        "y": 730.6669321060181,
        "wires": [
            [
                "6b9331d1.37472"
            ]
        ]
    },
    {
        "id": "a8534779.110968",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2478.667625427246,
        "y": 826.6671199798584,
        "wires": []
    },
    {
        "id": "127a9a40.9d5246",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Notify WSS",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    company_detail  = msg.company_detail ,\n    bot_data        = msg.chatbot_response,\n    gorup_ids       = populate_group_ids(timeout_list);\n\n//msg.url     = \"http://drilist-socket-server.mybluemix.net/notify_connected_users\";\nmsg.url     = \"http://mastersoftwaretechnologies.com:9028/notify_connected_users\";\nmsg.method  = \"POST\";\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\":[18 , company_detail.page_id],\n        \"bot_data\": bot_data,\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\ndelete msg.headers;\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2246.166675567627,
        "y": 281.66677474975586,
        "wires": [
            [
                "24f6dd68.c068a2"
            ]
        ]
    },
    {
        "id": "896f4737.cd2548",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "Add Details Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2267.666675567627,
        "y": 232.33343887329102,
        "wires": []
    },
    {
        "id": "7f16c9d3.4c72e8",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "Notify WSS",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    task_obj        = msg.task_obj,\n    body            = msg.req_body,\n    gorup_ids       = populate_group_ids(timeout_list);\n\n// node.warn(\"body >>>>>>>>>\");    \n// node.warn(body);    \n//msg.url     = \"http://drilist-socket-server.mybluemix.net/added_data_from_operator\";\nmsg.url     = \"http://mastersoftwaretechnologies.com:9028/added_data_from_operator\";\nmsg.method  = \"POST\";\n\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\": [18, task_obj.page_id],\n        \"msgBody\": body.msg,\n        \"user_id\": msg.userObj._id\n    },\n    \"other_user\": {}\n};\nnode.warn(\"going to send to socket-server\");\nnode.warn(msg.payload);\ndelete msg.headers;\nreturn msg;\n\n\n\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1113.6667785644531,
        "y": 1304.000238418579,
        "wires": [
            [
                "80e7d0f0.5f563"
            ]
        ]
    },
    {
        "id": "80e7d0f0.5f563",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1297.9999771118164,
        "y": 1302.6669006347656,
        "wires": [
            [
                "d64d864d.ea7208"
            ]
        ]
    },
    {
        "id": "d64d864d.ea7208",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1492.833381652832,
        "y": 1304.0006465911865,
        "wires": []
    },
    {
        "id": "3e26ebcc.61db74",
        "type": "twilio out",
        "z": "5b153ee0.8e5f",
        "service": "_ext_",
        "twilio": "7608a467.91ddac",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1892.8342208862305,
        "y": 600.0003204345703,
        "wires": []
    },
    {
        "id": "715133ec.04932c",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 293.99999237060547,
        "y": 445.3333787918091,
        "wires": []
    },
    {
        "id": "82369a29.884148",
        "type": "debug",
        "z": "60d983f8.559f7c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 892.8333435058594,
        "y": 696.6666669845581,
        "wires": []
    },
    {
        "id": "dbf881ac.d773d",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 907.0000343322754,
        "y": 898.3333864212036,
        "wires": []
    },
    {
        "id": "6f2fd02f.f6884",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 333.5000190734863,
        "y": 1029.6668176651,
        "wires": []
    },
    {
        "id": "9a4a71fa.43b29",
        "type": "http response",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "x": 2150.333251953125,
        "y": 2017.333251953125,
        "wires": []
    },
    {
        "id": "130175ba.2460ba",
        "type": "function",
        "z": "a9a5d22f.5e6aa",
        "name": "Send SMS",
        "func": "var paylaod = msg.user_obj,\n    data    = msg.payload_data ;\n\nmsg.topic = paylaod.virtual_phone || 12145644732;\nmsg.payload = data.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2054.5,
        "y": 2241.666766166687,
        "wires": [
            [
                "ce90bf39.2291e"
            ]
        ]
    },
    {
        "id": "ce90bf39.2291e",
        "type": "twilio out",
        "z": "a9a5d22f.5e6aa",
        "service": "_ext_",
        "twilio": "308ec63b.864e1a",
        "from": "",
        "number": "",
        "name": "",
        "x": 2255.1664810180664,
        "y": 2243.3335514068604,
        "wires": []
    },
    {
        "id": "57fb89c5.147d88",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1518.1666259765625,
        "y": 1980.3333435058594,
        "wires": []
    },
    {
        "id": "78831c9c.175e44",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 2022.1666259765625,
        "y": 2292.3333740234375,
        "wires": []
    },
    {
        "id": "ebcf81c.5c8f98",
        "type": "debug",
        "z": "a9a5d22f.5e6aa",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2381.833553314209,
        "y": 2207.9999685287476,
        "wires": []
    },
    {
        "id": "e0b32d29.10188",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "Step 2 timeout processing",
        "func": "var payload         = msg.payload ,\n    db_records      = populate_records(payload.rows);\n    msg.company_page_id = null;\n    \n\nmsg.isDetailProcessed = false;\nmsg.from_user = {} ;\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1; //2 refres to complete\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                    \n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n\n                    newDetailObj.processed                      = 1; //2 refres to complete\n                    newDetailObj.status                         = 2; //2 refres to complete\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    \n                    msg.company_page_id = details[itr].page_id ;\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            msg.from_user = newDetailObj.from_user_id ; //just set the from_user object which is used in push notificatino fn node to get user number\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    \n    if(isEmpty(groupUsers)) return obj;\n    \n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    if(isEmpty(group_id)) return obj;\n    \n    for(var counter in users){\n        if(!isEmpty(users[counter].data)){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        device_token: users[counter].device_token,\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 281.000111579895,
        "wires": [
            [
                "82fc6a73.500e68",
                "5269bef6.b3c07"
            ]
        ]
    },
    {
        "id": "5269bef6.b3c07",
        "type": "switch",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 512.6665878295898,
        "y": 263.71370220184326,
        "wires": [
            [
                "e91ee9e2.ef2a68",
                "67ecb9d1.4a9fc8"
            ]
        ]
    },
    {
        "id": "67ecb9d1.4a9fc8",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        node.warn(\"under the 2nd group responder fn >>>>>>>>\");\n        node.warn(responder_group);\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(userObj){\n    if(isEmpty(userObj)){\n        return [];\n    }else{\n        var ids = [];\n        for(var itr in userObj){\n            if(!isEmpty(userObj[itr].device_token)){\n                let tokens = userObj[itr].device_token;\n                for(let token in tokens){\n                    if(tokens[token].device_id !== \"Web View\"){\n                        ids.push(tokens[token].device_id);\n                    }\n                }\n            }\n        }\n        \n        return ids;\n    }\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 682.0001754760742,
        "y": 246.3802843093872,
        "wires": [
            [
                "68a28725.78b7e8"
            ]
        ]
    },
    {
        "id": "e91ee9e2.ef2a68",
        "type": "http request",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 681.0001754760742,
        "y": 288.71370124816895,
        "wires": [
            [
                "9e7d2d3a.e6833"
            ]
        ]
    },
    {
        "id": "9e7d2d3a.e6833",
        "type": "debug",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1032.0001525878906,
        "y": 458.71375846862793,
        "wires": []
    },
    {
        "id": "68a28725.78b7e8",
        "type": "switch",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 860.0001754760742,
        "y": 244.3802900314331,
        "wires": [
            [
                "791b220c.3a977c"
            ],
            [
                "53d9fdc.d4d0b04"
            ],
            [
                "9012b2e6.612a4"
            ],
            [
                "81f3d92d.bf3c98"
            ],
            [
                "9e7d2d3a.e6833"
            ]
        ]
    },
    {
        "id": "82fc6a73.500e68",
        "type": "debug",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 511.33353424072266,
        "y": 384.3803777694702,
        "wires": []
    },
    {
        "id": "81f3d92d.bf3c98",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1042.0001525878906,
        "y": 327.3803815841675,
        "wires": [
            []
        ]
    },
    {
        "id": "9012b2e6.612a4",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1039.000129699707,
        "y": 270.3803253173828,
        "wires": [
            []
        ]
    },
    {
        "id": "53d9fdc.d4d0b04",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1040.000129699707,
        "y": 193.38032150268555,
        "wires": [
            [
                "4a3667c8.ad74f8"
            ]
        ]
    },
    {
        "id": "791b220c.3a977c",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "PUSH",
        "func": "var page_id         = msg.company_page_id ,\n    push_data       = msg.payload ,\n    push_obj        = msg.push_obj;\n    \n//msg.url = \"http://drilist-socket-server.mybluemix.net/send_push_notification\";\nmsg.url = \"http://mastersoftwaretechnologies.com:9028/send_push_notification\";\nmsg.method = \"POST\";\n\n//live server Distribution credentails...    \nvar appGuid = \"eacb330f-584b-4087-b18e-30fc8d625e50\",\n    appSecrect = \"a0c7ee14-d1cf-4ea0-b325-aaa30b7e996e\" ;\n\n//dev server Distribution credentails...    \n// var appGuid = \"f9fb70f7-e91f-4e62-b713-a609fb81be59\",\n//     appSecrect = \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\" ;\n\n//Delevlopment server dev credentails...    \n// var appGuid = \"4419942e-8f02-4527-8794-c24b42c584b5\",\n//     appSecrect = \"c769179f-e1ec-4598-b642-8f5dfd802e4c\" ;\n    \nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/\" + appGuid +\"/messages\",\n    \"appSecrect\": appSecrect,\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": populatePushMessage(push_obj, msg.from_user, push_data)\n\t\t}, \n\t\t\"target\": {      \n\t\t\t\"deviceIds\": isArray(push_data.push) ? push_data.push : [push_data.push]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : page_id || 2 ,\n\t\t\t\t\t\"user_page_id\": 18,\n\t\t\t\t\t\"group\": push_obj.group\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : page_id || 2 ,\n\t\t\t\t\t\"user_page_id\": 18,\n\t\t\t\t\t\"group\": push_obj.group\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\ndelete msg.headers;\nreturn msg;\n\nfunction populatePushMessage(push_obj, from_user, push_data){\n    if(isEmpty(push_obj) || isEmpty(from_user)) return push_data.msg;\n    if(push_obj.group == \"Group 1\"){\n        return push_obj.group + \" - \" + push_obj.req_user_number + \"-\" + push_obj.msg ;\n    }else{\n        return push_obj.group + \" - \" + from_user.phone + \"-\" + push_data.msg ;\n    }\n}\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1040.499984741211,
        "y": 90.00008773803711,
        "wires": [
            [
                "dee7f368.ee141"
            ]
        ]
    },
    {
        "id": "dee7f368.ee141",
        "type": "http request",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1209.333122253418,
        "y": 85.33334636688232,
        "wires": [
            [
                "8423ce41.15acd"
            ]
        ]
    },
    {
        "id": "8423ce41.15acd",
        "type": "debug",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1398.3331451416016,
        "y": 84,
        "wires": []
    },
    {
        "id": "678d7a77.acc754",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.8334732055664,
        "y": 150.71365451812744,
        "wires": [
            [
                "4a3667c8.ad74f8"
            ]
        ]
    },
    {
        "id": "4a3667c8.ad74f8",
        "type": "switch",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1228.8334732055664,
        "y": 229.71365451812744,
        "wires": [
            [
                "21fefa84.9f1d66"
            ],
            []
        ]
    },
    {
        "id": "21fefa84.9f1d66",
        "type": "function",
        "z": "6afadd8f.4efcd4",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1396.8341903686523,
        "y": 223.71366214752197,
        "wires": [
            [
                "678d7a77.acc754",
                "babc4fb0.4b429",
                "6483acb.b2d3554"
            ]
        ]
    },
    {
        "id": "babc4fb0.4b429",
        "type": "debug",
        "z": "6afadd8f.4efcd4",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1599.0001678466797,
        "y": 206.04701709747314,
        "wires": []
    },
    {
        "id": "6483acb.b2d3554",
        "type": "twilio out",
        "z": "6afadd8f.4efcd4",
        "service": "_ext_",
        "twilio": "308ec63b.864e1a",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 1620.1669158935547,
        "y": 251.71368503570557,
        "wires": []
    },
    {
        "id": "cd000105.dad6b",
        "type": "subflow:6afadd8f.4efcd4",
        "z": "5b153ee0.8e5f",
        "name": "Step2 Timeout processing",
        "x": 422.5000915527344,
        "y": 245.33347034454346,
        "wires": []
    },
    {
        "id": "6259a44e.05d5ec",
        "type": "http request",
        "z": "6afadd8f.4efcd4",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/set2TimeoutView",
        "tls": "",
        "x": 136.0000114440918,
        "y": 194.0000123977661,
        "wires": [
            [
                "e0b32d29.10188"
            ]
        ]
    },
    {
        "id": "3b35dc92.0c9894",
        "type": "subflow:6afadd8f.4efcd4",
        "z": "5b153ee0.8e5f",
        "name": "Step2 Timeout processing",
        "x": 2714.1669311523438,
        "y": 359.0000915527344,
        "wires": []
    },
    {
        "id": "5f1e90e9.659df",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "When a new users send Sms to system number",
        "info": "",
        "x": 1252.3333358764648,
        "y": 443.00004291534424,
        "wires": []
    },
    {
        "id": "1ab9a98d.fec0b6",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "When user number is already exists in system database.",
        "info": "",
        "x": 1283.3334045410156,
        "y": 667.000205039978,
        "wires": []
    },
    {
        "id": "a10153ce.6f1e6",
        "type": "http in",
        "z": "5b153ee0.8e5f",
        "name": "From App",
        "url": "/ask_chatbot",
        "method": "post",
        "swaggerDoc": "",
        "x": 78.1666488647461,
        "y": 618.6666841506958,
        "wires": [
            [
                "28ccb142.8c940e",
                "b9e5ade7.bf93"
            ]
        ]
    },
    {
        "id": "28ccb142.8c940e",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "msg",
        "func": "var payload = msg.payload;\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\n\nmsg.req_body = payload ;\nmsg.ask_chatbot = true; \nmsg.sms_body = {\n  \"To\": payload.portal_number  \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290.1666488647461,
        "y": 616.3333711624146,
        "wires": [
            [
                "d825a4b8.6eb338"
            ]
        ]
    },
    {
        "id": "bcb6b0df.cf15f",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\nmsg.statusCode = 200 ;\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\ndelete msg.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2041.5002250671387,
        "y": 524.0004272460938,
        "wires": [
            [
                "226f6be0.607424"
            ]
        ]
    },
    {
        "id": "226f6be0.607424",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 2231.500457763672,
        "y": 532.8050661087036,
        "wires": []
    },
    {
        "id": "727fdc77.11c504",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\ndelete msg.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2194.8330307006836,
        "y": 171.3335313796997,
        "wires": [
            [
                "4523606c.21015"
            ]
        ]
    },
    {
        "id": "4523606c.21015",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 2371.833450317383,
        "y": 171.13823699951172,
        "wires": []
    },
    {
        "id": "1130a28f.ffb2cd",
        "type": "switch",
        "z": "5b153ee0.8e5f",
        "name": "",
        "property": "ask_chatbot",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2018.666706085205,
        "y": 171.3333568572998,
        "wires": [
            [
                "727fdc77.11c504"
            ]
        ]
    },
    {
        "id": "1311113e.3e01ff",
        "type": "switch",
        "z": "5b153ee0.8e5f",
        "name": "",
        "property": "ask_chatbot",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1868.3334045410156,
        "y": 524.0001754760742,
        "wires": [
            [
                "bcb6b0df.cf15f"
            ]
        ]
    },
    {
        "id": "d55c1062.b8f7",
        "type": "comment",
        "z": "5b153ee0.8e5f",
        "name": "When user send message from Application.",
        "info": "",
        "x": 187.66666412353516,
        "y": 724.3334484100342,
        "wires": []
    },
    {
        "id": "b9e5ade7.bf93",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 288.6667060852051,
        "y": 668.3334455490112,
        "wires": []
    },
    {
        "id": "c4dd6137.b61e1",
        "type": "function",
        "z": "f59e7fb8.64e18",
        "name": "Chatbot push",
        "func": "var user = msg.userObj ,\n    data = msg.payload ,\n    body = msg.req_body ;\n\n//live server Distribution credentails...    \nvar appGuid = \"eacb330f-584b-4087-b18e-30fc8d625e50\",\n    appSecrect = \"a0c7ee14-d1cf-4ea0-b325-aaa30b7e996e\" ;\n\n//dev server Distribution credentails...    \n// var appGuid = \"f9fb70f7-e91f-4e62-b713-a609fb81be59\",\n//     appSecrect = \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\" ;\n\n//Delevlopment server dev credentails...    \n// var appGuid = \"4419942e-8f02-4527-8794-c24b42c584b5\",\n//     appSecrect = \"c769179f-e1ec-4598-b642-8f5dfd802e4c\" ;\n    \nif(isEmpty(user)){\n    node.warn(\"When user is empty no need to send push notificaiton\");\n    msg.isSendPush = false;\n}else{\n    var device_ids = populate_device_ids(user);\n    if( isEmpty(device_ids) ){\n        node.warn(\"`device_id` is empty no need to send push notification\");\n        msg.isSendPush = false;\n    }else{\n        msg.isSendPush = true;\n        //msg.url = \"http://drilist-socket-server.mybluemix.net/send_push_notification\";\n        msg.url = \"http://mastersoftwaretechnologies.com:9028/send_push_notification\";\n        msg.method = \"POST\";\n        \n        msg.payload = {\n            \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/\" + appGuid +\"/messages\",\n            \"appSecrect\": appSecrect,\n            \"payload\": {\n        \t\t\"message\": {\n        \t\t\t\"alert\": isEmpty(body.msg) ? data : body.msg  \n        \t\t}, \n        \t\t\"target\": {\n        \t\t\t\"deviceIds\": device_ids\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"apns\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"page_id\"  : 18,\n        \t\t\t\t\t\"user_page_id\": 18\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"gcm\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"user_page_id\"  : 18,\n        \t\t\t\t\t\"page_id\": 18,\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        };\n    }\n}\n\ndelete msg.headers;\nreturn msg;\n\nfunction populate_device_ids(userObj){\n    var device_tokens = userObj.device_token ;\n    if(isEmpty(device_tokens)){\n        return [];\n    }else{\n        var ids = [];\n        for(var itr in device_tokens){\n            ids.push(device_tokens[itr].device_id);\n        }\n        \n        return ids;\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 187.00001525878906,
        "y": 168.00000953674316,
        "wires": [
            [
                "4fb5c884.f68b88"
            ]
        ]
    },
    {
        "id": "4fb5c884.f68b88",
        "type": "switch",
        "z": "f59e7fb8.64e18",
        "name": "",
        "property": "isSendPush",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 377.0039176940918,
        "y": 168.41390419006348,
        "wires": [
            [
                "c1cce0c8.62ab1"
            ],
            [
                "e9e26d49.dedbc"
            ]
        ]
    },
    {
        "id": "e9e26d49.dedbc",
        "type": "debug",
        "z": "f59e7fb8.64e18",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 534.0121154785156,
        "y": 219.42953824996948,
        "wires": []
    },
    {
        "id": "b4c44bf3.5ec4f8",
        "type": "subflow:f59e7fb8.64e18",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 2083.8334579467773,
        "y": 419.3334274291992,
        "wires": [
            [
                "6bec97dd.85ec48"
            ]
        ]
    },
    {
        "id": "73df2b50.2d1234",
        "type": "function",
        "z": "5b153ee0.8e5f",
        "name": "payload",
        "func": "msg.push_obj= {\n    group: \"Group 2\",\n    req_user_number: null,\n    msg: null \n};\nmsg.isSecondTimeout = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 207.5000114440918,
        "y": 246.33334732055664,
        "wires": [
            [
                "cd000105.dad6b"
            ]
        ]
    },
    {
        "id": "f5370414.b5cca8",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "get_more_data",
        "func": "var params = msg.payload_content;\n\n\nif(isEmpty(params)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Bad request: please check api params\", data: null};\n\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    \n    msg.payload = {\n        \"selector\": {\n        \t\"createdAt\": {\n           \t\t\"$gt\" : 0\n           \t},\n            \"task_id\": {\n                \"$in\": [params.task_id]\n            },\n        \t\"table\": \"details\"\n    \t},\n    \t\"sort\": [{\"createdAt\": \"desc\" }],\n        \"limit\": 20,\n        \"bookmark\": params.bookmark\n    };\n}\nnode.warn(JSON.stringify(msg.payload));\nmsg.url = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_find\";\nmsg.method = \"POST\";\nmsg.statusCode = 200 ;\nnode.warn(msg);\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1236.5000305175781,
        "y": 960.6667232513428,
        "wires": [
            [
                "d9c51b1a.365dd8"
            ]
        ]
    },
    {
        "id": "555585b9.52b6ac",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 2299.500213623047,
        "y": 1014.0005483627319,
        "wires": []
    },
    {
        "id": "2bb6549.713c4ac",
        "type": "comment",
        "z": "1f0c18ce.350d47",
        "name": "Pagination endpoint ",
        "info": "",
        "x": 1249.5,
        "y": 892.3333129882812,
        "wires": []
    },
    {
        "id": "8bf93842.8c01a8",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1587.1667175292969,
        "y": 1016.0003852844238,
        "wires": [
            [
                "cdea72e8.d659b",
                "66621793.bbc7e8"
            ]
        ]
    },
    {
        "id": "d9c51b1a.365dd8",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1408.166790008545,
        "y": 983.0001411437988,
        "wires": [
            [
                "351feeb1.228362"
            ],
            [
                "8bf93842.8c01a8"
            ]
        ]
    },
    {
        "id": "351feeb1.228362",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 1563.1666870117188,
        "y": 934.6666870117188,
        "wires": []
    },
    {
        "id": "7ca504d3.50902c",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "populate_res",
        "func": "var {docs, bookmark} = msg.paginated_data ,\n    params = msg.payload_content,\n    user_obj         = isEmpty(msg.payload) ? {} : msg.payload[0];\n\nif(isEmpty(docs)){\n    msg.payload = {\n        status: 200,\n        msg: \"Record fectched successfully\",\n        records: docs,\n        bookmark: bookmark,\n        type: params.type\n    };\n}else{\n    if(isEmpty(user_obj)){\n        msg.statusCode = 400;\n        msg.payload = {\n            status: 400,\n            msg: \"Invaid access_token provided\",\n            records: null,\n            bookmark: null,\n            type: params.type\n        };\n    }else{\n        msg.statusCode = 200;\n        msg.payload = {\n            status: 200,\n            msg: \"Record fectched successfully\",\n            records: formulate_details(docs),\n            bookmark: bookmark,\n            type: params.type\n        };\n    }\n}\n\nreturn msg;\n\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"due_date\": \"\",\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d in detail_data){\n\n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n\n                        if((\"admin\" in user_obj.type)){\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k in detail_data){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else if(d === \"false\"){\n        return false;\n    }else{\n        return false ;\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2127.500373840332,
        "y": 1018.0003862380981,
        "wires": [
            [
                "555585b9.52b6ac"
            ]
        ]
    },
    {
        "id": "cdea72e8.d659b",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1744.1667289733887,
        "y": 1062.666648864746,
        "wires": []
    },
    {
        "id": "66621793.bbc7e8",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "isUserExists",
        "func": "msg.paginated_data  = msg.payload ;\nvar params          = msg.req_params ;\n\n\nmsg.payload = {\n    \"query\": \"access_token:\" + params.access_token,\n    \"sort\": \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1770.8333549499512,
        "y": 1018.0000600814819,
        "wires": [
            [
                "b539e449.97fb68"
            ]
        ]
    },
    {
        "id": "b539e449.97fb68",
        "type": "cloudant in",
        "z": "1f0c18ce.350d47",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1945.8334121704102,
        "y": 1018.6667318344116,
        "wires": [
            [
                "7ca504d3.50902c"
            ]
        ]
    },
    {
        "id": "d79d1914.809f48",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 336.5,
        "y": 186.33333778381348,
        "wires": []
    },
    {
        "id": "ca840369.f8539",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "updated_get_pages View",
        "method": "GET",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages",
        "tls": "",
        "x": 1255.6666259765625,
        "y": 510.6666564941406,
        "wires": [
            [
                "6969469c.3e8c38"
            ]
        ]
    },
    {
        "id": "824ec977.e4d538",
        "type": "comment",
        "z": "1f0c18ce.350d47",
        "name": "Updated_get_pages endpoint",
        "info": "",
        "x": 1271.5986442565918,
        "y": 458.5831871032715,
        "wires": []
    },
    {
        "id": "6969469c.3e8c38",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "count_view ",
        "func": "var payload             = msg.payload ,\n    body                = msg.payload_content,\n    access_token        = body.access_token,\n    all_pages           = body.all_pages,\n    page_id             = body.page_id;\n    \nif(all_pages){ //when app request for all pages\n    msg.all_pages_request = true ;\n    // var db_record           = populate_records(payload.rows),\n    //     user_obj            = populate_user(access_token, db_record.users),\n    //     task_obj            = populate_taskobj(page_id, db_record.tasks);\n        \n    // msg.db_get_page     = payload ;\n    // msg.method          = \"GET\";\n    // msg.url             = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?key=[\"'+ user_obj._id +'\"]&reduce=true';\n}else{\n    msg.all_pages_request = false ;\n    // if( page_id !== 1 || page_id !== 11 ){\n    //     var db_record           = populate_records(payload.rows),\n    //         user_obj            = populate_user(access_token, db_record.users),\n    //         task_obj            = populate_taskobj(page_id, db_record.tasks);\n            \n    //     msg.db_get_page     = payload ;\n    //     msg.method          = \"GET\";\n    //     msg.url             = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?key=[\"'+ user_obj._id +'\"]&reduce=true';\n    // }else{\n    //     msg.db_get_page     = payload ;\n    //     msg.method          = \"GET\";\n    //     msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false\";\n    // }        \n}    \nmsg.db_get_page = payload;\ndelete msg.headers;\nreturn msg;\n\n\nfunction populate_records(list){\n    var users = [], task_table = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].value.table == \"users\"){\n            users.push(list[i].doc);\n        }\n    }\n    \n    return {users: users, tasks: task_table} ;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {} ,\n        phone = body.phone ;\n        \n    for(var i in users){\n        if(\n            (access_token === users[i].access_token) ||\n            (phone == users[i].virtual_phone.toString())\n            ){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1525.6663208007812,
        "y": 509.6664733886719,
        "wires": [
            [
                "3a1d1c33.5fbbd4"
            ]
        ]
    },
    {
        "id": "4cc652be.ef065c",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 1543.1663284301758,
        "y": 455.9998836517334,
        "wires": [
            []
        ]
    },
    {
        "id": "3a1d1c33.5fbbd4",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "all_pages_request",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1720.784336090088,
        "y": 507.3784484863281,
        "wires": [
            [
                "7fe18004.32cb4"
            ],
            [
                "b6052d55.89cc6"
            ]
        ]
    },
    {
        "id": "b6052d55.89cc6",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "all_pages_request",
        "func": "var payload             = msg.db_get_page ,\n    counts              = msg.payload || [],\n    req_obj             = msg.payload_content,\n    db_record           = populate_records(payload.rows),\n    user_obj            = populate_user(req_obj, db_record.users),\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [];\n    \nif(isEmpty(user_obj)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, msg: \"Unable to populate user via using `access_token` or `phone`.\", data: null};\n}else{\n    var user_tasks = populate_user_task_pages(db_record.user_tasks, user_obj);\n    //msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n    msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: [] };\n}\nreturn msg;\n\n\nfunction populate_user_task_pages(usersTasks, user){ //list, object\n    if(isEmpty(usersTasks)) return [];\n    if(isEmpty(user)) return [];\n    \n    var result = [];\n    for(var itr in usersTasks){\n        if(usersTasks[itr].user_id == user._id){\n            result.push(usersTasks[itr]);\n        }\n    }\n    return result;\n}\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"template\"){\n            templates.push(list[i].value);\n        }\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n\n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"user_task\"){\n            user_task.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction populate_user(body, users){\n    var obj             = {} ,\n        access_token    = body.access_token,\n        phone           = body.phone ;\n        \n    for(var i in users){\n        if(\n            (access_token == users[i].access_token) ||\n            (phone == users[i].virtual_phone.toString())\n            ){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [] , req_page = {};\n    \n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        \n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n        \n    return {req_page : req_page, pages: pages};\n}\n\nfunction getpage(details){\n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n         \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    for(var loop in details){\n        var isUserTaskExits = checkFromUserTaskList(details[loop], db_record.user_tasks); \n        \n        if( isEmpty(isUserTaskExits) ){ //check if already user_task is not present for that user. if not then do the following steps\n        \n            populate_ancestors(details[loop].page_id, db_record.tasks, \"page_id\"); //calculating ancestor task with request page_id\n            populate_decendents(details[loop].page_id, db_record.details); //calculating sub childs _id with current requested page_id\n\n            msg.updated_user_task = {   // create user_task record if user_task is not present in database \n              table           : \"user_task\",\n            \ttask_id \t\t    : details[loop].task_id[0],\n            \tuser_id\t\t\t : user_obj._id,\n            \tpage_id         : parseInt(details[loop].page_id),\n            \tsynchronized    : 1,\n              status          : 0, \n            \tdate_updated\t : null,\t\n            \tparent_id\t\t : details[loop].task_id[0],\n            \tancestors       : ancestor_conts_array, \n            \tdecendents      : decendent_counts_array,\n            \tcount_status\t : {\n            \t   active       : 1,\n            \t   unread       : 0,\n            \t},\n            \tcount\t\t\t    : {\n            \t    active      : 1,\n            \t    unread      : 0,\n            \t},\n            \tcount_if\t\t    : {\n            \t    active      : 1,\n            \t    unread      : 0\n            \t},\n            \ttemplates\t\t : {},\n            \ttimeout\t\t\t : {},\n            \tcreatedAt       : new Date().getTime()\n            };\n            \n            details[loop].count.active = 0;     //when user_task is not present for that detail\n            details[loop].count.unread = 0;     // just set default values for active and unread\n            detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n        }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n            msg.updated_user_task = {};\n            var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n            details[loop].count.active = detail_count.active; \n            details[loop].count.unread = detail_count.unread;\n            detailArr.push(details[loop]); \n        }\n    }\n\n    if(!isEmpty(msg.updated_user_task))  msg.update_my_user_task = true;\n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n\n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    var res = {};\n    if(isEmpty(obj)) return res;\n    if(isEmpty(user_tasks)) return res;\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj._id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            res = user_tasks[loop];\n        }\n    }\n    return res;\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id.toString());\n                }\n                populate_ancestors( task_arr[index].parent_id, db_record.tasks, \"parent_id\"); \n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, ancestor_conts_array ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id.toString());\n                        populate_ancestors( task_arr[itr].parent_id, db_record.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id.toString());\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_record.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            if(!isEmpty(user_obj.data)){\n                var obj2 = detail.type ,\n                     obj1 = user_obj.data.groups;\n                \n                if(isEmpty(obj1) || isEmpty(obj2)) return true;\n                \n                return Object.keys( obj1 ).every( function( prop ) {\n             \t\treturn obj2.hasOwnProperty( prop );\n             \t});\n            }else{\n                return true;\n            }\n        }\n    }\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n\n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n\n                        if((\"admin\" in user_obj.type)){\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction hasSameProps( obj1, obj2 ) {\n    var isExists = false;\n    \n    if(!isEmpty(obj1)){\n        obj1 = obj1.groups ;\n        if(!isEmpty(obj1)){\n            isExists = Object.keys( obj1 ).every( function( prop ) {\n     \t\t    return obj2.hasOwnProperty( prop );\n     \t    });    \n        }\n    }\n    \n \treturn isExists;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"page_id\":          task_data.page_id,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1986.9622497558594,
        "y": 554.8019733428955,
        "wires": [
            [
                "4393e16d.2aabb"
            ]
        ]
    },
    {
        "id": "7fe18004.32cb4",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "paginated_detail",
        "func": "var body            = msg.payload_content,\n    page_id         = body.page_id ,\n    access_token    = body.access_token,\n    payload         = msg.db_get_page;\n \n    msg.counts      = msg.payload || [];\n    msg.db_record   = populate_records(payload.rows);\n    msg.user_obj    = populate_user(access_token, msg.db_record.users);\n    msg.user_tasks  = populate_user_task(msg.user_obj, msg.db_record.user_tasks);\n    msg.task_obj    = populate_taskobj(page_id, msg.db_record.tasks);\n\nmsg.payload = {\n    \"selector\": {\n    \t\"createdAt\": {\n       \t\t\"$gt\" : 0\n       \t},\n       \t\"$or\": [\n       \t    {\n       \t        \"task_id\": {\n                    \"$in\": [msg.task_obj._id]\n                }\n            }\n       \t],\n    \t\"table\": \"details\"\n\t},\n\t\"sort\": [{\"createdAt\": \"desc\" }],\n    \"limit\": 20,\n};\nif(page_id == 18) {\n    msg.payload.selector.user_id = msg.user_obj._id ;\n}\nmsg.url = \"https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_find\";\nmsg.method = \"POST\";\nmsg.statusCode = 200 ;\n\nnode.warn(\">>>>>>>>> query\");\nnode.warn(JSON.stringify(msg.payload));\ndelete msg.headers;\nreturn msg;\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"template\"){\n            templates.push(list[i].value);\n        }\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n\n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"user_task\"){\n            user_task.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction populate_user(access_token, users){\n    //try{\n        var obj = {} ,\n            phone = body.phone ;\n            \n        for(var i =0; i<users.length; i++){\n            node.warn(\">>>>>>>>>> users[i]\");\n            node.warn(users[i]);\n            if(users[i].virtual_phone){\n                if(\n                    (access_token === users[i].access_token) ||\n                    (phone == users[i].virtual_phone.toString() )\n                    ){\n                    obj = users[i];\n                }    \n            }\n        }\n        return obj;\n    // }catch(e){\n    //     node.warn(JSON.stringify(e));\n    //     return {};\n    // }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1983.739158630371,
        "y": 480.23241233825684,
        "wires": [
            [
                "7e66f892.a0b288"
            ]
        ]
    },
    {
        "id": "7e66f892.a0b288",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "SearchFilter",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2165.0724716186523,
        "y": 480.2323913574219,
        "wires": [
            [
                "48c8e4f7.7ae0cc"
            ]
        ]
    },
    {
        "id": "4393e16d.2aabb",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 2154.9740600585938,
        "y": 555.2161202430725,
        "wires": []
    },
    {
        "id": "48c8e4f7.7ae0cc",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "populate",
        "func": "var body                    = msg.payload_content,\n    page_id                 = body.page_id ,\n    access_token            = body.access_token,\n    payload                 = msg.db_get_page,\n    counts                  = msg.counts ,\n    db_record               = msg.db_record,\n    user_obj                = msg.user_obj,\n    user_tasks              = msg.user_tasks,\n    task_obj                = msg.task_obj,\n    paginated_details       = populate_paginated_details(msg.payload),\n    //paginated_details       = db_record.details,\n    ancestor_conts_array    = [];\n\n    msg.updated_user_task = {}; //this will hold the user_task is not present in database.\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.update_my_user_task = false;\n\n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_SUCCESS\";\n            page_id = 1 ;\n            msg.api_response    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populate_login_verify_pages(page_id, db_record), bookmark: paginated_details.bookmark};\n            \n        }else if(page_id == 1){\n            msg.api_status = \"API_SUCCESS\";\n            page_id = 1 ;\n            msg.api_response    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populate_login_verify_pages(page_id, db_record), bookmark: paginated_details.bookmark };\n            \n        }else{\n            if(!user_obj.security_level){\n                msg.api_status = \"API_SUCCESS\";\n                page_id = 11 ;\n                msg.api_response    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populate_login_verify_pages(page_id, db_record), bookmark: paginated_details.bookmark};\n            }else{\n                msg.api_status = \"API_SUCCESS\";\n                if(isEmpty(body.user_task_list)){\n                    msg.update_my_user_task = false;\n                }else{\n                   msg.method  = \"GET\";\n                   msg.url     = 'https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task?key=[\"' + user_obj._id +'\"]';\n                   msg.update_my_user_task = true;\n                }\n                msg.api_response = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record), bookmark: paginated_details.bookmark };\n            }\n        }    \n    }\ndelete msg.headers;\nreturn msg;\n\n/*********************** login and verify page functions *******************/\n\nfunction populate_login_verify_pages(page_id, db_obj){\n    var req_page = {};\n    if(!isEmpty(task_obj)){\n        var single_prepare_task   =  formulate_task(task_obj, db_obj),\n            single_prepare_detail =  formulate_details(paginated_details.data ? paginated_details.data : paginated_details);\n        \n        req_page = {\n           page_id : page_id,\n           user    : {},\n           task    : single_prepare_task,\n           detail  : single_prepare_detail\n        };\n    }\n    return {req_page: req_page, pages: []};\n}\n\n/*********************** login and verify page functions ends here*******************/\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [] , req_page = {};\n   \n    if(!isEmpty(page_id)){\n        if(!isEmpty(task_obj)){\n            var single_prepare_task   =  formulate_task(task_obj, db_obj),\n                single_prepare_detail =  formulate_details(paginated_details.data ? paginated_details.data : paginated_details);\n            \n            req_page = {\n               page_id : page_id,\n               user    : (page_id == 11 ) ? {} : user_obj ,\n               task    : single_prepare_task,\n               detail  : getpage(single_prepare_detail)\n            };\n        }\n    }\n    if(!isEmpty(user_tasks)){\n        for(var i in user_tasks){\n            if(!isEmpty(task_obj)){\n            var prepare_task    =  formulate_task(task_obj, db_obj),\n                prepare_details =  formulate_details(paginated_details.data ? paginated_details.data : paginated_details);\n       \n                pages.push({\n                    page_id :  user_tasks[i].page_id,\n                    user    :  user_obj || {},\n                    task    :  prepare_task,\n                    detail  :  getpage(prepare_details)\n            \t});\n            }\n        }   \n    }\n\n    return {req_page : req_page, pages: pages};\n}\n\nfunction getpage(details){\n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n         \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_record.user_tasks); \n            \n            if( isEmpty(isUserTaskExits) ){ //check if already user_task is not present for that user. if not then do the following steps\n            \n                populate_ancestors(details[loop].page_id, db_record.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                var decendent = populate_decendents(details[loop].page_id, db_record.details); //calculating sub childs _id with current requested page_id\n\n                msg.updated_user_task = {   // create user_task record if user_task is not present in database \n                    table           : \"user_task\",\n                \ttask_id \t\t: details[loop].task_id[0],\n                \tuser_id\t\t\t: user_obj._id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tto_page_id      : parseInt(details[loop].to_page_id),\n                \tsynchronized    : 1,\n                    status          : 0, \n                \tdate_updated\t: null,\t\n                \tparent_id\t\t: details[loop].task_id[0],\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent,\n                \tcount_status\t: {\n                \t   active       : 1,\n                \t   unread       : 1,\n                \t},\n                \tcount\t\t\t: {\n                \t    active      : 1,\n                \t    unread      : 1,\n                \t},\n                \tcount_if\t\t: {\n                \t    active      : 1,\n                \t    unread      : 1\n                \t},\n                \ttemplates\t\t: {},\n                \ttimeout\t\t\t: {},\n                \tcreatedAt       : new Date().getTime()\n                };\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                msg.updated_user_task = {};\n                //var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                // details[loop].count.active = detail_count.active; \n                // details[loop].count.unread = detail_count.unread;\n                details[loop].count.active = 0; \n                details[loop].count.unread = 0;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n    \n    if(!isEmpty(msg.updated_user_task))  msg.update_my_user_task = true;\n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n\n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    var res = {};\n    if(isEmpty(obj)) return res;\n    if(isEmpty(user_tasks)) return res;\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj._id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id)) &&\n            (user_tasks[loop].page_id == obj.page_id )\n        ){\n            res = user_tasks[loop];\n        }\n    }\n    return res;\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id.toString());\n                }\n                populate_ancestors( task_arr[index].parent_id, db_record.tasks, \"parent_id\"); \n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, ancestor_conts_array ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id.toString());\n                        populate_ancestors( task_arr[itr].parent_id, db_record.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr){\n    var decendent_counts_array = [];\n        for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(!if_exists_in_arr( details_arr[index]._id.toString(), decendent_counts_array)){\n                decendent_counts_array.push(details_arr[index]._id.toString());\n                if( !isEmpty(details_arr[index].to_page_id) && ( parseInt(details_arr[index].to_page_id) !== 0) ){\n\t\t        \tpopulate_decendents(details_arr[index].to_page_id, details_arr);\n\t\t    \t}\n            }\n        }\n    }\n    return decendent_counts_array;\n}\n\nfunction checkIsPrivate(detail){\n\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            if(!isEmpty(user_obj.data)){\n                var obj2 = detail.type ,\n                     obj1 = user_obj.data.groups;\n                \n                if(isEmpty(obj1) || isEmpty(obj2)) return true;\n                \n                return Object.keys( obj1 ).every( function( prop ) {\n             \t\treturn obj2.hasOwnProperty( prop );\n             \t});\n            }else{\n                return true;\n            }\n        }\n    }\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"due_date\": \"\",\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d in detail_data){\n\n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n\n                        if((\"admin\" in user_obj.type)){\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k in detail_data){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction hasSameProps( obj1, obj2 ) {\n    var isExists = false;\n    \n    if(!isEmpty(obj1)){\n        obj1 = obj1.groups ;\n        if(!isEmpty(obj1)){\n            isExists = Object.keys( obj1 ).every( function( prop ) {\n     \t\t    return obj2.hasOwnProperty( prop );\n     \t    });    \n        }\n    }\n    \n \treturn isExists;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"page_id\":          task_data.page_id,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else if(d === \"false\"){\n        return false;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\t//2nd operator check implied heere...\n\tif(!isEmpty(obj2.operator_type) && obj2.operator_type == \"1\") {\n\t    obj.isSecondOperator = true ;\n\t}else{\n\t    obj.isSecondOperator = false ;\n\t}\n\treturn obj;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction populate_paginated_details(list){\n    var {docs, bookmark} = list ;\n    \n    if( !isEmpty(docs) ){\n        return {data: docs, bookmark: bookmark};\n    }else{\n        return {data: [], bookmark: null};\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2321.8346939086914,
        "y": 522.0000915527344,
        "wires": [
            [
                "82b3858f.6e5c58",
                "1bb11aa2.e88aa5"
            ]
        ]
    },
    {
        "id": "1bb11aa2.e88aa5",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2504.2125511169434,
        "y": 572.0621242523193,
        "wires": [
            [
                "9f4a0e0.a868bf"
            ],
            [
                "ddc2e527.c68778"
            ]
        ]
    },
    {
        "id": "ddc2e527.c68778",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "update_my_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2689.7123985290527,
        "y": 624.062108039856,
        "wires": [
            [
                "8361054e.f69a58",
                "e41db15d.66273"
            ],
            [
                "e41db15d.66273"
            ]
        ]
    },
    {
        "id": "9f4a0e0.a868bf",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "",
        "x": 2682.546625137329,
        "y": 549.7288599014282,
        "wires": []
    },
    {
        "id": "8361054e.f69a58",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "insert user_task",
        "func": "if(isEmpty(msg.updated_user_task)){\n    msg.payload = null;\n    node.warn(\"when msg.payload = null\");\n}else{\n    node.warn(\"msg.updated_user_task\");\n    node.warn(msg.updated_user_task);\n    msg.payload = msg.updated_user_task ;\n}\n\n//node.warn(\"API_SUCCESS >>> if case level 2\");\ndelete msg.headers;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2872.5459899902344,
        "y": 569.3953771591187,
        "wires": [
            [
                "adec21fe.7fb01"
            ]
        ]
    },
    {
        "id": "e41db15d.66273",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "isUpdateUserTasks",
        "property": "isUpdateUserTasks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2888.2137184143066,
        "y": 686.0623960494995,
        "wires": [
            [
                "d2a87f53.14218"
            ],
            [
                "1e2c3c7f.2951a4"
            ]
        ]
    },
    {
        "id": "1e2c3c7f.2951a4",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3098.6674041748047,
        "y": 722.3333873748779,
        "wires": []
    },
    {
        "id": "d2a87f53.14218",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3096.2142944335938,
        "y": 660.3958282470703,
        "wires": [
            [
                "28a0cbe7.660ea4"
            ]
        ]
    },
    {
        "id": "adec21fe.7fb01",
        "type": "switch",
        "z": "1f0c18ce.350d47",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 3048.8337631225586,
        "y": 567.3333988189697,
        "wires": [
            [
                "1b27deed.af4fb1",
                "bbc59e33.c029b"
            ]
        ]
    },
    {
        "id": "bbc59e33.c029b",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "Un-unsed usertask inserted",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3263.1672687530518,
        "y": 515.333366394043,
        "wires": []
    },
    {
        "id": "1b27deed.af4fb1",
        "type": "cloudant out",
        "z": "1f0c18ce.350d47",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "live-platformApp-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3216.7117042541504,
        "y": 566.0620317459106,
        "wires": []
    },
    {
        "id": "28a0cbe7.660ea4",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "payload",
        "func": "var content          = msg.payload_content;\n    users_all_task   = simplfyUserTask(msg.payload);\n\nvar updated_user_task = populate_updated_user_task(content.user_task_list, users_all_task);\n\nif(!isEmpty(updated_user_task)){\n    msg.payload = { \"docs\": updated_user_task };   \n}else{\n    var obj = [];\n    for(var i=0; i<content.user_task_list.length; i++){\n        obj.push({\n            table           : \"user_task\",\n        \ttask_id \t\t: content.user_task_list[i].task_id,\n        \tuser_id\t\t\t: content.user_task_list[i].user_id,\n        \tpage_id         : parseInt(content.user_task_list[i].page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 1, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: content.user_task_list[i].task_id,\n        \tancestors       : content.user_task_list[i].ancestors, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 0,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 0,\n        \t    unread      : content.user_task_list[i].unread,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 0\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        });\n    }\n    msg.payload = { \"docs\": obj };   \n}\n//node.warn(\"API_SUCCESS >>> if case level 2 step 3\");\ndelete msg.headers;\nreturn msg;\n\nfunction simplfyUserTask(user_task){\n    if(isEmpty(user_task)){\n        return [];\n    }else{\n        var d = [], rows = user_task.rows;\n        for(var i=0; i<rows.length; i++){\n            d.push(rows[i].value);\n        }\n        return d;\n    }    \n}\n\nfunction populate_updated_user_task(user_task_list, users_all_task){\n\n    if(!isEmpty(user_task_list) && !isEmpty(user_task_list)){\n        var user_task = [];\n\n        for(var i=0; i<users_all_task.length; i++){\n            for(j=0; j<user_task_list.length; j++){\n                if(\n                    (users_all_task[i].user_id == user_task_list[j].user_id) &&\n                    (users_all_task[i].task_id == user_task_list[j].task_id) &&\n                    (users_all_task[i].page_id == user_task_list[j].page_id)  \n                ){\n                    users_all_task[i].synchronized = 1 ;\n                    users_all_task[i].status       = 1 ;\n                    users_all_task[i].count.unread = user_task_list[j].unread ;\n                    users_all_task[i].date_updated = new Date().getTime();\n                    \n                    //push to new array which is going to update into db.\n                    user_task.push(users_all_task[i]);\n                }\n            }\n        }\n        return user_task ;\n    }else{\n        return null;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3253.5475120544434,
        "y": 661.0624694824219,
        "wires": [
            [
                "a28b3ffd.eecd7",
                "c4210f6b.3d95"
            ]
        ]
    },
    {
        "id": "c4210f6b.3d95",
        "type": "http request",
        "z": "1f0c18ce.350d47",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://b822c7af-1fbc-44ad-b335-38e998b35393-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 3439.881992340088,
        "y": 676.729220867157,
        "wires": [
            [
                "4bfab724.3a00d8"
            ]
        ]
    },
    {
        "id": "a28b3ffd.eecd7",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "bulk payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3438.88032913208,
        "y": 633.7289142608643,
        "wires": []
    },
    {
        "id": "4bfab724.3a00d8",
        "type": "debug",
        "z": "1f0c18ce.350d47",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3617.8806953430176,
        "y": 677.3959269523621,
        "wires": []
    },
    {
        "id": "c1cce0c8.62ab1",
        "type": "http request",
        "z": "f59e7fb8.64e18",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 536.5001525878906,
        "y": 105.00003910064697,
        "wires": [
            []
        ]
    },
    {
        "id": "6b9331d1.37472",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2294.8336334228516,
        "y": 759.3334579467773,
        "wires": [
            [
                "a8534779.110968"
            ]
        ]
    },
    {
        "id": "24f6dd68.c068a2",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 2406.833251953125,
        "y": 283.33335304260254,
        "wires": [
            [
                "825bcb33.cbb6f8"
            ]
        ]
    },
    {
        "id": "8a736e4.0e4ae9",
        "type": "http response",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 1374.6669731140137,
        "y": 1380.9999313354492,
        "wires": []
    },
    {
        "id": "fc1fffaf.7c5be",
        "type": "change",
        "z": "5b153ee0.8e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1152.6669921875,
        "y": 1380.3333339691162,
        "wires": [
            [
                "8a736e4.0e4ae9"
            ]
        ]
    },
    {
        "id": "a6662c9e.f12b2",
        "type": "subflow:f59e7fb8.64e18",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 1165.333251953125,
        "y": 1233,
        "wires": [
            [
                "a384ebff.072b88"
            ]
        ]
    },
    {
        "id": "a384ebff.072b88",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1405.5000839233398,
        "y": 1231.3332443237305,
        "wires": []
    },
    {
        "id": "6bec97dd.85ec48",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2322.500457763672,
        "y": 431.00005531311035,
        "wires": []
    },
    {
        "id": "82b3858f.6e5c58",
        "type": "function",
        "z": "1f0c18ce.350d47",
        "name": "response",
        "func": "msg.payload = msg.api_response;\n//node.warn(\"API_SUCCESS >>> if case level 3 step 1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2508.000476837158,
        "y": 474.6666831970215,
        "wires": [
            [
                "55d88779.3fea28"
            ]
        ]
    },
    {
        "id": "55d88779.3fea28",
        "type": "http response",
        "z": "1f0c18ce.350d47",
        "name": "API Response",
        "x": 2686.001567840576,
        "y": 475.0002956390381,
        "wires": []
    },
    {
        "id": "2380ff95.b4d7a",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1581.5004196166992,
        "y": 622.6667041778564,
        "wires": []
    },
    {
        "id": "32ad12a9.21c81e",
        "type": "http request",
        "z": "5b153ee0.8e5f",
        "name": "Chatbot",
        "method": "POST",
        "ret": "obj",
        "url": "https://play-timeout.mybluemix.net/chatbot",
        "tls": "",
        "x": 1366.8334197998047,
        "y": 576.6667003631592,
        "wires": [
            [
                "75c704b.055edfc",
                "2380ff95.b4d7a"
            ]
        ]
    },
    {
        "id": "d5ad4e71.3c40d",
        "type": "subflow:6afadd8f.4efcd4",
        "z": "5b153ee0.8e5f",
        "name": "Step2 Timeout processing",
        "x": 2578.666488647461,
        "y": 695.6666250228882,
        "wires": []
    },
    {
        "id": "6223ad13.3c2a24",
        "type": "inject",
        "z": "5b153ee0.8e5f",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2344.666479110718,
        "y": 714.6666679382324,
        "wires": [
            [
                "d5ad4e71.3c40d"
            ]
        ]
    },
    {
        "id": "e7befcd3.e59f9",
        "type": "interval",
        "z": "5b153ee0.8e5f",
        "name": "interval",
        "interval": "5",
        "onstart": true,
        "msg": "ping",
        "showstatus": true,
        "unit": "minutes",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 59,
        "y": 245.33334350585938,
        "wires": [
            [
                "73df2b50.2d1234"
            ]
        ]
    },
    {
        "id": "307061c0.dce51e",
        "type": "subflow:f59e7fb8.64e18",
        "z": "5b153ee0.8e5f",
        "name": "",
        "x": 1951.6666259765625,
        "y": 787.3333129882812,
        "wires": [
            [
                "3533aac5.535ff6"
            ]
        ]
    },
    {
        "id": "3533aac5.535ff6",
        "type": "debug",
        "z": "5b153ee0.8e5f",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2190.333625793457,
        "y": 798.9999408721924,
        "wires": []
    }
]